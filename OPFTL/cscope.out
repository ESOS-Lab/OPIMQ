cscope 15 /mnt/c/BFTL/BFTL/src               0000283137
	@data_buffer.c

47 
	~"xû_¥ötf.h
"

48 
	~<as£π.h
>

49 
	~"mem‹y_m≠.h
"

53 
P_DATA_BUF_MAP
 
	gd©aBufM≠På
;

54 
DATA_BUF_LRU_LIST
 
	gd©aBufLruLi°
;

55 
P_DATA_BUF_HASH_TABLE
 
	g•_d©aBufHashTabÀ
;

56 
P_TEMPORARY_DATA_BUF_MAP
 
	gãmpD©aBufM≠På
;

58 
	$Buf„rM™agemít_Inô
()

61 
g_bm_c⁄ãxt
.
‰ì_cou¡
 = 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
;

63 
bôm≠_off£t
 = 0; bôm≠_off£à< (
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
/32); bitmap_offset++)

65 
g_bm_c⁄ãxt
.
bôm≠
[
bôm≠_off£t
] = 0xFFFFFFFF;

69 
d©aBufM≠På
 = (
P_DATA_BUF_MAP
Ë
DATA_BUFFER_MAP_ADDR
;

70 
•_d©aBufHashTabÀ
 = (
P_DATA_BUF_HASH_TABLE
)
DATA_BUFFFER_HASH_TABLE_ADDR
;

71 
ãmpD©aBufM≠På
 = (
P_TEMPORARY_DATA_BUF_MAP
)
TEMPORARY_DATA_BUFFER_MAP_ADDR
;

73 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
NULL
;

75 
bufIdx
 = 0; bufIdx < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
; bufIdx++)

77 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
bufIdx
);

79 
p_d©aBufE¡ry
->
logiˇlSli˚Addr
 = 
LSA_NONE
;

80 
p_d©aBufE¡ry
->
¥evE¡ry
 = 
bufIdx
-1;

81 
p_d©aBufE¡ry
->
√xtE¡ry
 = 
bufIdx
+1;

82 
p_d©aBufE¡ry
->
dúty
 = 
DATA_BUF_CLEAN
;

83 
p_d©aBufE¡ry
->
blockögReqTaû
 = 
REQ_SLOT_TAG_NONE
;

85 
•_d©aBufHashTabÀ
->
d©aBufHash
[
bufIdx
].
hódE¡ry
 = 
DATA_BUF_IDX_INVALID
;

86 
•_d©aBufHashTabÀ
->
d©aBufHash
[
bufIdx
].
èûE¡ry
 = 
DATA_BUF_IDX_INVALID
;

88 
p_d©aBufE¡ry
->
hashPªvE¡ry
 = 
DATA_BUF_IDX_INVALID
;

89 
p_d©aBufE¡ry
->
hashNextE¡ry
 = 
DATA_BUF_IDX_INVALID
;

92 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(0);

94 
p_d©aBufE¡ry
->
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

96 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
((
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
 - 1));

98 
p_d©aBufE¡ry
->
√xtE¡ry
 = 
DATA_BUF_IDX_INVALID
;

100 
d©aBufLruLi°
.
hódE¡ry
 = 0 ;

101 
d©aBufLruLi°
.
èûE¡ry
 = 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
 - 1;

103 
bufIdx
 = 0; bufIdx < 
AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
; bufIdx++)

105 
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
bufIdx
].
blockögReqTaû
 = 
REQ_SLOT_TAG_NONE
;

107 
	}
}

109 
DATA_BUF_ENTRY
* 
	$Buf„rM™agemít_GëD©aBufE¡ry
(
d©aBufIdx
)

111  &
d©aBufM≠På
->
d©aBuf
[
d©aBufIdx
];

112 
	}
}

114 
	$Buf„rM™agemít_CheckBufHô
(
ªqSlŸTag
)

116 
bufIdx
, 
logiˇlSli˚Addr
;

117 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
NULL
;

119 
logiˇlSli˚Addr
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].logicalSliceAddr;

120 
bufIdx
 = 
•_d©aBufHashTabÀ
->
d©aBufHash
[
	`FödD©aBufHashTabÀE¡ry
(
logiˇlSli˚Addr
)].
hódE¡ry
;

121 #i‡(
IFLOOP_DEBUG
 == 1)

122 
˙t
 = 0;

125 
bufIdx
 !
DATA_BUF_IDX_INVALID
)

131 #i‡(
IFLOOP_DEBUG
 == 1)

132 
˙t
 += 1;

133 i‡(
˙t
 > 1000)

134 
	`xû_¥ötf
("%u\n", 
bufIdx
 );

138 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
bufIdx
);

140 if(
logiˇlSli˚Addr
 =
p_d©aBufE¡ry
->logicalSliceAddr)

142 if((
DATA_BUF_IDX_INVALID
 !
p_d©aBufE¡ry
->
√xtE¡ry
)

143 && (
DATA_BUF_IDX_INVALID
 !
p_d©aBufE¡ry
->
¥evE¡ry
))

145 
d©aBufM≠På
->
d©aBuf
[
p_d©aBufE¡ry
->
¥evE¡ry
].
√xtE¡ry
 =Ö_dataBufEntry->nextEntry;

146 
d©aBufM≠På
->
d©aBuf
[
p_d©aBufE¡ry
->
√xtE¡ry
].
¥evE¡ry
 =Ö_dataBufEntry->prevEntry;

148 if((
DATA_BUF_IDX_INVALID
 =
p_d©aBufE¡ry
->
√xtE¡ry
)

149 && (
DATA_BUF_IDX_INVALID
 !
p_d©aBufE¡ry
->
¥evE¡ry
))

151 
d©aBufM≠På
->
d©aBuf
[
p_d©aBufE¡ry
->
¥evE¡ry
].
√xtE¡ry
 = 
DATA_BUF_IDX_INVALID
;

152 
d©aBufLruLi°
.
èûE¡ry
 = 
p_d©aBufE¡ry
->
¥evE¡ry
;

154 if((
DATA_BUF_IDX_INVALID
 !
p_d©aBufE¡ry
->
√xtE¡ry
)

155 && (
DATA_BUF_IDX_INVALID
 =
p_d©aBufE¡ry
->
¥evE¡ry
))

157 
d©aBufM≠På
->
d©aBuf
[
p_d©aBufE¡ry
->
√xtE¡ry
].
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

158 
d©aBufLruLi°
.
hódE¡ry
 = 
p_d©aBufE¡ry
->
√xtE¡ry
;

162 
d©aBufLruLi°
.
èûE¡ry
 = 
DATA_BUF_IDX_INVALID
;

163 
d©aBufLruLi°
.
hódE¡ry
 = 
DATA_BUF_IDX_INVALID
;

166 if(
d©aBufLruLi°
.
hódE¡ry
 !
DATA_BUF_IDX_INVALID
)

168 
p_d©aBufE¡ry
->
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

169 
p_d©aBufE¡ry
->
√xtE¡ry
 = 
d©aBufLruLi°
.
hódE¡ry
;

170 
d©aBufM≠På
->
d©aBuf
[
d©aBufLruLi°
.
hódE¡ry
].
¥evE¡ry
 = 
bufIdx
;

171 
d©aBufLruLi°
.
hódE¡ry
 = 
bufIdx
;

175 
p_d©aBufE¡ry
->
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

176 
p_d©aBufE¡ry
->
√xtE¡ry
 = 
DATA_BUF_IDX_INVALID
;

177 
d©aBufLruLi°
.
hódE¡ry
 = 
bufIdx
;

178 
d©aBufLruLi°
.
èûE¡ry
 = 
bufIdx
;

185  
bufIdx
;

189 
bufIdx
 = 
p_d©aBufE¡ry
->
hashNextE¡ry
;

195  
DATA_BUF_FAIL
;

196 
	}
}

198 
	$Buf„rM™agemít_GëD©aBufAddr
(
ªqSlŸTag
)

200 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 =
REQ_TYPE_NAND
)

202 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 =
REQ_OPT_DATA_BUF_ENTRY
)

204  (
DATA_BUFFER_BASE_ADDR
 + 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 * 
BYTES_PER_DATA_REGION_OF_SLICE
);

206 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 =
REQ_OPT_DATA_BUF_TEMP_ENTRY
)

208  (
TEMPORARY_DATA_BUFFER_BASE_ADDR
 + 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 * 
BYTES_PER_DATA_REGION_OF_SLICE
);

210 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 =
REQ_OPT_DATA_BUF_ADDR
)

212  
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
addr
;

215  
RESERVED_DATA_BUFFER_BASE_ADDR
;

217 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 =
REQ_TYPE_NVME_DMA
)

219 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 =
REQ_OPT_DATA_BUF_ENTRY
)

221  (
DATA_BUFFER_BASE_ADDR
 + 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 * 
BYTES_PER_DATA_REGION_OF_SLICE
 +ÑeqPoﬁPå->ªqPoﬁ[ªqSlŸTag].
nvmeDmaInfo
.
nvmeBlockOff£t
 * 
BYTES_PER_NVME_BLOCK
);

225 
	`as£π
(!"[WARNING] wrongÑeqOpt-dataBufFormat [WARNING]");

230 
	`as£π
(!"[WARNING] wrongÑeqType [WARNING]");

233 
	}
}

235 
	$Buf„rM™agemít_GëS∑ªD©aBufAddr
(
ªqSlŸTag
)

237 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

239 if(
REQ_TYPE_NAND
 =
p_ªque°E¡ry
->
ªqTy≥
)

241 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
)

243 
REQ_OPT_DATA_BUF_ENTRY
:

244  (
SPARE_DATA_BUFFER_BASE_ADDR
 + 
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
 * 
BYTES_PER_SPARE_REGION_OF_SLICE
);

245 
REQ_OPT_DATA_BUF_TEMP_ENTRY
:

246  (
TEMPORARY_SPARE_DATA_BUFFER_BASE_ADDR
 + 
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
 * 
BYTES_PER_SPARE_REGION_OF_SLICE
);

247 
REQ_OPT_DATA_BUF_ADDR
:

248  (
p_ªque°E¡ry
->
d©aBufInfo
.
addr
 + 
BYTES_PER_DATA_REGION_OF_SLICE
);

250  (
RESERVED_DATA_BUFFER_BASE_ADDR
 + 
BYTES_PER_DATA_REGION_OF_SLICE
);

253 i‡(
REQ_TYPE_NVME_DMA
 =
p_ªque°E¡ry
->
ªqTy≥
)

255 i‡(
REQ_OPT_DATA_BUF_ENTRY
 =
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
)

257  (
SPARE_DATA_BUFFER_BASE_ADDR
 + 
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
 * 
BYTES_PER_SPARE_REGION_OF_SLICE
);

261 
	`as£π
(!"[WARNING] wrongÑeqOpt-dataBufFormat [WARNING]");

266 
	`as£π
(!"[WARNING] wrongÑeqType [WARNING]");

268 
	}
}

270 
	$Buf„rM™agemít_Rñó£Buf
(
buf_idx
)

273 
off£t
 = (
buf_idx
/32);

275 
buf_idx
 %= 32;

277 
g_bm_c⁄ãxt
.
bôm≠
[
off£t
] |(1 << 
buf_idx
);

279 
	}
}

281 
	$Buf„rM™agemít_AŒocBuf_New
()

284 i‡(0 =
g_bm_c⁄ãxt
.
‰ì_cou¡
)

286  
DATA_BUF_IDX_INVALID
;

289 
buf_idx
 = 
DATA_BUF_IDX_INVALID
;

291 
off£t
 = 0; off£à< (
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
/32); offset++)

293 
buf_idx
 = 
	`__buûtö_˘z
(
g_bm_c⁄ãxt
.
bôm≠
[
off£t
]);

295 i‡(32 !
buf_idx
)

297 
g_bm_c⁄ãxt
.
bôm≠
[
off£t
] &~(1 << 
buf_idx
);

298 
buf_idx
 +(
off£t
*32);

304  
buf_idx
;

306  
DATA_BUF_IDX_INVALID
;

307 
	}
}

309 
	$Buf„rM™agemít_AŒocBuf
()

311 
evi˘edBufE¡ryIdx
 = 
d©aBufLruLi°
.
èûE¡ry
;

313 if(
evi˘edBufE¡ryIdx
 =
DATA_BUF_IDX_INVALID
)

315 
	`as£π
(!"[WARNING] There isÇo valid bufferÉntry [WARNING]");

318 
DATA_BUF_ENTRY
* 
p_evi˘edD©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
evi˘edBufE¡ryIdx
);

320 i‡(
DATA_BUF_IDX_INVALID
 !
p_evi˘edD©aBufE¡ry
->
¥evE¡ry
)

322 
d©aBufM≠På
->
d©aBuf
[
p_evi˘edD©aBufE¡ry
->
¥evE¡ry
].
√xtE¡ry
 = 
DATA_BUF_IDX_INVALID
;

323 
d©aBufLruLi°
.
èûE¡ry
 = 
p_evi˘edD©aBufE¡ry
->
¥evE¡ry
;

325 
p_evi˘edD©aBufE¡ry
->
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

326 
p_evi˘edD©aBufE¡ry
->
√xtE¡ry
 = 
d©aBufLruLi°
.
hódE¡ry
;

328 
d©aBufM≠På
->
d©aBuf
[
d©aBufLruLi°
.
hódE¡ry
].
¥evE¡ry
 = 
evi˘edBufE¡ryIdx
;

330 
d©aBufLruLi°
.
hódE¡ry
 = 
evi˘edBufE¡ryIdx
;

335 
p_evi˘edD©aBufE¡ry
->
¥evE¡ry
 = 
DATA_BUF_IDX_INVALID
;

336 
p_evi˘edD©aBufE¡ry
->
√xtE¡ry
 = 
DATA_BUF_IDX_INVALID
;

338 
d©aBufLruLi°
.
hódE¡ry
 = 
evi˘edBufE¡ryIdx
;

339 
d©aBufLruLi°
.
èûE¡ry
 = 
evi˘edBufE¡ryIdx
;

342 
	`Buf„rM™agemít_Sñe˘iveGëFromHashLi°
(
evi˘edBufE¡ryIdx
, 1);

344  
evi˘edBufE¡ryIdx
;

345 
	}
}

347 
	$Buf„rM™agemít_AŒoˇãTempBuf
(
dõNo
)

349  
dõNo
;

350 
	}
}

352 
	$Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
bufE¡ryIdx
, 
ªqSlŸTag
)

354 if(
d©aBufM≠På
->
d©aBuf
[
bufE¡ryIdx
].
blockögReqTaû
 !
REQ_SLOT_TAG_NONE
)

356 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evBlockögReq
 = 
d©aBufM≠På
->
d©aBuf
[
bufE¡ryIdx
].
blockögReqTaû
;

357 
ªqPoﬁPå
->
ªqPoﬁ
[ªqPoﬁPå->ªqPoﬁ[
ªqSlŸTag
].
¥evBlockögReq
].
√xtBlockögReq
 =ÑeqSlotTag;

360 
d©aBufM≠På
->
d©aBuf
[
bufE¡ryIdx
].
blockögReqTaû
 = 
ªqSlŸTag
;

361 
	}
}

363 
	$Buf„rM™agemít_Upd©eTempBufE¡ryInfoBlockögReq
(
bufE¡ry
, 
ªqSlŸTag
)

366 if(
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
bufE¡ry
].
blockögReqTaû
 !
REQ_SLOT_TAG_NONE
)

368 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evBlockögReq
 = 
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
bufE¡ry
].
blockögReqTaû
;

369 
ªqPoﬁPå
->
ªqPoﬁ
[ªqPoﬁPå->ªqPoﬁ[
ªqSlŸTag
].
¥evBlockögReq
].
√xtBlockögReq
 =ÑeqSlotTag;

372 
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
bufE¡ry
].
blockögReqTaû
 = 
ªqSlŸTag
;

373 
	}
}

375 
	$Buf„rM™agemít_AddBufToHashLi°
(
bufE¡ryIdx
)

377 
hashE¡ry
;

379 
hashE¡ry
 = 
	`FödD©aBufHashTabÀE¡ry
(
d©aBufM≠På
->
d©aBuf
[
bufE¡ryIdx
].
logiˇlSli˚Addr
);

381 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
bufE¡ryIdx
);

383 if(
DATA_BUF_IDX_INVALID
 !
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
)

385 
p_d©aBufE¡ry
->
hashPªvE¡ry
 = 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
 ;

386 
p_d©aBufE¡ry
->
hashNextE¡ry
 = 
REQ_SLOT_TAG_NONE
;

388 
d©aBufM≠På
->
d©aBuf
[
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
].
hashNextE¡ry
 = 
bufE¡ryIdx
;

390 #if(
PRINT_DEBUG
 == 1)

392 
	`xû_¥ötf
("[A] hE: %d,Åbi: %d, bi: %d\n", 
hashE¡ry
, 
•_d©aBufHashTabÀ
->
d©aBufHash
[hashE¡ry].
èûE¡ry
, 
bufE¡ryIdx
);

395 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
 = 
bufE¡ryIdx
;

399 
p_d©aBufE¡ry
->
hashPªvE¡ry
 = 
DATA_BUF_IDX_INVALID
;

400 
p_d©aBufE¡ry
->
hashNextE¡ry
 = 
DATA_BUF_IDX_INVALID
;

403 #if(
PRINT_DEBUG
 == 1)

404 
	`xû_¥ötf
("[A] hE: %d, bi: %d \r\n", 
hashE¡ry
, 
bufE¡ryIdx
);

407 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
hódE¡ry
 = 
bufE¡ryIdx
;

408 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
 = 
bufE¡ryIdx
;

410 
	}
}

413 
	$Buf„rM™agemít_Sñe˘iveGëFromHashLi°
(
bufE¡ryIdx
, 
is_Ælocbuf
)

415 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
bufE¡ryIdx
);

417 i‡(
LSA_NONE
 !
p_d©aBufE¡ry
->
logiˇlSli˚Addr
)

419 
¥evBufE¡ry
, 
√xtBufE¡ry
, 
hashE¡ry
;

421 
¥evBufE¡ry
 = 
p_d©aBufE¡ry
->
hashPªvE¡ry
;

422 
√xtBufE¡ry
 = 
p_d©aBufE¡ry
->
hashNextE¡ry
;

423 
hashE¡ry
 = 
	`FödD©aBufHashTabÀE¡ry
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

425 if((
√xtBufE¡ry
 !
DATA_BUF_IDX_INVALID
Ë&& (
¥evBufE¡ry
 != DATA_BUF_IDX_INVALID))

427 
d©aBufM≠På
->
d©aBuf
[
¥evBufE¡ry
].
hashNextE¡ry
 = 
√xtBufE¡ry
;

428 
d©aBufM≠På
->
d©aBuf
[
√xtBufE¡ry
].
hashPªvE¡ry
 = 
¥evBufE¡ry
;

429 #if(
PRINT_DEBUG
 == 1)

431 
	`xû_¥ötf
("[G] hE: %d, bi: %d, hPE: %d, hNE: %d %d\n", 
hashE¡ry
, 
bufE¡ryIdx
, 
¥evBufE¡ry
, 
√xtBufE¡ry
, 
is_Ælocbuf
);

434 if((
√xtBufE¡ry
 =
DATA_BUF_IDX_INVALID
Ë&& (
¥evBufE¡ry
 != DATA_BUF_IDX_INVALID))

436 
d©aBufM≠På
->
d©aBuf
[
¥evBufE¡ry
].
hashNextE¡ry
 = 
DATA_BUF_IDX_INVALID
;

437 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
 = 
¥evBufE¡ry
;

438 #if(
PRINT_DEBUG
 == 1)

440 
	`xû_¥ötf
("[G] hE: %d, bi: %d, hPE: %d, hNE:-1 %d \n", 
hashE¡ry
, 
bufE¡ryIdx
, 
¥evBufE¡ry
, 
is_Ælocbuf
);

443 if((
√xtBufE¡ry
 !
DATA_BUF_IDX_INVALID
Ë&& (
¥evBufE¡ry
 == DATA_BUF_IDX_INVALID))

445 
d©aBufM≠På
->
d©aBuf
[
√xtBufE¡ry
].
hashPªvE¡ry
 = 
DATA_BUF_IDX_INVALID
;

446 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
hódE¡ry
 = 
√xtBufE¡ry
;

447 #if(
PRINT_DEBUG
 == 1)

449 
	`xû_¥ötf
("[G] hE: %d, bi: %d, hPE: -1, hNE: %d %d \n", 
hashE¡ry
, 
bufE¡ryIdx
, 
√xtBufE¡ry
, 
is_Ælocbuf
);

454 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
hódE¡ry
 = 
DATA_BUF_IDX_INVALID
;

455 
•_d©aBufHashTabÀ
->
d©aBufHash
[
hashE¡ry
].
èûE¡ry
 = 
DATA_BUF_IDX_INVALID
;

456 #if(
PRINT_DEBUG
 == 1)

457 
	`xû_¥ötf
("[G] hE: %d, bi: %d, hPE: -1, hNE: -1 %d \n", 
hashE¡ry
, 
bufE¡ryIdx
, 
is_Ælocbuf
);

461 
	}
}

	@data_buffer.h

47 #i‚de‡
DATA_BUFFER_H_


48 
	#DATA_BUFFER_H_


	)

50 
	~"·l/·l_c⁄fig.h
"

52 
	#AVAILABLE_DATA_BUFFER_ENTRY_COUNT
 (16 * 
USER_DIES
)

	)

53 
	#AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
 (
USER_DIES
)

	)

55 
	#DATA_BUF_IDX_INVALID
 0xffff

	)

56 
	#DATA_BUF_FAIL
 0xffff

	)

57 
	#DATA_BUF_DIRTY
 1

	)

58 
	#DATA_BUF_CLEAN
 0

	)

60 
	#FödD©aBufHashTabÀE¡ry
(
logiˇlSli˚Addr
Ë(÷ogiˇlSli˚AddrË% 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
)

	)

64 
	s_DATA_BUF_ENTRY
 {

65 
	mlogiˇlSli˚Addr
;

66 
	m¥evE¡ry
 : 16;

67 
	m√xtE¡ry
 : 16;

68 
	mblockögReqTaû
 : 16;

69 
	mhashPªvE¡ry
 : 16;

70 
	mhashNextE¡ry
 : 16;

71 
	mdúty
 : 1;

72 
	mª£rved0
 : 15;

74 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

75 
	m°ªam_id_1
;

76 
	mïoch_id_1
;

77 
	m°ªam_id_2
;

78 
	mïoch_id_2
;

79 
	mm≠∑bÀ_1
;

80 
	mm≠∑bÀ_2
;

82 } 
	tDATA_BUF_ENTRY
, *
	tP_DATA_BUF_ENTRY
;

84 
	s_DATA_BUF_MAP
{

85 
DATA_BUF_ENTRY
 
	md©aBuf
[
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
];

86 } 
	tDATA_BUF_MAP
, *
	tP_DATA_BUF_MAP
;

88 
	s_DATA_BUF_LRU_LIST
 {

89 
	mhódE¡ry
 : 16;

90 
	mèûE¡ry
 : 16;

91 } 
	tDATA_BUF_LRU_LIST
, *
	tP_DATA_BUF_LRU_LIST
;

93 
	s_DATA_BUF_HASH_ENTRY
{

94 
	mhódE¡ry
 : 16;

95 
	mèûE¡ry
 : 16;

96 } 
	tDATA_BUF_HASH_ENTRY
, *
	tP_DATA_BUF_HASH_ENTRY
;

99 
	s_DATA_BUF_HASH_TABLE
{

100 
DATA_BUF_HASH_ENTRY
 
	md©aBufHash
[
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
];

101 } 
	tDATA_BUF_HASH_TABLE
, *
	tP_DATA_BUF_HASH_TABLE
;

104 
	s_TEMPORARY_DATA_BUF_ENTRY
 {

105 
	mblockögReqTaû
 : 16;

106 
	mª£rved0
 : 16;

107 } 
	tTEMPORARY_DATA_BUF_ENTRY
, *
	tP_TEMPORARY_DATA_BUF_ENTRY
;

109 
	s_TEMPORARY_DATA_BUF_MAP
{

110 
TEMPORARY_DATA_BUF_ENTRY
 
	mãmpD©aBuf
[
AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
];

111 } 
	tTEMPORARY_DATA_BUF_MAP
, *
	tP_TEMPORARY_DATA_BUF_MAP
;

115 
	mlß
;

116 
	mlba_bôm≠
;

117 } 
	tbuf_íåy_t
;

120 
	mbôm≠
[
AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
/32];

121 
	m‰ì_cou¡
;

122 } 
	tbm_c⁄ãxt_t
;

125 
Buf„rM™agemít_Inô
();

126 
Buf„rM™agemít_CheckBufHô
(
ªqSlŸTag
);

127 
DATA_BUF_ENTRY
* 
Buf„rM™agemít_GëD©aBufE¡ry
(
d©aBufIdx
);

128 
Buf„rM™agemít_GëD©aBufAddr
(
ªqSlŸTag
);

129 
Buf„rM™agemít_GëS∑ªD©aBufAddr
(
ªqSlŸTag
);

130 
Buf„rM™agemít_AŒocBuf
();

131 
Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
bufE¡ry
, 
ªqSlŸTag
);

132 
Buf„rM™agemít_AŒoˇãTempBuf
(
dõNo
);

133 
Buf„rM™agemít_Upd©eTempBufE¡ryInfoBlockögReq
(
bufE¡ry
, 
ªqSlŸTag
);

134 
Buf„rM™agemít_AddBufToHashLi°
(
bufE¡ry
);

135 
Buf„rM™agemít_Sñe˘iveGëFromHashLi°
(
bufE¡ryIdx
, 
is_Ælocbuf
);

137 
P_DATA_BUF_MAP
 
d©aBufM≠På
;

138 
DATA_BUF_LRU_LIST
 
d©aBufLruLi°
;

139 
P_TEMPORARY_DATA_BUF_MAP
 
ãmpD©aBufM≠På
;

	@debug.h

47 #i‚de‡
__DEBUG_H_


48 
	#__DEBUG_H_


	)

50 
	~"as£π.h
"

52 
	#__ASSERT
 1

	)

54 
	#BRANCH_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

55 
	#BRANCH_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

57 #i‡
__ASSERT


58 
	#ASSERT
(
X
Ë\

	)

59 i‡(!(
	gX
)) \

61 
xû_¥ötf
("\r\n\√º‹ i¿%s: Löê%d\r\n", 
__FILE__
, 
__LINE__
); \

65 
	#ASSERT
(
X
)

	)

	@flash/flash_control.c

7 
	~"nsc_drivî.h
"

8 
	~<as£π.h
>

9 
	~"xû_¥ötf.h
"

10 
	~"../mem‹y_m≠.h
"

11 
	~"../Êash/t4nsc_ucode.h
"

13 
T4REGS
 
	gchCéReg
[
USER_CHANNELS
];

15 
	gNSCS
[] = {

16 
NSC_0_BASEADDR
,

17 
NSC_1_BASEADDR
,

18 
NSC_2_BASEADDR
,

19 
NSC_3_BASEADDR
,

20 
NSC_4_BASEADDR
,

21 
NSC_5_BASEADDR
,

22 
NSC_6_BASEADDR
,

23 
NSC_7_BASEADDR
,

26 
	gNSC_UCODES
[] = {

27 
NSC_0_UCODEADDR
,

28 
NSC_1_UCODEADDR
,

29 
NSC_2_UCODEADDR
,

30 
NSC_3_UCODEADDR
,

31 
NSC_4_UCODEADDR
,

32 
NSC_5_UCODEADDR
,

33 
NSC_6_UCODEADDR
,

34 
NSC_7_UCODEADDR


38 
	$_nfc_ö°Æl_ucode
(* 
bøm0
)

40 
i
;

41 
i
 = 0; i < 
T4NSCu_Comm⁄_CodeW‹dLígth
; i++)

43 
bøm0
[
i
] = 
T4NSCuCode_Comm⁄
[i];

45 
i
 = 0; i < 
T4NSCu_PœöOps_CodeW‹dLígth
; i++)

47 
bøm0
[
T4NSCu_Comm⁄_CodeW‹dLígth
 + 
i
] = 
T4NSCuCode_PœöOps
[i];

49 
	}
}

51 
	$_öô_ch™√l_c⁄åﬁ_ªgi°î
()

53 if(
USER_CHANNELS
 < 1)

55 
	`as£π
(!"[WARNING] Configuration Error: Channel [WARNING]");

58 
chNo
 = 0; chNÿ< 
USER_CHANNELS
; chNo++)

60 
	`_nfc_ö°Æl_ucode
(
NSC_UCODES
[
chNo
]);

61 
	`V2FInôülizeH™dÀ
(&
chCéReg
[
chNo
], 
NSCS
[chNo]);

63 
	}
}

65 
	$_£t_ªq_íåy_f‹_«nd_ª£t
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

67 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

69 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

70 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_RESET
;

71 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

72 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

73 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

74 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

75 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
chNo
;

76 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
wayNo
;

77 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 0;

78 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 0;

79 
p_ªque°E¡ry
->
¥evBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

80 
	}
}

82 
	$_£t_ªq_íåy_f‹_£t_„©uª
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

84 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

86 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

87 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_SET_FEATURE
;

88 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

89 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

90 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

91 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

92 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
chNo
;

93 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
wayNo
;

94 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 0;

95 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 0;

96 
p_ªque°E¡ry
->
¥evBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

97 
	}
}

99 
	$Êash_öô_«nd
()

101 
ªqSlŸTag
;

103 
chNo
 = 0; chNÿ< 
USER_CHANNELS
; ++chNo)

105 
wayNo
 = 0; wayNÿ< 
USER_WAYS
; ++wayNo)

107 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

109 
	`_£t_ªq_íåy_f‹_«nd_ª£t
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

111 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

113 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

115 
	`_£t_ªq_íåy_f‹_£t_„©uª
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

117 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

121 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

123 
	`xû_¥ötf
("[ NAND deviceÑeset complete. ]\r\n");

124 
	}
}

126 
	$Êash_öô
()

128 
	`_öô_ch™√l_c⁄åﬁ_ªgi°î
();

129 
	`Êash_öô_«nd
();

130 
	}
}

132 
	$Êash_èsk_run
()

134 i‡((0 !
nŸCom∂ëedN™dReqC¡
)

135 || (0 !
blockedReqC¡
))

137 
	`Reque°ScheduÀr_SchedulögN™dReq
();

139 
	}
}

	@flash/flash_control.h

8 #i‚de‡
_FLASH_CONTROL_H_


9 
	#_FLASH_CONTROL_H_


	)

11 
Êash_öô_ch™√l_c⁄åﬁ_ªgi°î
();

12 
Êash_öô_«nd
();

14 
Êash_öô
();

16 
Êash_èsk_run
();

	@flash/nsc_driver.c

50 
	~"nsc_drivî.h
"

51 
	~<as£π.h
>

53 
	$V2FInôülizeH™dÀ
(
T4REGS
* 
t4ªgs
, * 
t4nscRegi°îBa£Addªss
)

55 
t4ªgs
->
t4ªgID
 = (
T4REG_ID
*)(()
t4nscRegi°îBa£Addªss
 + 0);

56 
t4ªgs
->
t4ªgCFG
 = (
T4REG_CFG
*)(()
t4nscRegi°îBa£Addªss
 + 0x1000);

57 
t4ªgs
->
t4ªgEXT
 = (
T4REG_EXT
*)(()
t4nscRegi°îBa£Addªss
 + 0x2000);

58 
t4ªgs
->
t4ªgCC
 = (
T4REG_CC
*)(()
t4nscRegi°îBa£Addªss
 + 0x3000);

59 
t4ªgs
->
t4ªgBP
 = (
T4REG_BP
*)(()
t4nscRegi°îBa£Addªss
 + 0x3800);

60 
t4ªgs
->
t4ªgSP
 = (
T4REG_SP
*)(()
t4nscRegi°îBa£Addªss
 + 0x4000);

61 
	}
}

63 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FSëS¸ambÀrSèã
(
T4REGS
* 
t4ªgs
, 
íabÀ
)

65 
T4REG_CMD_SET_SCRAMBLER
 
£tS¸ambÀrCmd
;

67 
£tS¸ambÀrCmd
.
cmdSñe˘
 = (
íabÀ
)?
T4NSC_CMD_SET_SCRAMBLER_ENABLE
:
T4NSC_CMD_SET_SCRAMBLER_DISABLE
;

69 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_SET_SCRAMBLER
, 
£tS¸ambÀrCmd
);

70 
	`V2FIssueComm™d
(
t4ªgs
);

71 
	}
}

73 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FRe£tSync
(
T4REGS
* 
t4ªgs
, 
way
)

75 
T4REG_CMD_NAND_RESET
 
ª£tCmd
;

77 
ª£tCmd
.
cmdSñe˘
 = 
T4NSC_CMD_NAND_RESET
;

78 
ª£tCmd
.
waySñe˘
 = 1 << 
way
;

80 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

81 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_NAND_RESET
, 
ª£tCmd
);

82 
	`V2FIssueComm™d
(
t4ªgs
);

84 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

85 
	`V2FSëS¸ambÀrSèã
(
t4ªgs
, 0);

86 
	}
}

88 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FSëFótuªsT
(
T4REGS
* 
t4ªgs
, 
way
, 
addªss
, vﬁ©ûê* 
∑ylﬂd
)

90 
T4REG_CMD_SET_FEATURES
 
£tFótuªsCmd
;

92 
£tFótuªsCmd
.
cmdSñe˘
 = 
T4NSC_CMD_SET_FEATUREST
;

93 
£tFótuªsCmd
.
waySñe˘
 = 1 << 
way
;

94 
£tFótuªsCmd
.
∑ylﬂdAddªss
 = ()
∑ylﬂd
;

95 
£tFótuªsCmd
.
£tFótuªsAddªss
 = 
addªss
;

97 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_SET_FEATURES
, 
£tFótuªsCmd
);

98 
	`V2FIssueComm™d
(
t4ªgs
);

99 
	}
}

101 
	$V2FGëRódyBusy
(
T4REGS
* 
t4ªgs
, * 
ªp‹t
)

103 
T4REG_CMD_GET_READYBUSY
 
gëRódyBusyCmd
;

105 
gëRódyBusyCmd
.
cmdSñe˘
 = 
T4NSC_CMD_GET_READYBUSY
;

106 
gëRódyBusyCmd
.
ª£rved
 = 0;

107 
gëRódyBusyCmd
.
ªp‹tAddªss
 = ()
ªp‹t
;

109 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_GET_READYBUSY
, 
gëRódyBusyCmd
);

110 
	`V2FIssueComm™d
(
t4ªgs
);

111 
	}
}

113 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FSëFótuªsSync
(
T4REGS
* 
t4ªgs
, 
way
, 
„©uª0x02
, 
„©uª0x10
, 
„©uª0x01
, 
∑yLﬂdAddr
)

115 vﬁ©ûê* 
∑ylﬂd
 = (*)
∑yLﬂdAddr
;

116 vﬁ©ûê* 
°©us
 = (*)(
∑yLﬂdAddr
 + 4);

118 *
∑ylﬂd
 = 
„©uª0x02
;

119 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

120 
	`V2FSëFótuªsT
(
t4ªgs
, 
way
, 0x02, 
∑ylﬂd
);

123 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

124 
	`V2FGëRódyBusy
(
t4ªgs
, 
°©us
);

125 !(*
°©us
 & 1));

126 *
°©us
 >>= 16;

128 !(*
°©us
 & (1 << 
way
)));

130 *
∑ylﬂd
 = 
„©uª0x10
;

131 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

132 
	`V2FSëFótuªsT
(
t4ªgs
, 
way
, 0x10, 
∑ylﬂd
);

135 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

136 
	`V2FGëRódyBusy
(
t4ªgs
, 
°©us
);

137 !(*
°©us
 & 1));

138 *
°©us
 >>= 16;

140 !(*
°©us
 & (1 << 
way
)));

153 
	}
}

155 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FRódPageTriggîAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
)

157 
T4REG_CMD_READ_PAGE_TRIGGER
 
ªadPageTrigggîCmd
;

159 
ªadPageTrigggîCmd
.
cmdSñe˘
 = 
T4NSC_CMD_READ_PAGE_TRIGGER_PSLC
;

160 
ªadPageTrigggîCmd
.
waySñe˘
 = 1 << 
way
;

161 
ªadPageTrigggîCmd
.
rowAddªss
 =ÑowAddress;

163 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

164 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_READ_PAGE_TRIGGER
, 
ªadPageTrigggîCmd
);

165 
	`V2FIssueComm™d
(
t4ªgs
);

166 
	}
}

168 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FRódPageTøns„rAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
∑geD©aBuf„r
, * 
•¨eD©aBuf„r
, * 
îr‹Inf‹m©i⁄
, * 
com∂ëi⁄
, 
rowAddªss
)

170 
T4REG_CMD_READ_PAGE_TRANSFER_PSLC
 
ªad∑gïSLC
;

172 
ªad∑gïSLC
.
cmdSñe˘
 = 
T4NSC_CMD_READ_TRANSFER_PSLC
;

173 
ªad∑gïSLC
.
waySñe˘
 = 1 << 
way
;

174 
ªad∑gïSLC
.
rowAddªss
 =ÑowAddress;

175 
ªad∑gïSLC
.
∑geD©aAddªss
 = 
∑geD©aBuf„r
;

176 
ªad∑gïSLC
.
•¨eD©aAddªss
 = 
•¨eD©aBuf„r
;

177 
ªad∑gïSLC
.
îr‹InfoAddªss
 = 
îr‹Inf‹m©i⁄
;

178 *
com∂ëi⁄
 = 0;

179 
ªad∑gïSLC
.
com∂ëi⁄Rï‹tAddªss
 = 
com∂ëi⁄
;

181 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

182 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_READ_PAGE_TRANSFER_PSLC
, 
ªad∑gïSLC
);

183 
	`V2FIssueComm™d
(
t4ªgs
);

184 
	}
}

186 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FRódPageTøns„rRawAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
∑geD©aBuf„r
, * 
com∂ëi⁄
)

188 
T4REG_CMD_READ_PAGE_TRANSFER_RAW
 
ªadPageTøns„rRaw
;

190 
ªadPageTøns„rRaw
.
cmdSñe˘
 = 
T4NSC_CMD_READ_TRANSFER_RAW
;

191 
ªadPageTøns„rRaw
.
waySñe˘
 = 1 << 
way
;

192 
ªadPageTøns„rRaw
.
cﬁAddªss
 = 0;

193 
ªadPageTøns„rRaw
.
w‹dLígth
 = (16384 + 1664) / 4;

194 
ªadPageTøns„rRaw
.
∑geD©aAddªss
 = 
∑geD©aBuf„r
;

195 
ªadPageTøns„rRaw
.
com∂ëi⁄Rï‹tAddªss
 = ()
com∂ëi⁄
;

196 *
com∂ëi⁄
 = 0;

198 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

199 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_READ_PAGE_TRANSFER_RAW
, 
ªadPageTøns„rRaw
);

200 
	`V2FIssueComm™d
(
t4ªgs
);

201 
	}
}

204 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FProgømPageAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
, * 
∑geD©aBuf„r
, * 
•¨eD©aBuf„r
)

206 
T4REG_CMD_PROGRAM_PAGE_TRANSFER_PSLC
 
¥ogPagïSLC
;

208 
¥ogPagïSLC
.
cmdSñe˘
 = 
T4NSC_CMD_PROGRAM_PAGE_PSLC
;

209 
¥ogPagïSLC
.
waySñe˘
 = 1 << 
way
;

210 
¥ogPagïSLC
.
rowAddªss
 =ÑowAddress;

211 
¥ogPagïSLC
.
∑geD©aAddªss
 = 
∑geD©aBuf„r
;

212 
¥ogPagïSLC
.
•¨eD©aAddªss
 = 
•¨eD©aBuf„r
;

214 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

215 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_PROGRAM_PAGE_TRANSFER_PSLC
, 
¥ogPagïSLC
);

216 
	`V2FIssueComm™d
(
t4ªgs
);

217 
	}
}

219 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FEø£BlockAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
)

221 
T4REG_CMD_ERASE_BLOCK
 
îa£BlockCmd
;

223 
	`as£π
((
rowAddªss
 & 0xFF) == 0);

225 
îa£BlockCmd
.
cmdSñe˘
 = 
T4NSC_CMD_ERASE_BLOCK
;

226 
îa£BlockCmd
.
waySñe˘
 = 1 << 
way
;

227 
îa£BlockCmd
.
rowAddªss
 =ÑowAddress;

229 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

230 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_ERASE_BLOCK
, 
îa£BlockCmd
);

231 
	`V2FIssueComm™d
(
t4ªgs
);

232 
	}
}

234 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FSètusCheckAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
°©usRï‹t
)

236 
T4REG_CMD_READ_STATUS
 
ªadSètusCmd
;

238 
ªadSètusCmd
.
cmdSñe˘
 = 
T4NSC_CMD_READ_STATUS
;

239 
ªadSètusCmd
.
waySñe˘
 = 1 << 
way
;

240 
ªadSètusCmd
.
ªp‹tAddªss
 = ()
°©usRï‹t
;

241 *
°©usRï‹t
 = 0;

243 
	`V2FIsC⁄åﬁÀrBusy
(
t4ªgs
));

244 
	`V2FFûlRegi°îs
(
t4ªgs
, 
T4REG_CMD_READ_STATUS
, 
ªadSètusCmd
);

245 
	`V2FIssueComm™d
(
t4ªgs
);

246 
	}
}

248 
__©åibuã__
((
›timize
("O0"))Ë
	$V2FRódyBusyAsync
(
T4REGS
* 
t4ªgs
)

250 vﬁ©ûê
ªadyBusy
 = (
t4ªgs
)->
t4ªgBP
->
«ndRódyBusy
;

252  
ªadyBusy
;

253 
	}
}

	@flash/nsc_driver.h

57 #i‚de‡
FMC_DRIVER_H_


58 
	#FMC_DRIVER_H_


	)

60 
	~"t4nsc_pm.h
"

62 
	#T4NSC_CMD_NAND_RESET
 (4)

	)

63 
	#T4NSC_CMD_MODE_CHANGE
 (32)

	)

64 
	#T4NSC_CMD_GET_READYBUSY
 (108)

	)

65 
	#T4NSC_CMD_SET_FEATURESA
 (124)

	)

66 
	#T4NSC_CMD_SET_LUN_FEATUREST
 (132)

	)

67 
	#T4NSC_CMD_SET_FEATUREST
 (144)

	)

68 
	#T4NSC_CMD_GET_LUN_FEATUREST
 (192)

	)

69 
	#T4NSC_CMD_GET_FEATUREST
 (204)

	)

70 
	#T4NSC_CMD_SET_SCRAMBLER_DISABLE
 (264)

	)

71 
	#T4NSC_CMD_SET_SCRAMBLER_ENABLE
 (284)

	)

72 
	#T4NSC_CMD_READ_STATUS
 (304)

	)

73 
	#T4NSC_CMD_ERASE_BLOCK
 (352)

	)

74 
	#T4NSC_CMD_READ_PAGE_TRIGGER
 (384)

	)

75 
	#T4NSC_CMD_SINGLE_STATE_READ_PAGE_TRIGGER
 (392)

	)

76 
	#T4NSC_CMD_READ_PAGE_TRIGGER_WRLPRE_LSB
 (404)

	)

77 
	#T4NSC_CMD_READ_PAGE_TRIGGER_WRLPRE_CSB
 (412)

	)

78 
	#T4NSC_CMD_READ_PAGE_TRIGGER_WRLPRE_MSB
 (420)

	)

79 
	#T4NSC_CMD_READ_PAGE_TRIGGER_LSB
 (428)

	)

80 
	#T4NSC_CMD_READ_PAGE_TRIGGER_CSB
 (436)

	)

81 
	#T4NSC_CMD_READ_PAGE_TRIGGER_MSB
 (444)

	)

82 
	#T4NSC_CMD_READ_PAGE_TRIGGER_PSLC
 (452)

	)

83 
	#T4NSC_CMD_READ_TRANSFER_RAW
 (500)

	)

84 
	#T4NSC_CMD_PROGRAM_PAGE_RAW
 (568)

	)

85 
	#T4NSC_CMD_PROGRAM_PAGE_RAW_xSB
 (576)

	)

86 
	#T4NSC_CMD_PROGRAM_PAGE_RAW_PSLC
 (580)

	)

87 
	#T4NSC_CMD_READ_ID
 (756)

	)

88 
	#T4NSC_CMD_END_OF_COMMON
 (824)

	)

90 
	#T4NSC_CMD_READ_TRANSFER_PSLC
 (
T4NSC_CMD_END_OF_COMMON
+0)

	)

91 
	#T4NSC_CMD_PROGRAM_PAGE_PSLC
 (
T4NSC_CMD_END_OF_COMMON
+112)

	)

92 
	#T4NSC_CMD_READ_TRANSFER
 (
T4NSC_CMD_END_OF_COMMON
+204)

	)

93 
	#T4NSC_CMD_PROGRAM_PAGES
 (
T4NSC_CMD_END_OF_COMMON
+616)

	)

94 
	#T4NSC_CMD_FSP_PAGES
 (
T4NSC_CMD_END_OF_COMMON
+960)

	)

95 
	#T4NSC_CMD_END_OF_PLAINOPS
 (
T4NSC_CMD_END_OF_COMMON
+1308)

	)

97 
	#V2FFûlRegi°îs
(
t4ªgs
, 
cmdty≥
, 
cmd∑ylﬂd
Ë(*((vﬁ©ûêcmdty≥*)(—4ªgs)->
t4ªgSP
)Ë(cmd∑ylﬂd))

	)

98 
	#V2FIssueComm™d
(
t4ªgs
Ë((—4ªgs)->
t4ªgCC
)->
issueCmd
 = 1)

	)

100 
	#V2FIsC⁄åﬁÀrBusy
(
t4ªgs
Ë(—4ªgs)->
t4ªgID
->
queueNŸFuŒ
 =0)

	)

101 
	#V2FGëFªeQueueCou¡
(
t4ªgs
Ë(32 - (—4ªgs)->
t4ªgID
->
queueCou¡
))

	)

102 
	#V2FGëNANDRódyBusy
(
t4ªgs
, 
way
Ë!!(—4ªgs)->
t4ªgBP
->
«ndRódyBusy
 & (1 << (way)))

	)

104 
	#V2FCrcVÆid
(
îr‹Inf‹m©i⁄
Ë!!(*((
uöt32_t
*)”º‹Inf‹m©i⁄)Ë& 0x10000000)

	)

105 
	#V2FW‹°ChunkEº‹Cou¡
(
îr‹Inf‹m©i⁄
Ë((*((
uöt32_t
*)”º‹Inf‹m©i⁄)Ë& 0x00FF0000Ë>> 16)

	)

106 
	#V2FPageDecodeSuc˚ss
(
£cEº‹Inf‹m©i⁄
Ë((*((
uöt32_t
*)(£cEº‹Inf‹m©i⁄)Ë& 0xFFFFFFFFË=0xFFFFFFFF)

	)

108 
	#V2FE¡îToggÀMode
(
dev
, 
way
, 
∑yLﬂdAddr
Ë
	`V2FSëFótuªsSync
(dev, way, 0x07, 0x06, 0,ÖayLﬂdAddr)

	)

110 
	#V2FWayRódy
(
ªadyBusy
, 
wayNo
Ë((‘ódyBusyË>> (wayNo)Ë& 1)

	)

111 
	#V2FTøns„rCom∂ëe
(
com∂ëeFœg
Ë((com∂ëeFœgË& 1)

	)

112 
	#V2FReque°Rï‹tD⁄e
(
°©usRï‹t
Ë((°©usRï‹tË& 1)

	)

113 
	#V2FElimö©eRï‹tD⁄eFœg
(
°©usRï‹t
Ë((°©usRï‹tË>> 1)

	)

114 
	#V2FReque°Com∂ëe
(
°©usRï‹t
Ë(((°©usRï‹tË& 0x60Ë=0x60)

	)

115 
	#V2FReque°Faû
(
°©usRï‹t
Ë((°©usRï‹tË& 3)

	)

119 
	mcmdSñe˘
;

120 
	mrowAddªss
;

121 
	mu£rD©a
;

122 
	md©aAddªss
;

123 
	m•¨eAddªss
;

124 
	mîr‹Cou¡Addªss
;

125 
	mcom∂ëi⁄Addªss
;

126 
	mwaySñe˘i⁄
;

127 
	mch™√lBusy
;

128 
	mªadyBusy
;

129 } 
	tV2FMCRegi°îs
;

133 
	mqueueNŸFuŒ
:1;

134 
	mvîsi⁄
:31;

135 
	mqueueCou¡
;

136 } 
	tT4REG_ID
;

140 
	mª£rved
;

141 } 
	tT4REG_CFG
;

145 
T4EXT_PM
 
	m≥rfM⁄ô‹
;

146 } 
	tT4REG_EXT
;

150 
	missueCmd
;

151 } 
	tT4REG_CC
;

155 
	m«ndRódyBusy
;

156 } 
	tT4REG_BP
;

160 
	mcmdSñe˘
;

161 
	mwaySñe˘
;

162 
	m§
[30];

163 } 
	tT4REG_SP
;

168 vﬁ©ûê
T4REG_ID
* 
	mt4ªgID
;

170 vﬁ©ûê
T4REG_CFG
* 
	mt4ªgCFG
;

172 vﬁ©ûê
T4REG_EXT
* 
	mt4ªgEXT
;

174 vﬁ©ûê
T4REG_CC
* 
	mt4ªgCC
;

176 vﬁ©ûê
T4REG_BP
* 
	mt4ªgBP
;

178 vﬁ©ûê
T4REG_SP
* 
	mt4ªgSP
;

179 } 
	tT4REGS
;

183 
	mcmdSñe˘
;

184 
	mwaySñe˘
;

185 } 
	tT4REG_CMD_NAND_RESET
;

189 
	mcmdSñe˘
;

190 
	mwaySñe˘
;

191 
	m∑ylﬂdAddªss
;

192 } 
	tT4REG_CMD_MODE_CHANGE
;

196 
	mcmdSñe˘
;

197 
	mwaySñe˘
;

198 
	m∑ylﬂdAddªss
;

199 
	m£tFótuªsAddªss
;

200 } 
	tT4REG_CMD_SET_FEATURES
;

204 
	mcmdSñe˘
;

205 
	mwaySñe˘
;

206 
	m∑ylﬂdAddªss
;

207 
	m£tFótuªsAddªss
;

208 
	mlunSñe˘
;

209 } 
	tT4REG_CMD_SET_LUN_FEATURES
;

213 
	mcmdSñe˘
;

214 
	mwaySñe˘
;

215 
	mªp‹tAddªss
;

216 
	mgëFótuªsAddªss
;

217 
	mcom∂ëi⁄Addªss
;

218 } 
	tT4REG_CMD_GET_FEATURES
;

222 
	mcmdSñe˘
;

223 
	mª£rved
;

224 
	mªp‹tAddªss
;

225 } 
	tT4REG_CMD_GET_READYBUSY
;

229 
	mcmdSñe˘
;

230 
	mwaySñe˘
;

231 
	mªp‹tAddªss
;

232 
	mgëFótuªsAddªss
;

233 
	mcom∂ëi⁄Addªss
;

234 
	mlunSñe˘
;

235 } 
	tT4REG_CMD_GET_LUN_FEATURES
;

239 
	mcmdSñe˘
;

240 } 
	tT4REG_CMD_SET_SCRAMBLER
;

244 
	mcmdSñe˘
;

245 
	mwaySñe˘
;

246 
	mªp‹tAddªss
;

247 } 
	tT4REG_CMD_READ_STATUS
;

251 
	mcmdSñe˘
;

252 
	mwaySñe˘
;

253 
	mrowAddªss
;

254 } 
	tT4REG_CMD_ERASE_BLOCK
;

258 
	mcmdSñe˘
;

259 
	mwaySñe˘
;

260 
	mrowAddªss
;

261 } 
	tT4REG_CMD_READ_PAGE_TRIGGER
;

265 
	mcmdSñe˘
;

266 
	mwaySñe˘
;

267 
	mrowAddªss
;

268 
	m°©eSñe˘
;

269 } 
	tT4REG_CMD_SINGLE_STATE_READ_PAGE_TRIGGER
;

273 
	mcmdSñe˘
;

274 
	mwaySñe˘
;

275 
	mrowAddªss
;

276 
	m∑geD©aAddªss
;

277 
	m•¨eD©aAddªss
;

278 
	mîr‹InfoAddªss
;

279 
	mcom∂ëi⁄Rï‹tAddªss
;

280 } 
	tT4REG_CMD_READ_PAGE_TRANSFER_PSLC
;

284 
	mcmdSñe˘
;

285 
	mwaySñe˘
;

286 
	mrowAddªss
;

287 
	m∑geD©aAddªss
;

288 
	m•¨eD©aAddªss
;

289 } 
	tT4REG_CMD_PROGRAM_PAGE_TRANSFER_PSLC
;

293 
	mcmdSñe˘
;

294 
	mwaySñe˘
;

295 
	mrowAddªss
;

298 
	m∑geD©aAddªss
;

299 
	m•¨eD©aAddªss
;

300 
	mîr‹InfoAddªss
;

301 } 
	mSub∑ges
[4];

302 
	mcom∂ëi⁄Rï‹tAddªss
;

303 } 
	tT4REG_CMD_READ_PAGE_TRANSFER
;

307 
	mcmdSñe˘
;

308 
	mwaySñe˘
;

309 
	mrowAddªss
;

312 
	m∑geD©aAddªss
;

313 
	m•¨eD©aAddªss
;

314 } 
	mSub∑ges
[4];

315 } 
	tT4REG_CMD_PROGRAM_PAGE_TRANSFER
;

319 
	mcmdSñe˘
;

320 
	mwaySñe˘
;

321 
	mrowAddªss
;

322 
	m›ti⁄
;

325 
	m∑geD©aAddªss
;

326 
	m•¨eD©aAddªss
;

327 } 
	mSub∑ges
[4];

328 } 
	tT4REG_CMD_FSP_TRANSFER
;

330 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_LSB_PASSNEXT
 3

	)

331 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_LSB_COMMIT
 2

	)

332 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_CSB_PASSNEXT
 5

	)

333 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_CSB_COMMIT
 4

	)

334 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_MSB_COMMIT
 6

	)

338 
	mcmdSñe˘
;

339 
	mwaySñe˘
;

340 
	mcﬁAddªss
;

341 
	mw‹dLígth
;

342 
	m∑geD©aAddªss
;

343 
	mcom∂ëi⁄Rï‹tAddªss
;

344 } 
	tT4REG_CMD_READ_PAGE_TRANSFER_RAW
;

348 
	mcmdSñe˘
;

349 
	mwaySñe˘
;

350 
	mrowAddªss
;

351 
	mcﬁAddªss
;

352 
	mw‹dLígth
;

353 
	m∑geD©aAddªss
;

354 } 
	tT4REG_CMD_PROGRAM_PAGE_TRANSFER_RAW
;

358 
	mcmdSñe˘
;

359 
	mwaySñe˘
;

360 
	mrowAddªss
;

361 
	mcﬁAddªss
;

362 
	mw‹dLígth
;

363 
	m∑geD©aAddªss
;

364 
	m›ti⁄
;

365 } 
	tT4REG_CMD_PROGRAM_PAGE_TRANSFER_RAW_XSBOPTION
;

367 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_LSB_PASSNEXT
 3

	)

368 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_LSB_COMMIT
 2

	)

369 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_CSB_PASSNEXT
 5

	)

370 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_CSB_COMMIT
 4

	)

371 
	#T4NSC_CMD_FSP_TRANSFER_OPTION_MSB_COMMIT
 6

	)

375 
	mcmdSñe˘
;

376 
	mª£rved
;

377 
	m∑geBuf„rAddªss
;

378 
	m•¨eBuf„rAddªss
;

379 } 
	tT4REG_CMD_SET_BUFFER_BASEADDRESS
;

383 
	mcmdSñe˘
;

384 
	mwaySñe˘
;

385 
	mrowAddªss
;

388 
	m∑geBuf„rIndex
:16;

389 
	m•¨eBuf„rIndex
:16;

390 } 
	mSub∑ges
[4];

391 
	mcom∂ëi⁄Rï‹tAddªss
;

392 } 
	tT4REG_CMD_INDEXED_READ_PAGE_TRANSFER
;

396 
	mcmdSñe˘
;

397 
	mwaySñe˘
;

398 
	mrowAddªss
;

401 
	m∑geBuf„rIndex
:16;

402 
	m•¨eBuf„rIndex
:16;

403 } 
	mSub∑ges
[4];

404 } 
	tT4REG_CMD_INDEXED_PROGRAM_PAGE_TRANSFER
;

409 
	m¸cSuc˚ss
:1;

410 
	m•¨eSuc˚ss
:1;

411 
	m∑geSuc˚ss
:32;

412 
	mtŸÆEº‹Cou¡
:8;

413 
	mw‹°Eº‹Cou¡
:5;

414 
	mchunk0Eº‹Cou¡
:5;

415 
	mchunk1Eº‹Cou¡
:5;

416 
	mchunk2Eº‹Cou¡
:5;

417 
	mchunk3Eº‹Cou¡
:5;

418 
	mchunk4Eº‹Cou¡
:5;

419 
	mchunk5Eº‹Cou¡
:5;

420 
	mchunk6Eº‹Cou¡
:5;

421 
	mchunk7Eº‹Cou¡
:5;

422 } 
	tT4NSC_BCH_ERROR_INFO
;

424 
V2FInôülizeH™dÀ
(
T4REGS
* 
t4ªgs
, * 
t4nscRegi°îBa£Addªss
);

425 
V2FRe£tSync
(
T4REGS
* 
t4ªgs
, 
way
);

426 
V2FSëFótuªsSync
(
T4REGS
* 
t4ªgs
, 
way
, 
„©uª0x02
, 
„©uª0x10
, 
„©uª0x01
, 
∑yLﬂdAddr
);

427 
V2FRódPageTriggîAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
);

428 
V2FRódPageTøns„rAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
∑geD©aBuf„r
, * 
•¨eD©aBuf„r
, * 
îr‹Inf‹m©i⁄
, * 
com∂ëi⁄
, 
rowAddªss
);

429 
V2FRódPageTøns„rRawAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
∑geD©aBuf„r
, * 
com∂ëi⁄
);

430 
V2FProgømPageAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
, * 
∑geD©aBuf„r
, * 
•¨eD©aBuf„r
);

431 
V2FEø£BlockAsync
(
T4REGS
* 
t4ªgs
, 
way
, 
rowAddªss
);

432 
V2FSètusCheckAsync
(
T4REGS
* 
t4ªgs
, 
way
, * 
°©usRï‹t
);

433 
V2FRódyBusyAsync
(
T4REGS
* 
t4ªgs
);

	@flash/t4nsc_pm.h

1 #i‚de‡
T4NSC_PM_H_


2 
	#T4NSC_PM_H_


	)

6 
	m≥riod
;

7 
	mcou¡î
;

8 } 
	tT4EXT_PM_Sig«lCou¡î
;

12 
T4EXT_PM_Sig«lCou¡î
 
	mscLLNFCCmdIdÀTime
;

13 
T4EXT_PM_Sig«lCou¡î
 
	mscLLNFCWrôeD©aIdÀTime
;

14 
T4EXT_PM_Sig«lCou¡î
 
	mscLLNFCRódD©aIdÀTime
;

15 
T4EXT_PM_Sig«lCou¡î
 
	mscDPLWrôeCmdIdÀTime
;

16 
T4EXT_PM_Sig«lCou¡î
 
	mscDPLWrôeD©aIdÀTime
;

17 
T4EXT_PM_Sig«lCou¡î
 
	mscDPLRódCmdIdÀTime
;

18 
T4EXT_PM_Sig«lCou¡î
 
	mscDPLRódD©aIdÀTime
;

19 } 
	tT4EXT_PM
;

	@flash/t4nsc_ucode.h

1 #i‚de‡
T4NSC_UCODE_H_


2 
	#T4NSC_UCODE_H_


	)

4 
	gT4NSCuCode_Comm⁄
[] =

214 
	gT4NSCuCode_Indexed
[]=

561 
	gT4NSCuCode_PœöOps
[]=

892 c⁄° 
	gT4NSCu_Comm⁄_CodeW‹dLígth
 = (
T4NSCuCode_Comm⁄
) / ();

893 c⁄° 
	gT4NSCu_Indexed_CodeW‹dLígth
 = (
T4NSCuCode_Indexed
) / ();

894 c⁄° 
	gT4NSCu_PœöOps_CodeW‹dLígth
 = (
T4NSCuCode_PœöOps
) / ();

	@ftl/address_translation.c

48 
	~<as£π.h
>

49 
	~"../mem‹y_m≠.h
"

50 
	~"xû_¥ötf.h
"

52 
P_LOGICAL_SLICE_MAP
 
	glogiˇlSli˚M≠På
 = (P_LOGICAL_SLICE_MAP ) 
LOGICAL_SLICE_MAP_ADDR
;

53 
P_VIRTUAL_SLICE_MAP
 
	gvútuÆSli˚M≠På
 = (P_VIRTUAL_SLICE_MAPË
VIRTUAL_SLICE_MAP_ADDR
;

54 
P_VIRTUAL_BLOCK_MAP
 
	gvútuÆBlockM≠På
 = (P_VIRTUAL_BLOCK_MAPË
VIRTUAL_BLOCK_MAP_ADDR
;

55 
P_VIRTUAL_DIE_MAP
 
	gvútuÆDõM≠På
 = (P_VIRTUAL_DIE_MAPË
VIRTUAL_DIE_MAP_ADDR
;

56 
P_PHY_BLOCK_MAP
 
	gphyBlockM≠På
 = (P_PHY_BLOCK_MAPË
PHY_BLOCK_MAP_ADDR
;

57 
P_BAD_BLOCK_TABLE_INFO_MAP
 
	gbbtInfoM≠På
 = (P_BAD_BLOCK_TABLE_INFO_MAPË
BAD_BLOCK_TABLE_INFO_MAP_ADDR
;

59 
	g¶i˚AŒoˇti⁄T¨gëDõ
;

60 
	gmbPîbadBlockS∑˚
;

63 
	$_Eø£TŸÆBlockS∑˚
()

65 
ªqSlŸTag
;

67 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
NULL
;

69 
	`xû_¥ötf
("EraseÅotal block space...wait forá minute...\r\n");

71 
blockNo
 = 0 ; blockNÿ< 
TOTAL_BLOCKS_PER_DIE
; blockNo++)

73 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

75 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

76 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

78 
p_ªqE¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

79 
p_ªqE¡ry
->
ªqCode
 = 
REQ_CODE_ERASE
;

80 
p_ªqE¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

81 
p_ªqE¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

82 
p_ªqE¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

83 
p_ªqE¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

85 
p_ªqE¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

86 
p_ªqE¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

87 
p_ªqE¡ry
->
«ndInfo
.
physiˇlBlock
 = 
blockNo
;

88 
p_ªqE¡ry
->
«ndInfo
.
physiˇlPage
 = 0;

90 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

94 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

95 
	`xû_¥ötf
("Done.\r\n");

96 
	}
}

98 
	$_RódBadBlockTabÀ
(
ãmpBbtBufAddr
[], 
ãmpBbtBufE¡rySize
)

100 
ãmpPage
, 
ªqSlŸTag
;

101 
lo›
, 
d©aSize
;

103 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
NULL
;

105 
lo›
 = 0;

106 
d©aSize
 = 
DATA_SIZE_OF_BAD_BLOCK_TABLE_PER_DIE
;

107 
ãmpPage
 = 
	`PlsbPage2V∑geTøn¶©i⁄
(
START_PAGE_NO_OF_BAD_BLOCK_TABLE_BLOCK
);

109 
d©aSize
>0)

111 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

113 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

114 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

116 
p_ªqE¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

117 
p_ªqE¡ry
->
ªqCode
 = 
REQ_CODE_READ
;

118 
p_ªqE¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ADDR
;

119 
p_ªqE¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

120 
p_ªqE¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

121 
p_ªqE¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

122 
p_ªqE¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

123 
p_ªqE¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

125 
p_ªqE¡ry
->
d©aBufInfo
.
addr
 = 
ãmpBbtBufAddr
[
dõNo
] + 
lo›
 * 
ãmpBbtBufE¡rySize
;

127 
p_ªqE¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

128 
p_ªqE¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

129 
p_ªqE¡ry
->
«ndInfo
.
physiˇlBlock
 = 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
phyBlock
;

130 
p_ªqE¡ry
->
«ndInfo
.
physiˇlPage
 = 
	`V∑ge2PlsbPageTøn¶©i⁄
(
ãmpPage
);

132 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

135 
ãmpPage
++;

136 
lo›
++;

137 
d©aSize
 -
BYTES_PER_DATA_REGION_OF_PAGE
;

140 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

141 
	}
}

143 
	$_FödBadBlock
(
dõSèã
[], 
ãmpBbtBufAddr
[], 
ãmpBbtBufE¡rySize
, 
ãmpRódBufAddr
[], 
ãmpRódBufE¡rySize
)

145 
phyBlockNo
, 
dõNo
, 
ªqSlŸTag
;

146 
blockCheckî
[
USER_DIES
];

147 * 
m¨kPoöãr0
;

148 * 
m¨kPoöãr1
;

149 * 
bbtUpd©î
;

151 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
NULL
;

154 
phyBlockNo
 = 0;ÖhyBlockNÿ< 
TOTAL_BLOCKS_PER_DIE
;ÖhyBlockNo++)

156 
dõNo
=0; dõNÿ< 
USER_DIES
; dieNo++)

158 if(!
dõSèã
[
dõNo
])

160 
blockCheckî
[
dõNo
] = 
BLOCK_STATE_NORMAL
;

162 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

163 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

165 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

166 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_READ
;

167 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ADDR
;

168 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

169 
p_ªque°E¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_OFF
;

170 
p_ªque°E¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

171 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

172 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

174 
p_ªque°E¡ry
->
d©aBufInfo
.
addr
 = 
ãmpRódBufAddr
[
dõNo
];

176 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

177 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

178 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 
phyBlockNo
;

179 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 
BAD_BLOCK_MARK_PAGE0
;

181 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

185 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

187 
dõNo
=0; dõNÿ< 
USER_DIES
; dieNo++)

189 if(!
dõSèã
[
dõNo
])

191 
m¨kPoöãr0
 = (*)(
ãmpRódBufAddr
[
dõNo
] + 
BAD_BLOCK_MARK_BYTE0
);

192 
m¨kPoöãr1
 = (*)(
ãmpRódBufAddr
[
dõNo
] + 
BAD_BLOCK_MARK_BYTE1
);

194 if((*
m¨kPoöãr0
 =
CLEAN_DATA_IN_BYTE
Ë&& (*
m¨kPoöãr1
 == CLEAN_DATA_IN_BYTE))

196 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

197 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

199 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

200 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_READ
;

201 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ADDR
;

202 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

203 
p_ªque°E¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_OFF
;

204 
p_ªque°E¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

205 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

206 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

208 
p_ªque°E¡ry
->
d©aBufInfo
.
addr
 = 
ãmpRódBufAddr
[
dõNo
];

210 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

211 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

212 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 
phyBlockNo
;

213 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 
BAD_BLOCK_MARK_PAGE1
;

215 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

219 
	`xû_¥ötf
(" bad block i†dëe˘ed: Ch %d Way %dÖhyBlock %d \r\n",
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
phyBlockNo
);

221 
blockCheckî
[
dõNo
] = 
BLOCK_STATE_BAD
;

226 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

228 
dõNo
=0; dõNÿ< 
USER_DIES
; dieNo++)

230 if(!
dõSèã
[
dõNo
])

232 
m¨kPoöãr0
 = (*)(
ãmpRódBufAddr
[
dõNo
] + 
BAD_BLOCK_MARK_BYTE0
);

233 
m¨kPoöãr1
 = (*)(
ãmpRódBufAddr
[
dõNo
] + 
BAD_BLOCK_MARK_BYTE1
);

235 if(!((*
m¨kPoöãr0
 =
CLEAN_DATA_IN_BYTE
Ë&& (*
m¨kPoöãr1
 == CLEAN_DATA_IN_BYTE)))

237 if(
blockCheckî
[
dõNo
] =
BLOCK_STATE_NORMAL
)

239 
	`xû_¥ötf
(" bad block i†dëe˘ed: Ch %d Way %dÖhyBlock %d \r\n",
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
phyBlockNo
);

241 
blockCheckî
[
dõNo
] = 
BLOCK_STATE_BAD
;

246 
bbtUpd©î
(*)(
ãmpBbtBufAddr
[
dõNo
] + 
phyBlockNo
);

247 *
bbtUpd©î
 = 
blockCheckî
[
dõNo
];

248 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
bad
 = 
blockCheckî
[dieNo];

252 
	}
}

254 
	$_SaveBadBlockTabÀ
(
dõSèã
[], 
ãmpBbtBufAddr
[], 
ãmpBbtBufE¡rySize
)

256 
dõNo
, 
ªqSlŸTag
;

257 
lo›
, 
d©aSize
, 
ãmpPage
;

259 
lo›
 = 0;

260 
d©aSize
 = 
DATA_SIZE_OF_BAD_BLOCK_TABLE_PER_DIE
;

261 
ãmpPage
 = 
	`PlsbPage2V∑geTøn¶©i⁄
(
START_PAGE_NO_OF_BAD_BLOCK_TABLE_BLOCK
);

263 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
NULL
;

265 
d©aSize
>0)

267 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

269 if((
dõSèã
[
dõNo
] =
DIE_STATE_BAD_BLOCK_TABLE_NOT_EXIST
Ë|| (dõSèã[dõNo] =
DIE_STATE_BAD_BLOCK_TABLE_UPDATE
))

271 if(
lo›
 == 0)

273 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

274 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

276 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

277 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_ERASE
;

278 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

279 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

280 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

281 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

283 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

284 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

285 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
phyBlock
;

286 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 0;

288 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

291 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

292 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

294 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

295 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_WRITE
;

296 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ADDR
;

297 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_PHY_ORG
;

298 
p_ªque°E¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

299 
p_ªque°E¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

300 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

301 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_TOTAL
;

303 
p_ªque°E¡ry
->
d©aBufInfo
.
addr
 = 
ãmpBbtBufAddr
[
dõNo
] + 
lo›
 * 
ãmpBbtBufE¡rySize
;

305 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlCh
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

306 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlWay
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

307 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlBlock
 = 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
phyBlock
;

308 
p_ªque°E¡ry
->
«ndInfo
.
physiˇlPage
 = 
	`V∑ge2PlsbPageTøn¶©i⁄
(
ãmpPage
);

310 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

314 
lo›
++;

315 
d©aSize
++;

316 
d©aSize
 -
BYTES_PER_DATA_REGION_OF_PAGE
;

319 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

322 
dõNo
=0; dõNÿ< 
USER_DIES
; dieNo++)

324 if(
dõSèã
[
dõNo
] =
DIE_STATE_BAD_BLOCK_TABLE_NOT_EXIST
)

326 
	`xû_¥ötf
("[ bad blockÅabÀ o‡Ch %d Way %d i†ßved. ]\r\n", 
dõNo
%
USER_CHANNELS
, dieNo/USER_CHANNELS);

329 
	}
}

331 
	$_RecovîBadBlockTabÀ
(
ãmpBufAddr
)

333 
dõNo
, 
phyBlockNo
, 
bbtMakî
, 
ãmpBbtBufBa£Addr
, 
ãmpBbtBufE¡rySize
, 
ãmpRódBufBa£Addr
, 
ãmpRódBufE¡rySize
;

334 
ãmpBbtBufAddr
[
USER_DIES
];

335 
ãmpRódBufAddr
[
USER_DIES
];

336 
dõSèã
[
USER_DIES
];

337 * 
bbtTabÀCheckî
;

340 
ãmpBbtBufBa£Addr
 = 
ãmpBufAddr
;

341 
ãmpBbtBufE¡rySize
 = 
BYTES_PER_DATA_REGION_OF_PAGE
 + 
BYTES_PER_SPARE_REGION_OF_PAGE
;

342 
ãmpRódBufBa£Addr
 = 
ãmpBbtBufBa£Addr
 + 
USER_DIES
 * 
USED_PAGES_FOR_BAD_BLOCK_TABLE_PER_DIE
 * 
ãmpBbtBufE¡rySize
;

343 
ãmpRódBufE¡rySize
 = 
BYTES_PER_NAND_ROW
;

345 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

347 
ãmpBbtBufAddr
[
dõNo
] = 
ãmpBbtBufBa£Addr
 + dõNÿ* 
USED_PAGES_FOR_BAD_BLOCK_TABLE_PER_DIE
 * 
ãmpBbtBufE¡rySize
;

348 
ãmpRódBufAddr
[
dõNo
] = 
ãmpRódBufBa£Addr
 + dõNÿ* 
ãmpRódBufE¡rySize
;

352 
	`_RódBadBlockTabÀ
(
ãmpBbtBufAddr
, 
ãmpBbtBufE¡rySize
);

355 
bbtMakî
 = 
BAD_BLOCK_TABLE_MAKER_IDLE
;

356 
dõNo
=0; dõNo<
USER_DIES
; dieNo++)

358 
bbtTabÀCheckî
 = (*)(
ãmpBbtBufAddr
[
dõNo
]);

360 if((*
bbtTabÀCheckî
 =
BLOCK_STATE_NORMAL
)||(*bbtTabÀCheckî =
BLOCK_STATE_BAD
))

362 
	`xû_¥ötf
("[ bad blockÅabÀ o‡ch %d way %dÉxi°s.]\r\n",
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dieNo));

364 
dõSèã
[
dõNo
] = 
DIE_STATE_BAD_BLOCK_TABLE_EXIST
;

365 
phyBlockNo
=0;ÖhyBlockNo<
TOTAL_BLOCKS_PER_DIE
;ÖhyBlockNo++)

367 
bbtTabÀCheckî
 = (*)(
ãmpBbtBufAddr
[
dõNo
] + 
phyBlockNo
);

369 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
bad
 = *
bbtTabÀCheckî
;

370 if(
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
bad
 =
BLOCK_STATE_BAD
)

376 
	`xû_¥ötf
("[ bad block†o‡ch %d way %dáª checked. ]\r\n",
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dieNo));

380 
	`xû_¥ötf
("[ bad blockÅabÀ o‡ch %d way %d d€†nŸÉxi°.]\r\n",
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dieNo));

381 
dõSèã
[
dõNo
] = 
DIE_STATE_BAD_BLOCK_TABLE_NOT_EXIST
;

382 
bbtMakî
 = 
BAD_BLOCK_TABLE_MAKER_TRIGGER
;

387 if(
bbtMakî
 =
BAD_BLOCK_TABLE_MAKER_TRIGGER
)

389 
	`_FödBadBlock
(
dõSèã
, 
ãmpBbtBufAddr
, 
ãmpBbtBufE¡rySize
, 
ãmpRódBufAddr
, 
ãmpRódBufE¡rySize
);

390 
	`_SaveBadBlockTabÀ
(
dõSèã
, 
ãmpBbtBufAddr
, 
ãmpBbtBufE¡rySize
);

394 
dõNo
=0; dõNo<
USER_DIES
; dieNo++)

396 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
grownBadUpd©e
 = 
BBT_INFO_GROWN_BAD_UPDATE_NONE
;

398 
	}
}

400 
	$_Eø£U£rBlockS∑˚
()

402 
blockNo
, 
dõNo
, 
ªqSlŸTag
;

404 
	`xû_¥ötf
("Erase User block space...wait forá minute...\r\n");

406 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
NULL
;

408 
blockNo
=0 ; blockNo<
USER_BLOCKS_PER_DIE
 ; blockNo++)

410 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

412 if(!
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
bad
)

414 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

415 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

417 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

418 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_ERASE
;

419 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

420 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

421 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
;

422 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

424 
p_ªque°E¡ry
->
«ndInfo
.
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
blockNo
, 0);

426 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

431 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

432 
	`xû_¥ötf
("Done.\r\n");

433 
	}
}

435 
	$_Rem≠BadBlock
()

437 
blockNo
, 
dõNo
, 
ªm≠Fœg
, 
maxBadBlockCou¡
;

438 
ª£rvedBlockOfLun0
[
USER_DIES
];

439 
ª£rvedBlockOfLun1
[
USER_DIES
];

440 
badBlockCou¡
[
USER_DIES
];

442 
	`xû_¥ötf
("Bad blockÑemapping start...\r\n");

444 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

446 
ª£rvedBlockOfLun0
[
dõNo
] = 
USER_BLOCKS_PER_LUN
;

447 
ª£rvedBlockOfLun1
[
dõNo
] = 
TOTAL_BLOCKS_PER_LUN
 + 
USER_BLOCKS_PER_LUN
;

448 
badBlockCou¡
[
dõNo
] = 0;

452 
blockNo
=0 ; blockNo<
USER_BLOCKS_PER_LUN
 ; blockNo++)

454 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

457 if(
phyBlockM≠På
->
phyBlock
[
dõNo
][
blockNo
].
bad
)

459 if(
ª£rvedBlockOfLun0
[
dõNo
] < 
TOTAL_BLOCKS_PER_LUN
)

461 
ªm≠Fœg
 = 1;

462 
phyBlockM≠På
->
phyBlock
[
dõNo
][
ª£rvedBlockOfLun0
[dõNo]].
bad
)

464 
ª£rvedBlockOfLun0
[
dõNo
]++;

465 if(
ª£rvedBlockOfLun0
[
dõNo
] >
TOTAL_BLOCKS_PER_LUN
)

467 
ªm≠Fœg
 = 0;

472 if(
ªm≠Fœg
)

474 
phyBlockM≠På
->
phyBlock
[
dõNo
][
blockNo
].
ªm≠≥dPhyBlock
 = 
ª£rvedBlockOfLun0
[dieNo];

475 
ª£rvedBlockOfLun0
[
dõNo
]++;

479 
	`xû_¥ötf
("Nÿª£rved block - Ch %d Way %d vútuÆBlock %d i†bad block \r\n", 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
blockNo
);

480 
badBlockCou¡
[
dõNo
]++;

485 
	`xû_¥ötf
("Nÿª£rved block - Ch %d Way %d vútuÆBlock %d i†bad block \r\n", 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
blockNo
);

486 
badBlockCou¡
[
dõNo
]++;

490 i‡(
LUNS_PER_DIE
 > 1)

493 if(
phyBlockM≠På
->
phyBlock
[
dõNo
][
blockNo
+
TOTAL_BLOCKS_PER_LUN
].
bad
)

495 if(
ª£rvedBlockOfLun1
[
dõNo
] < 
TOTAL_BLOCKS_PER_DIE
)

497 
ªm≠Fœg
 = 1;

498 
phyBlockM≠På
->
phyBlock
[
dõNo
][
ª£rvedBlockOfLun1
[dõNo]].
bad
)

500 
ª£rvedBlockOfLun1
[
dõNo
]++;

501 if(
ª£rvedBlockOfLun1
[
dõNo
] >
TOTAL_BLOCKS_PER_DIE
)

503 
ªm≠Fœg
 = 0;

508 if(
ªm≠Fœg
)

510 
phyBlockM≠På
->
phyBlock
[
dõNo
][
blockNo
+
TOTAL_BLOCKS_PER_LUN
].
ªm≠≥dPhyBlock
 = 
ª£rvedBlockOfLun1
[dieNo];

511 
ª£rvedBlockOfLun1
[
dõNo
]++;

515 
	`xû_¥ötf
("Nÿª£rved block - Ch %x Way %x vútuÆBlock %d i†bad block \r\n", 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
blockNo
+
USER_BLOCKS_PER_LUN
);

516 
badBlockCou¡
[
dõNo
]++;

521 
	`xû_¥ötf
("Nÿª£rved block - Ch %x Way %x vútuÆBlock %d i†bad block \r\n", 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
), 
	`Vdõ2PwayTøn¶©i⁄
(dõNo), 
blockNo
+
USER_BLOCKS_PER_LUN
);

522 
badBlockCou¡
[
dõNo
]++;

529 
	`xû_¥ötf
("Bad blockÑemappingÉnd\r\n");

532 
maxBadBlockCou¡
 = 0;

533 
dõNo
=0; dõNÿ< 
USER_DIES
; dieNo++)

535 if(
maxBadBlockCou¡
 < 
badBlockCou¡
[
dõNo
])

537 
maxBadBlockCou¡
 = 
badBlockCou¡
[
dõNo
];

541 
mbPîbadBlockS∑˚
 = 
maxBadBlockCou¡
 * 
USER_DIES
 * 
MB_PER_BLOCK
;

542 
	}
}

544 
	$_GëFromFbLi°
(
dõNo
, 
gëFªeBlockO±i⁄
)

546 
evi˘edBlockNo
;

548 
evi˘edBlockNo
 = 
vútuÆDõM≠På
->
dõ
[
dõNo
].
hódFªeBlock
;

550 if(
gëFªeBlockO±i⁄
 =
GET_FREE_BLOCK_NORMAL
)

552 if(
vútuÆDõM≠På
->
dõ
[
dõNo
].
‰ìBlockC¡
 <
RESERVED_FREE_BLOCK_COUNT
)

554  
BLOCK_FAIL
;

557 if(
gëFªeBlockO±i⁄
 =
GET_FREE_BLOCK_GC
)

559 if(
evi˘edBlockNo
 =
BLOCK_NONE
)

561  
BLOCK_FAIL
;

566 
	`as£π
(!"[WARNING] Wrong getFreeBlockOption [WARNING]");

569 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
evi˘edBlockNo
].
√xtBlock
 !
BLOCK_NONE
)

571 
vútuÆDõM≠På
->
dõ
[
dõNo
].
hódFªeBlock
 = 
vútuÆBlockM≠På
->
block
[dõNo][
evi˘edBlockNo
].
√xtBlock
;

572 
vútuÆBlockM≠På
->
block
[
dõNo
][vútuÆBlockM≠På->block[dõNo][
evi˘edBlockNo
].
√xtBlock
].
¥evBlock
 = 
BLOCK_NONE
;

576 
vútuÆDõM≠På
->
dõ
[
dõNo
].
hódFªeBlock
 = 
BLOCK_NONE
;

577 
vútuÆDõM≠På
->
dõ
[
dõNo
].
èûFªeBlock
 = 
BLOCK_NONE
;

580 
vútuÆBlockM≠På
->
block
[
dõNo
][
evi˘edBlockNo
].
‰ì
 = 0;

581 
vútuÆDõM≠På
->
dõ
[
dõNo
].
‰ìBlockC¡
--;

583 
vútuÆBlockM≠På
->
block
[
dõNo
][
evi˘edBlockNo
].
√xtBlock
 = 
BLOCK_NONE
;

584 
vútuÆBlockM≠På
->
block
[
dõNo
][
evi˘edBlockNo
].
¥evBlock
 = 
BLOCK_NONE
;

586  
evi˘edBlockNo
;

587 
	}
}

589 
	$_InôBlockM≠
()

591 
dõNo
, 
phyBlockNo
, 
vútuÆBlockNo
, 
ªm≠≥dPhyBlock
;

593 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

595 
vútuÆBlockNo
=0; vútuÆBlockNo<
USER_BLOCKS_PER_DIE
 ; virtualBlockNo++)

597 
phyBlockNo
 = 
	`Vblock2PblockOfTbsTøn¶©i⁄
(
vútuÆBlockNo
);

598 
ªm≠≥dPhyBlock
 = 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].remappedPhyBlock;

599 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
bad
 = 
phyBlockM≠På
->
phyBlock
[dõNo][
ªm≠≥dPhyBlock
].bad;

601 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
‰ì
 = 1;

602 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
övÆidSli˚C¡
 = 0;

603 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
cuºítPage
 = 0;

604 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
îa£C¡
 = 0;

606 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
bad
)

608 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
¥evBlock
 = 
BLOCK_NONE
;

609 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆBlockNo
].
√xtBlock
 = 
BLOCK_NONE
;

613 
	`PutToFbLi°
(
dõNo
, 
vútuÆBlockNo
);

617 
	}
}

619 
	$_InôCuºítBlockOfDõM≠
()

621 
dõNo
;

623 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

625 
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 = 
	`_GëFromFbLi°
(dõNo, 
GET_FREE_BLOCK_NORMAL
);

626 if(
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 =
BLOCK_FAIL
)

628 
	`as£π
(!"[WARNING] There isÇo free block [WARNING]");

631 
	}
}

633 
	$_InôSli˚M≠
()

635 
¶i˚Addr
;

636 
¶i˚Addr
=0; sli˚Addr<
SLICES_PER_SSD
 ; sliceAddr++)

638 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
¶i˚Addr
].
vútuÆSli˚Addr
 = 
VSA_NONE
;

639 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
¶i˚Addr
].
logiˇlSli˚Addr
 = 
LSA_NONE
;

641 
	}
}

643 
	$_InôDõM≠
()

645 
dõNo
;

647 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

649 
vútuÆDõM≠På
->
dõ
[
dõNo
].
hódFªeBlock
 = 
BLOCK_NONE
;

650 
vútuÆDõM≠På
->
dõ
[
dõNo
].
èûFªeBlock
 = 
BLOCK_NONE
;

651 
vútuÆDõM≠På
->
dõ
[
dõNo
].
‰ìBlockC¡
 = 0;

653 
	}
}

656 
	$_InôBlockDõM≠
()

658 
dõNo
;

659 
îa£Fœg
 = 1;

661 
	`xû_¥ötf
("Press 'X'ÅoÑe-makeÅhe bad blockÅable.\r\n");

662 i‡(
	`öbyã
() == 'X')

664 
	`_Eø£TŸÆBlockS∑˚
();

665 
îa£Fœg
 = 0;

668 
	`_InôDõM≠
();

671 
	`_RecovîBadBlockTabÀ
(
RESERVED_DATA_BUFFER_BASE_ADDR
);

674 
dõNo
=0 ; dõNo<
USER_DIES
 ; dieNo++)

676 
phyBlockM≠På
->
phyBlock
[
dõNo
][
bbtInfoM≠På
->
bbtInfo
[dõNo].phyBlock].
bad
 = 1;

679 
	`_Rem≠BadBlock
();

681 
	`_InôBlockM≠
();

683 if(
îa£Fœg
)

685 
	`_Eø£U£rBlockS∑˚
();

688 
	`_InôCuºítBlockOfDõM≠
();

689 
	}
}

691 
	$InôAddªssM≠
()

694 
dõNo
 = 0 ; dõNÿ< 
USER_DIES
; dieNo++)

696 
blockNo
 = 0; blockNÿ< 
TOTAL_BLOCKS_PER_DIE
; blockNo++)

698 
phyBlockM≠På
->
phyBlock
[
dõNo
][
blockNo
].
ªm≠≥dPhyBlock
 = blockNo;

701 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
phyBlock
 = 0;

702 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
grownBadUpd©e
 = 
BBT_INFO_GROWN_BAD_UPDATE_NONE
;

705 
¶i˚AŒoˇti⁄T¨gëDõ
 = 
	`FödDõF‹FªeSli˚AŒoˇti⁄
();

707 
	`_InôSli˚M≠
();

708 
	`_InôBlockDõM≠
();

709 
	}
}

711 
	$AddrTønsRód
(
logiˇlSli˚Addr
)

713 
vútuÆSli˚Addr
;

715 if(
logiˇlSli˚Addr
 < 
SLICES_PER_SSD
)

717 
vútuÆSli˚Addr
 = 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].virtualSliceAddr;

719 if(
vútuÆSli˚Addr
 !
VSA_NONE
)

721  
vútuÆSli˚Addr
;

725  
VSA_FAIL
;

730 
	`as£π
(!"[WARNING] Logicaláddress isÜargerÅhan maximumÜogicaláddress served by SSD [WARNING]");

732 
	}
}

734 
	$AddrTønsWrôe
(
logiˇlSli˚Addr
)

736 
vútuÆSli˚Addr
;

738 if(
logiˇlSli˚Addr
 < 
SLICES_PER_SSD
)

740 
	`InvÆid©eOldVß
(
logiˇlSli˚Addr
);

742 
vútuÆSli˚Addr
 = 
	`FödFªeVútuÆSli˚
();

744 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].
vútuÆSli˚Addr
 = virtualSliceAddr;

745 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
vútuÆSli˚Addr
].
logiˇlSli˚Addr
 =ÜogicalSliceAddr;

747  
vútuÆSli˚Addr
;

751 
	`as£π
(!"[WARNING] Logicaláddress isÜargerÅhan maximumÜogicaláddress served by SSD [WARNING]");

753 
	}
}

756 
	$AddrTønsSu•í
(
logiˇlSli˚Addr
)

758 
vútuÆSli˚Addr
;

760 if(
logiˇlSli˚Addr
 < 
SLICES_PER_SSD
)

764 
vútuÆSli˚Addr
 = 
	`FödFªeVútuÆSli˚
();

769  
vútuÆSli˚Addr
;

773 
	`as£π
(!"[WARNING] Logicaláddress isÜargerÅhan maximumÜogicaláddress served by SSD [WARNING]");

775 
	}
}

778 
	$Upd©eAddrWrôe
(
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
)

781 if(
logiˇlSli˚Addr
 < 
SLICES_PER_SSD
)

783 
	`InvÆid©eOldVß
(
logiˇlSli˚Addr
);

785 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].
vútuÆSli˚Addr
 = virtualSliceAddr;

786 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
vútuÆSli˚Addr
].
logiˇlSli˚Addr
 =ÜogicalSliceAddr;

790 
	`as£π
(!"[WARNING] Logicaláddress isÜargerÅhan maximumÜogicaláddress served by SSD [WARNING]");

792 
	}
}

796 
	$FödFªeVútuÆSli˚
()

798 
cuºítBlock
, 
vútuÆSli˚Addr
, 
dõNo
;

800 
dõNo
 = 
¶i˚AŒoˇti⁄T¨gëDõ
;

801 
cuºítBlock
 = 
vútuÆDõM≠På
->
dõ
[
dõNo
].currentBlock;

803 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 =
USER_PAGES_PER_BLOCK
)

805 
cuºítBlock
 = 
	`_GëFromFbLi°
(
dõNo
, 
GET_FREE_BLOCK_NORMAL
);

807 if(
cuºítBlock
 !
BLOCK_FAIL
)

809 
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 = currentBlock;

813 
	`G¨bageCﬁÀ˘i⁄_Pro˚ss
(
dõNo
);

815 
cuºítBlock
 = 
vútuÆDõM≠På
->
dõ
[
dõNo
].currentBlock;

817 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 =
USER_PAGES_PER_BLOCK
)

819 
cuºítBlock
 = 
	`_GëFromFbLi°
(
dõNo
, 
GET_FREE_BLOCK_NORMAL
);

820 if(
cuºítBlock
 !
BLOCK_FAIL
)

822 
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 = currentBlock;

826 
	`as£π
(!"[WARNING] There isÇoávailable block [WARNING]");

829 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 > 
USER_PAGES_PER_BLOCK
)

831 
	`as£π
(!"[WARNING] CurrentÖage management fail [WARNING]");

835 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 > 
USER_PAGES_PER_BLOCK
)

837 
	`as£π
(!"[WARNING] CurrentÖage management fail [WARNING]");

840 
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
cuºítBlock
, 
vútuÆBlockM≠På
->
block
[dõNo][cuºítBlock].
cuºítPage
);

841 
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
++;

842 
¶i˚AŒoˇti⁄T¨gëDõ
 = 
	`FödDõF‹FªeSli˚AŒoˇti⁄
();

843 
dõNo
 = 
¶i˚AŒoˇti⁄T¨gëDõ
;

845  
vútuÆSli˚Addr
;

846 
	}
}

848 
	$FödFªeVútuÆSli˚F‹Gc
(
c›yT¨gëDõNo
, 
vi˘imBlockNo
)

850 
cuºítBlock
, 
vútuÆSli˚Addr
, 
dõNo
;

852 
dõNo
 = 
c›yT¨gëDõNo
;

854 if(
vi˘imBlockNo
 =
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
)

856 
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 = 
	`_GëFromFbLi°
(dõNo, 
GET_FREE_BLOCK_GC
);

858 if(
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 =
BLOCK_FAIL
)

860 
	`as£π
(!"[WARNING] There isÇoávailable block [WARNING]");

864 
cuºítBlock
 = 
vútuÆDõM≠På
->
dõ
[
dõNo
].currentBlock;

866 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 =
USER_PAGES_PER_BLOCK
)

869 
cuºítBlock
 = 
	`_GëFromFbLi°
(
dõNo
, 
GET_FREE_BLOCK_GC
);

871 if(
cuºítBlock
 !
BLOCK_FAIL
)

873 
vútuÆDõM≠På
->
dõ
[
dõNo
].
cuºítBlock
 = currentBlock;

877 
	`as£π
(!"[WARNING] There isÇoávailable block [WARNING]");

880 if(
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
 > 
USER_PAGES_PER_BLOCK
)

882 
	`as£π
(!"[WARNING] CurrentÖage management fail [WARNING]");

885 
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
cuºítBlock
, 
vútuÆBlockM≠På
->
block
[dõNo][cuºítBlock].
cuºítPage
);

886 
vútuÆBlockM≠På
->
block
[
dõNo
][
cuºítBlock
].
cuºítPage
++;

888  
vútuÆSli˚Addr
;

889 
	}
}

892 
	$FödDõF‹FªeSli˚AŒoˇti⁄
()

894 
èrgëCh
 = 0;

895 
èrgëWay
 = 0;

896 
èrgëDõ
;

898 
èrgëDõ
 = 
	`Pcw2VdõTøn¶©i⁄
(
èrgëCh
, 
èrgëWay
);

900 if(
èrgëCh
 !(
USER_CHANNELS
 - 1))

902 
èrgëCh
 =ÅargetCh + 1;

906 
èrgëCh
 = 0;

907 
èrgëWay
 = (èrgëWay + 1Ë% 
USER_WAYS
;

910  
èrgëDõ
;

911 
	}
}

913 
	$InvÆid©eOldVß
(
logiˇlSli˚Addr
)

915 
vútuÆSli˚Addr
, 
dõNo
, 
blockNo
;

917 
vútuÆSli˚Addr
 = 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].virtualSliceAddr;

919 if(
vútuÆSli˚Addr
 !
VSA_NONE
)

921 if(
vútuÆSli˚M≠På
->
vútuÆSli˚
[
vútuÆSli˚Addr
].
logiˇlSli˚Addr
 !=ÜogicalSliceAddr)

926 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
vútuÆSli˚Addr
);

927 
blockNo
 = 
	`Vß2VblockTøn¶©i⁄
(
vútuÆSli˚Addr
);

930 
	`G¨bageCﬁÀ˘i⁄_Sñe˘iveGëFromGcVi˘imLi°
(
dõNo
, 
blockNo
);

932 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
övÆidSli˚C¡
++;

933 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].
vútuÆSli˚Addr
 = 
VSA_NONE
;

935 
	`G¨bageCﬁÀ˘i⁄_AddVi˘imBlock
(
dõNo
, 
blockNo
, 
vútuÆBlockM≠På
->
block
[dõNo][blockNo].
övÆidSli˚C¡
);

938 
	}
}

941 
	$Eø£Block
(
dõNo
, 
blockNo
)

943 
∑geNo
, 
vútuÆSli˚Addr
, 
ªqSlŸTag
;

945 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
NULL
;

947 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

948 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

950 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

951 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_ERASE
;

952 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

953 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_NONE
;

954 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

955 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

956 
p_ªque°E¡ry
->
«ndInfo
.
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
blockNo
, 0);

957 
p_ªque°E¡ry
->
«ndInfo
.
¥ogømmedPageC¡
 = 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
cuºítPage
;

959 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

962 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
‰ì
 = 1;

963 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
îa£C¡
++;

964 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
övÆidSli˚C¡
 = 0;

965 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
cuºítPage
 = 0;

967 
	`PutToFbLi°
(
dõNo
, 
blockNo
);

969 
∑geNo
=0;ÖageNo<
USER_PAGES_PER_BLOCK
;ÖageNo++)

971 
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
blockNo
, 
∑geNo
);

972 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
vútuÆSli˚Addr
].
logiˇlSli˚Addr
 = 
LSA_NONE
;

974 
	}
}

976 
	$PutToFbLi°
(
dõNo
, 
blockNo
)

978 if(
vútuÆDõM≠På
->
dõ
[
dõNo
].
èûFªeBlock
 !
BLOCK_NONE
)

980 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
¥evBlock
 = 
vútuÆDõM≠På
->
dõ
[dõNo].
èûFªeBlock
;

981 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
√xtBlock
 = 
BLOCK_NONE
;

982 
vútuÆBlockM≠På
->
block
[
dõNo
][
vútuÆDõM≠På
->
dõ
[dõNo].
èûFªeBlock
].
√xtBlock
 = 
blockNo
;

983 
vútuÆDõM≠På
->
dõ
[
dõNo
].
èûFªeBlock
 = 
blockNo
;

987 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
¥evBlock
 = 
BLOCK_NONE
;

988 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
√xtBlock
 = 
BLOCK_NONE
;

989 
vútuÆDõM≠På
->
dõ
[
dõNo
].
hódFªeBlock
 = 
blockNo
;

990 
vútuÆDõM≠På
->
dõ
[
dõNo
].
èûFªeBlock
 = 
blockNo
;

993 
vútuÆDõM≠På
->
dõ
[
dõNo
].
‰ìBlockC¡
++;

994 
	}
}

996 
	$Upd©ePhyBlockM≠F‹GrownBadBlock
(
dõNo
, 
phyBlockNo
)

998 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
bad
 = 
BLOCK_STATE_BAD
;

1000 
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
grownBadUpd©e
 = 
BBT_INFO_GROWN_BAD_UPDATE_BOOKED
;

1001 
	}
}

1004 
	$Upd©eBadBlockTabÀF‹GrownBadBlock
(
ãmpBufAddr
)

1006 
dõNo
, 
phyBlockNo
, 
ãmpBbtBufBa£Addr
, 
ãmpBbtBufE¡rySize
;

1007 
ãmpBbtBufAddr
[
USER_DIES
];

1008 
dõSèã
[
USER_DIES
];

1009 * 
bbtUpd©î
;

1012 
ãmpBbtBufBa£Addr
 = 
ãmpBufAddr
;

1013 
ãmpBbtBufE¡rySize
 = 
BYTES_PER_DATA_REGION_OF_PAGE
 + 
BYTES_PER_SPARE_REGION_OF_PAGE
;

1014 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

1015 
ãmpBbtBufAddr
[
dõNo
] = 
ãmpBbtBufBa£Addr
 + dõNÿ* 
USED_PAGES_FOR_BAD_BLOCK_TABLE_PER_DIE
 * 
ãmpBbtBufE¡rySize
;

1018 
dõNo
 = 0; dõNÿ< 
USER_DIES
; dieNo++)

1020 if(
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
grownBadUpd©e
 =
BBT_INFO_GROWN_BAD_UPDATE_BOOKED
)

1022 
phyBlockNo
 = 0;ÖhyBlockNÿ< 
TOTAL_BLOCKS_PER_DIE
;ÖhyBlockNo++)

1024 
bbtUpd©î
 = (*)(
ãmpBbtBufAddr
[
dõNo
] + 
phyBlockNo
);

1026 if(
phyBlockNo
 !
bbtInfoM≠På
->
bbtInfo
[
dõNo
].
phyBlock
)

1027 *
bbtUpd©î
 = 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
bad
;

1029 *
bbtUpd©î
 = 
BLOCK_STATE_NORMAL
;

1032 
dõSèã
[
dõNo
] = 
DIE_STATE_BAD_BLOCK_TABLE_UPDATE
;

1035 
dõSèã
[
dõNo
] = 
DIE_STATE_BAD_BLOCK_TABLE_HOLD
;

1039 
	`_SaveBadBlockTabÀ
(
dõSèã
, 
ãmpBbtBufAddr
, 
ãmpBbtBufE¡rySize
);

1040 
	}
}

	@ftl/address_translation.h

47 #i‚de‡
ADDRESS_TRANSLATION_H_


48 
	#ADDRESS_TRANSLATION_H_


	)

53 
	#LSA_NONE
 0xffffffff

	)

54 
	#LSA_FAIL
 0xffffffff

	)

56 
	#VSA_NONE
 0xffffffff

	)

57 
	#VSA_FAIL
 0xffffffff

	)

59 
	#PAGE_NONE
 0xffff

	)

61 
	#BLOCK_NONE
 0xffff

	)

62 
	#BLOCK_FAIL
 0xffff

	)

64 
	#DIE_NONE
 0xff

	)

65 
	#DIE_FAIL
 0xff

	)

67 
	#RESERVED_FREE_BLOCK_COUNT
 0x1

	)

69 
	#GET_FREE_BLOCK_NORMAL
 0x0

	)

70 
	#GET_FREE_BLOCK_GC
 0x1

	)

72 
	#BLOCK_STATE_NORMAL
 0

	)

73 
	#BLOCK_STATE_BAD
 1

	)

75 
	#DIE_STATE_BAD_BLOCK_TABLE_NOT_EXIST
 0

	)

76 
	#DIE_STATE_BAD_BLOCK_TABLE_EXIST
 1

	)

78 
	#BAD_BLOCK_TABLE_MAKER_IDLE
 0

	)

79 
	#BAD_BLOCK_TABLE_MAKER_TRIGGER
 1

	)

80 
	#DIE_STATE_BAD_BLOCK_TABLE_HOLD
 2

	)

81 
	#DIE_STATE_BAD_BLOCK_TABLE_UPDATE
 3

	)

83 
	#CLEAN_DATA_IN_BYTE
 0xff

	)

85 
	#USED_PAGES_FOR_BAD_BLOCK_TABLE_PER_DIE
 (
TOTAL_BLOCKS_PER_DIE
 / 
BYTES_PER_DATA_REGION_OF_PAGE
 + 1)

	)

86 
	#DATA_SIZE_OF_BAD_BLOCK_TABLE_PER_DIE
 (
TOTAL_BLOCKS_PER_DIE
)

	)

87 
	#START_PAGE_NO_OF_BAD_BLOCK_TABLE_BLOCK
 (1)

88 

	)

89 
	#BBT_INFO_GROWN_BAD_UPDATE_NONE
 0

	)

90 
	#BBT_INFO_GROWN_BAD_UPDATE_BOOKED
 1

	)

93 
	#Vß2VdõTøn¶©i⁄
(
vútuÆSli˚Addr
Ë((vútuÆSli˚AddrË% (
USER_DIES
))

	)

94 
	#Vß2VblockTøn¶©i⁄
(
vútuÆSli˚Addr
Ë(((vútuÆSli˚AddrË/ (
USER_DIES
)Ë/ (
SLICES_PER_BLOCK
))

	)

95 
	#Vß2V∑geTøn¶©i⁄
(
vútuÆSli˚Addr
Ë(((vútuÆSli˚AddrË/ (
USER_DIES
)Ë% (
SLICES_PER_BLOCK
))

	)

98 
	#V‹g2VßTøn¶©i⁄
(
dõNo
, 
blockNo
, 
∑geNo
Ë((dõNoË+ (
USER_DIES
)*((blockNo)*(
SLICES_PER_BLOCK
Ë+ (∑geNo)))

	)

101 
	#Vdõ2PchTøn¶©i⁄
(
dõNo
Ë((dõNoË% (
USER_CHANNELS
))

	)

102 
	#Vdõ2PwayTøn¶©i⁄
(
dõNo
Ë((dõNoË/ (
USER_CHANNELS
))

	)

103 
	#Vblock2PblockOfTbsTøn¶©i⁄
(
blockNo
Ë(((blockNoË/ (
USER_BLOCKS_PER_LUN
)Ë* (
TOTAL_BLOCKS_PER_LUN
) + ((blockNo) % (USER_BLOCKS_PER_LUN)))

104 
	#Vblock2PblockOfMbsTøn¶©i⁄
(
blockNo
Ë(((blockNoË/ (
USER_BLOCKS_PER_LUN
)Ë* (
MAIN_BLOCKS_PER_LUN
) + ((blockNo) % (USER_BLOCKS_PER_LUN)))

105 
	#V∑ge2PlsbPageTøn¶©i⁄
(
∑geNo
Ë(’ageNoË> (0Ë? (2 * (∑geNoË- 1): (0))

	)

108 
	#Pcw2VdõTøn¶©i⁄
(
chNo
, 
wayNo
Ë((chNoË+ (wayNoË* (
USER_CHANNELS
))

	)

109 
	#PlsbPage2V∑geTøn¶©i⁄
(
∑geNo
Ë(’ageNoË> (0Ë? ( (’ageNoË+ 1Ë/ 2): (0))

	)

112 
	s_LOGICAL_SLICE_ENTRY
 {

113 
	mvútuÆSli˚Addr
;

114 } 
	tLOGICAL_SLICE_ENTRY
, *
	tP_LOGICAL_SLICE_ENTRY
;

116 
	s_LOGICAL_SLICE_MAP
 {

117 
LOGICAL_SLICE_ENTRY
 
	mlogiˇlSli˚
[
SLICES_PER_SSD
];

118 } 
	tLOGICAL_SLICE_MAP
, *
	tP_LOGICAL_SLICE_MAP
;

122 
	s_VIRTUAL_SLICE_ENTRY
 {

123 
	mlogiˇlSli˚Addr
;

124 } 
	tVIRTUAL_SLICE_ENTRY
, *
	tP_VIRTUAL_SLICE_ENTRY
;

126 
	s_VIRTUAL_SLICE_MAP
 {

127 
VIRTUAL_SLICE_ENTRY
 
	mvútuÆSli˚
[
SLICES_PER_SSD
];

128 } 
	tVIRTUAL_SLICE_MAP
, *
	tP_VIRTUAL_SLICE_MAP
;

130 
	s_VIRTUAL_BLOCK_ENTRY
 {

131 
	mbad
 : 1;

132 
	m‰ì
 : 1;

133 
	mövÆidSli˚C¡
 : 16;

134 
	mª£rved0
 :10;

135 
	mcuºítPage
 : 16;

136 
	mîa£C¡
 : 16;

137 
	m¥evBlock
 : 16;

138 
	m√xtBlock
 :16;

139 } 
	tVIRTUAL_BLOCK_ENTRY
, *
	tP_VIRTUAL_BLOCK_ENTRY
;

141 
	s_VIRTUAL_BLOCK_MAP
 {

142 
VIRTUAL_BLOCK_ENTRY
 
	mblock
[
USER_DIES
][
USER_BLOCKS_PER_DIE
];

143 } 
	tVIRTUAL_BLOCK_MAP
, *
	tP_VIRTUAL_BLOCK_MAP
;

146 
	s_VIRTUAL_DIE_ENTRY
 {

147 
	mcuºítBlock
 : 16;

148 
	mhódFªeBlock
 : 16;

149 
	mèûFªeBlock
 : 16;

150 
	m‰ìBlockC¡
 : 16;

151 
	m¥evDõ
 : 8;

152 
	m√xtDõ
 : 8;

153 
	mª£rved0
 : 16;

154 } 
	tVIRTUAL_DIE_ENTRY
, *
	tP_VIRTUAL_DIE_ENTRY
;

156 
	s_VIRTUAL_DIE_MAP
 {

157 
VIRTUAL_DIE_ENTRY
 
	mdõ
[
USER_DIES
];

158 } 
	tVIRTUAL_DIE_MAP
, *
	tP_VIRTUAL_DIE_MAP
;

160 
	s_FRRE_BLOCK_ALLOCATION_LIST
 {

161 
	mhódDõ
 : 8;

162 
	mèûDõ
 : 8;

163 
	mª£rved0
 : 16;

164 } 
	tFRRE_BLOCK_ALLOCATION_LIST
, *
	tP_FRRE_BLOCK_ALLOCATION_LIST
;

166 
	s_BAD_BLOCK_TABLE_INFO_ENTRY
{

167 
	mphyBlock
 : 16;

168 
	mgrownBadUpd©e
 : 1;

169 
	mª£rved0
 : 15;

170 } 
	tBAD_BLOCK_TABLE_INFO_ENTRY
, *
	tP_BAD_BLOCK_TABLE_ENTRY
;

172 
	s_BAD_BLOCK_TABLE_INFO_MAP
{

173 
BAD_BLOCK_TABLE_INFO_ENTRY
 
	mbbtInfo
[
USER_DIES
];

174 } 
	tBAD_BLOCK_TABLE_INFO_MAP
, *
	tP_BAD_BLOCK_TABLE_INFO_MAP
;

176 
	s_PHY_BLOCK_ENTRY
 {

177 
	mªm≠≥dPhyBlock
 : 16;

178 
	mbad
 :1;

179 
	mª£rved0
 :15;

180 } 
	tPHY_BLOCK_ENTRY
, *
	tP_PHY_BLOCK_ENTRY
;

182 
	s_PHY_BLOCK_MAP
 {

183 
PHY_BLOCK_ENTRY
 
	mphyBlock
[
USER_DIES
][
TOTAL_BLOCKS_PER_DIE
];

184 } 
	tPHY_BLOCK_MAP
, *
	tP_PHY_BLOCK_MAP
;

187 
InôAddªssM≠
();

189 
AddrTønsRód
(
logiˇlSli˚Addr
);

190 
AddrTønsWrôe
(
logiˇlSli˚Addr
);

191 
AddrTønsSu•í
(
logiˇlSli˚Addr
);

192 
Upd©eAddrWrôe
(
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
);

194 
FödFªeVútuÆSli˚
();

195 
FödFªeVútuÆSli˚F‹Gc
(
c›yT¨gëDõNo
, 
vi˘imBlockNo
);

196 
FödDõF‹FªeSli˚AŒoˇti⁄
();

198 
InvÆid©eOldVß
(
logiˇlSli˚Addr
);

199 
Eø£Block
(
dõNo
, 
blockNo
);

201 
PutToFbLi°
(
dõNo
, 
blockNo
);

203 
Upd©ePhyBlockM≠F‹GrownBadBlock
(
dõNo
, 
phyBlockNo
);

204 
Upd©eBadBlockTabÀF‹GrownBadBlock
(
ãmpBufAddr
);

206 
P_LOGICAL_SLICE_MAP
 
logiˇlSli˚M≠På
;

207 
P_VIRTUAL_SLICE_MAP
 
vútuÆSli˚M≠På
;

208 
P_VIRTUAL_BLOCK_MAP
 
vútuÆBlockM≠På
;

209 
P_PHY_BLOCK_MAP
 
phyBlockM≠På
;

211 
mbPîbadBlockS∑˚
;

	@ftl/barrier_ftl.c

7 
	~"xû_¥ötf.h
"

8 
	~"../debug.h
"

10 
	~"../mem‹y_m≠.h
"

11 
	~"../ªque°_scheduÀ.h
"

13 
	~"b¨rõr_·l.h
"

14 
	~"addªss_å™¶©i⁄.h
"

16 
b¨rõr_c⁄ãxt_t
 
	gg_b¨rõrC⁄ãxt
;

18 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

19 
	#N_STREAM_OFFS
 (7)

	)

20 
	#N_STREAM_MASK
 ((1 << 
N_STREAM_OFFS
Ë- 1)

	)

22 
	#N_EPOCH_OFFS
 (8)

	)

23 
	#N_EPOCH_MASK
 ((1 << 
N_EPOCH_OFFS
Ë- 1)

	)

25 
uöt32_t
 
	$gë_°ªam_ödex
 (
sid
) {

26  
sid
 & 
N_STREAM_MASK
;

27 
	}
}

28 
uöt32_t
 
	$gë_ïoch_ödex
 (
eid
) {

29  
eid
 & 
N_EPOCH_MASK
;

30 
	}
}

36 
	$upd©e_ïoch_öfo
(
uöt32_t
 
sid
, uöt32_à
eid
, * 
func
)

38 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

39 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

41 i‡(
sid
 > 0){

42 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

43 
ïoch_íåy_t
* 
ïoch_íåy
;

44 
ïoch_íåy
 = &
b_°ªam
->
ïoch_li°
[
eidx
];

45 i‡((
b_°ªam
->
°ªam_id
 !
sid
Ë|| (
ïoch_íåy
->
ïoch_id
 !
eid
)){

46 
b_°ªam
->
°ªam_id
 = 
sid
;

47 
ïoch_íåy
->
ïoch_id
 = 
eid
;

54 
ïoch_íåy
->
num_upd©ed_∑ges
 += 1;

56 #i‡(
PRINT_DEBUG_MAP
 == 1)

57 
	`xû_¥ötf
("[M≠≥d] sid: %uÉid: %uÖg %u/%uÜeid: %u s0: %u s1: %u s2: %u s3: %u m≠∑bÀ: %u %†\n", 
sid
, 
eid
,

58 
ïoch_íåy
->
num_upd©ed_∑ges
,Époch_íåy->
num_tŸÆ_∑ges
,

59 
b_°ªam
->
œ°_ïoch_id
,

60 
ïoch_íåy
->
°©e
 =
EPOCH_STATE_ACTIVE_TRANSIENT_UNMAPPED
,

61 
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
,

62 
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_DURABLE_UNMAPPED
,

63 
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_DURABLE_MAPPED
,

64 
	`is_m≠∑bÀ
(
sid
, 
eid
),

65 
func
);

69 i‡(
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_DURABLE_MAPPED
){

73 i‡–(
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
) ||

74 (
ïoch_íåy
->
°©e
 =
EPOCH_STATE_CLOSED_DURABLE_UNMAPPED
) ){

75 i‡(
ïoch_íåy
->
num_upd©ed_∑ges
 =ïoch_íåy->
num_tŸÆ_∑ges
){

76 i‡–((
b_°ªam
->
œ°_ïoch_id
 + 1Ë% 
N_EPOCH
Ë!
eid
){

77 i‡(
b_°ªam
->
œ°_ïoch_id
 =0 && 
eid
 == 0){

79 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

86 
b_°ªam
->
œ°_ïoch_id
 = 
eid
;

87 
ïoch_íåy
->
°©e
 = 
EPOCH_STATE_CLOSED_DURABLE_MAPPED
;

90 i‡(
eid
 == 1)

91 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

98 
	}
}

100 
	$ªgi°î_fú°_ïoch
(
b¨rõr_°ªam_íåy_t
* 
b_°ªam
, 
eid
)

102 
b_°ªam
->
fú°_ïoch_id
 = 
eid
;

103 i‡(
eid
 > 0)

104 
b_°ªam
->
œ°_ïoch_id
 = 
eid
-1;

106 
b_°ªam
->
œ°_ïoch_id
 = 0;

107 
b_°ªam
->
is_fú°
 = 0;

108 
	}
}

114 
ïoch_°©e
 
	$b¨rõr_check_™d_£t_ïoch_°©e
 (
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
, 
∑ge_˙t
) {

115 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

116 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

117 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

118 
ïoch_íåy_t
* 
ïoch_íåy
;

119 
¥ev_eidx
;

121 i‡(
b_°ªam
->
°ªam_id
 !0 && b_°ªam->°ªam_id !
sid
) {

127 i‡(
b_°ªam
->
is_fú°
){

128 
	`ªgi°î_fú°_ïoch
(
b_°ªam
, 
eid
);

132 
b_°ªam
->
°ªam_id
 = 
sid
;

134 
ïoch_íåy
 = &
b_°ªam
->
ïoch_li°
[
eidx
];

136 
ïoch_íåy
->
ïoch_id
 = 
eid
;

138 i‡(1 =
b¨rõr
) {

139 
ïoch_íåy
->
°©e
 = 
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
;

141 i‡(
ïoch_íåy
->
num_upd©ed_∑ges
 >ïoch_íåy->
num_tŸÆ_∑ges
){

142 i‡–((
b_°ªam
->
œ°_ïoch_id
 + 1Ë% 
N_EPOCH
Ë> 
eid
){

143 i‡(
b_°ªam
->
œ°_ïoch_id
 =0 && 
eid
 == 0){

145 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

152 
b_°ªam
->
œ°_ïoch_id
 = 
eid
;

156 i‡(
eid
 == 1)

157 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

163 i‡(
ïoch_íåy
->
°©e
 =
EPOCH_STATE_NONE
)

164 
ïoch_íåy
->
°©e
 = 
EPOCH_STATE_ACTIVE_TRANSIENT_UNMAPPED
;

171 
ïoch_íåy
->
num_tŸÆ_∑ges
 +
∑ge_˙t
;

176 i‡(0 =
eid
) {

177  
EPOCH_STATE_CLOSED_DURABLE_MAPPED
;

179 i‡(0 =
eidx
) {

180 
¥ev_eidx
 = 
N_EPOCH
 -1 ;

182 
¥ev_eidx
 = 
eidx
 - 1;

185 i‡(
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
¥ev_eidx
].
ïoch_id
 =
eid
 -1) {

186  
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
¥ev_eidx
].
°©e
;

188  
EPOCH_STATE_NONE
;

190 
	}
}

194 
	$b¨rõr_£t_ïoch_°©e
 (
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
, 
∑ge_˙t
) {

195 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

196 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

197 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

198 
ïoch_íåy_t
* 
ïoch_íåy
;

199 
¥ev_eidx
;

201 i‡(
b_°ªam
->
°ªam_id
 !0 && b_°ªam->°ªam_id !
sid
) {

207 i‡(
b_°ªam
->
is_fú°
){

208 
	`ªgi°î_fú°_ïoch
(
b_°ªam
, 
eid
);

212 
b_°ªam
->
°ªam_id
 = 
sid
;

214 
ïoch_íåy
 = &
b_°ªam
->
ïoch_li°
[
eidx
];

216 
ïoch_íåy
->
ïoch_id
 = 
eid
;

218 i‡(1 =
b¨rõr
) {

219 
ïoch_íåy
->
°©e
 = 
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
;

221 i‡(
ïoch_íåy
->
num_upd©ed_∑ges
 >ïoch_íåy->
num_tŸÆ_∑ges
){

222 i‡–((
b_°ªam
->
œ°_ïoch_id
 + 1Ë% 
N_EPOCH
Ë> 
eid
){

223 i‡(
b_°ªam
->
œ°_ïoch_id
 =0 && 
eid
 == 0){

225 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

232 
b_°ªam
->
œ°_ïoch_id
 = 
eid
;

236 i‡(
eid
 == 1)

237 
b_°ªam
->
ïoch_zîo_d⁄e
 = 1;

243 i‡(
ïoch_íåy
->
°©e
 =
EPOCH_STATE_NONE
)

244 
ïoch_íåy
->
°©e
 = 
EPOCH_STATE_ACTIVE_TRANSIENT_UNMAPPED
;

251 
ïoch_íåy
->
num_tŸÆ_∑ges
 +
∑ge_˙t
;

254 
	}
}

258 
ïoch_°©e
 
	$b¨rõr_check_¥ev_ïoch_°©e
 (
uöt32_t
 
sid
, uöt32_à
eid
) {

259 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

260 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

261 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

262 
ïoch_íåy_t
* 
ïoch_íåy
;

263 
¥ev_eidx
;

265 i‡(0 =
eid
) {

266  
EPOCH_STATE_CLOSED_DURABLE_MAPPED
;

268 i‡(0 =
eidx
) {

269 
¥ev_eidx
 = 
N_EPOCH
 -1 ;

271 
¥ev_eidx
 = 
eidx
 - 1;

274 i‡(
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
¥ev_eidx
].
ïoch_id
 =
eid
 -1) {

275  
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
¥ev_eidx
].
°©e
;

277  
EPOCH_STATE_NONE
;

279 
	}
}

346 
	$b¨rõr_check_tŸÆ_∑ge_cou¡
 (
sid
, 
eid
) {

347 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

348 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

350 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

351 
ïoch_íåy_t
* 
ïoch_íåy
 = &
b_°ªam
->
ïoch_li°
[
eidx
];

353  
ïoch_íåy
->
num_tŸÆ_∑ges
;

354 
	}
}

359 
	$b¨rõr_ö¸ó£_duøbÀ_∑ge_cou¡
(
sid
, 
eid
, 
∑ge_˙t
)

361 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

362 
uöt32_t
 
eidx
 = 
	`gë_°ªam_ödex
 (
eid
);

364 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

365 
ïoch_íåy_t
* 
ïoch_íåy
 = &
b_°ªam
->
ïoch_li°
[
eidx
];

366 
ïoch_íåy
->
num_duøbÀ_∑ges
 +
∑ge_˙t
;

368 
	}
}

395 
m≠_su•íded_íåy
(
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy
, 
uöt32_t
 
hidx
);

399 
	$su•ísi⁄_¨øy_ovîÊow_check
(
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy
)

401 
uöt32_t
 
hidx
, 
tidx
, 
sid
;

402 
hód_ôî
, 
èû_ôî
;

403 
INIT
:

404 
hidx
 = 
°ªam_íåy
->
hód_idx
;

405 
tidx
 = 
°ªam_íåy
->
èû_idx
;

406 
hód_ôî
 = 
°ªam_íåy
->head_iter;

407 
èû_ôî
 = 
°ªam_íåy
->tail_iter;

408 
sid
 = 
°ªam_íåy
->
°ªam_id
;

410 i‡(!(
hód_ôî
 <
èû_ôî
))

411 
	`xû_¥ötf
("%s: cond 1 fail. sid: %u head iter: %uÅail iter: %u \n",

412 
__func__
, 
sid
, 
hód_ôî
, 
èû_ôî
);

413 
	`as£π
(
hód_ôî
 <
èû_ôî
);

414 i‡(!(
èû_ôî
 - 
hód_ôî
 <= 1))

415 
	`xû_¥ötf
("%s: cond 2 fail. sid %u head iter: %uÅail iter: %u \n",

416 
__func__
, 
sid
, 
hód_ôî
, 
èû_ôî
);

417 
	`as£π
(
èû_ôî
 - 
hód_ôî
 <= 1);

419 i‡(
èû_ôî
 - 
hód_ôî
 == 1){

420 i‡(!(
tidx
 < 
hidx
)){

421 i‡(
	`m≠_su•íded_íåy
(
°ªam_íåy
, 
hidx
))

422 
INIT
;

423 
	`xû_¥ötf
("%s: cond 3 fail. sid %u head iter: %uÅail iter: %u hidx: %uÅidx: %u \n",

424 
__func__
, 
sid
, 
hód_ôî
, 
èû_ôî
, 
hidx
, 
tidx
);

425 
	`xû_¥ötf
("¥öàÆ»£¡ry.Üa°Éid: %u\n", 
°ªam_íåy
->
œ°_ïoch_id
);

426 
i
 = 0; i < 
N_SUSPENSION
; i += 1){

427 
i_
 = (
i
 + 
hidx
Ë% 
N_SUSPENSION
;

428 
m≠pög_waô_íåy_t
* 
£¡ry
 = &
°ªam_íåy
->
su•ísi⁄_li°
[
i_
];

429 i‡(
£¡ry
->
vÆid
){

430 
	`xû_¥ötf
("hidx: %uÉid: %u\n", 
i_
, 
£¡ry
->
ïoch_id
);

434 
	`as£π
(
tidx
 < 
hidx
);

437 i‡(
èû_ôî
 =
hód_ôî
){

438 i‡(!(
tidx
 >
hidx
))

439 
	`xû_¥ötf
("%s: cond 4 fail. sid %u head iter: %uÅail iter: %u \n",

440 
__func__
, 
sid
, 
hód_ôî
, 
èû_ôî
);

441 
	`as£π
(
tidx
 >
hidx
);

443 
	}
}

445 
	$b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 
m≠∑bÀ_ˇ£
) {

447 
uöt32_t
 
sidx1
 = 
	`gë_°ªam_ödex
 (
sid1
);

448 
uöt32_t
 
sidx2
 = 
	`gë_°ªam_ödex
 (
sid2
);

449 
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy_1
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx1
];

450 
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy_2
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx2
];

452 
uöt32_t
 
hidx_1
 = 
°ªam_íåy_1
->
hód_idx
,

453 
tidx_1
 = 
°ªam_íåy_1
->
èû_idx
,

454 
hidx_2
 = 
°ªam_íåy_2
->
hód_idx
,

455 
tidx_2
 = 
°ªam_íåy_2
->
èû_idx
,

456 
√xt_idx_1
 = (
tidx_1
+1Ë% 
N_SUSPENSION
,

457 
√xt_idx_2
 = (
tidx_2
+1Ë% 
N_SUSPENSION
;

459 
hód_ôî_1
 = 
°ªam_íåy_1
->
hód_ôî
,

460 
√xt_èû_ôî_1
 = 
°ªam_íåy_1
->
èû_ôî
,

461 
hód_ôî_2
 = 
°ªam_íåy_2
->
hód_ôî
,

462 
√xt_èû_ôî_2
 = 
°ªam_íåy_2
->
èû_ôî
;

464 i‡(
√xt_idx_1
 < 
tidx_1
)

465 
√xt_èû_ôî_1
 += 1;

467 i‡(
√xt_idx_2
 < 
tidx_2
)

468 
√xt_èû_ôî_2
 += 1;

473 
	`su•ísi⁄_¨øy_ovîÊow_check
(
°ªam_íåy_1
);

474 
	`su•ísi⁄_¨øy_ovîÊow_check
(
°ªam_íåy_2
);

477 
m≠pög_waô_íåy_t
 *
£¡ry1
 = &(
°ªam_íåy_1
->
su•ísi⁄_li°
[
√xt_idx_1
]);

478 
m≠pög_waô_íåy_t
 *
£¡ry2
 = &(
°ªam_íåy_2
->
su•ísi⁄_li°
[
√xt_idx_2
]);

479 
£¡ry1
->
∑ú_íåy_poöãr
 = 
NULL
;

480 
£¡ry2
->
∑ú_íåy_poöãr
 = 
NULL
;

483 i‡(
m≠∑bÀ_ˇ£
 == 1) {

485 
£¡ry1
->
ïoch_id
 = 
eid1
;

486 
£¡ry1
->
Õn
 = 
logiˇlSli˚Addr
;

487 
£¡ry1
->
µn
 = 
vútuÆSli˚Addr
;

488 
£¡ry1
->
vÆid
 = 1;

490 
£¡ry1
->
∑ú_°ªam_id
 = 
sid2
;

491 
£¡ry1
->
∑ú_ïoch_id
 = 
eid2
;

493 
£¡ry1
->
∑ú_exi°
 = (
sid2
 > 0)? 1: 0;

494 
£¡ry1
->
∑ú_íåy_poöãr
 = 
NULL
;

496 
°ªam_íåy_1
->
èû_idx
 = 
√xt_idx_1
;

497 
°ªam_íåy_1
->
èû_ôî
 = 
√xt_èû_ôî_1
;

502 
°ªam_íåy_1
->
su•íded_íåy_˙t
 += 1;

503 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 += 1;

504 
	`xû_¥ötf
("[INSERT] sid: %uÉid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

505 
sid1
, 
eid1
,

506 
°ªam_íåy_1
->
hód_ôî
, såóm_íåy_1->
hód_idx
,

507 
°ªam_íåy_1
->
èû_ôî
, såóm_íåy_1->
èû_idx
 );

509 } i‡(
m≠∑bÀ_ˇ£
 == 2) {

510 
£¡ry2
->
ïoch_id
 = 
eid2
;

511 
£¡ry2
->
Õn
 = 
logiˇlSli˚Addr
;

512 
£¡ry2
->
µn
 = 
vútuÆSli˚Addr
;

513 
£¡ry2
->
vÆid
 = 1;

515 
£¡ry2
->
∑ú_°ªam_id
 = 
sid1
;

516 
£¡ry2
->
∑ú_ïoch_id
 = 
eid1
;

517 
£¡ry2
->
∑ú_exi°
 = 1;

518 
£¡ry2
->
∑ú_íåy_poöãr
 = 
NULL
;

520 
°ªam_íåy_2
->
èû_idx
 = 
√xt_idx_2
;

521 
°ªam_íåy_2
->
èû_ôî
 = 
√xt_èû_ôî_2
;

525 
°ªam_íåy_2
->
su•íded_íåy_˙t
 += 1;

526 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 += 1;

527 
	`xû_¥ötf
("[INSERT] sid: %uÉid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

528 
sid2
, 
eid2
,

529 
°ªam_íåy_2
->
hód_ôî
, såóm_íåy_2->
hód_idx
,

530 
°ªam_íåy_2
->
èû_ôî
, såóm_íåy_2->
èû_idx
 );

532 } i‡(
m≠∑bÀ_ˇ£
 == 0) {

535 
£¡ry1
->
ïoch_id
 = 
eid1
;

536 
£¡ry1
->
Õn
 = 
logiˇlSli˚Addr
;

537 
£¡ry1
->
µn
 = 
vútuÆSli˚Addr
;

538 
£¡ry1
->
vÆid
 = 1;

539 
£¡ry1
->
∑ú_°ªam_id
 = 
sid2
;

540 
£¡ry1
->
∑ú_ïoch_id
 = 
eid2
;

544 
£¡ry1
->
∑ú_exi°
 = 1;

545 
£¡ry1
->
∑ú_íåy_poöãr
 = 
£¡ry2
;

547 
°ªam_íåy_1
->
èû_ôî
 = 
√xt_èû_ôî_1
;

548 
°ªam_íåy_1
->
èû_idx
 = 
√xt_idx_1
;

549 
	`xû_¥ötf
("[INSERT] sid: %uÉid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

550 
sid1
, 
eid1
,

551 
°ªam_íåy_1
->
hód_ôî
, såóm_íåy_1->
hód_idx
,

552 
°ªam_íåy_1
->
èû_ôî
, såóm_íåy_1->
èû_idx
 );

555 
£¡ry2
->
ïoch_id
 = 
eid2
;

556 
£¡ry2
->
Õn
 = 
logiˇlSli˚Addr
;

557 
£¡ry2
->
µn
 = 
vútuÆSli˚Addr
;

558 
£¡ry2
->
vÆid
 = 1;

559 
£¡ry2
->
∑ú_°ªam_id
 = 
sid1
;

560 
£¡ry2
->
∑ú_ïoch_id
 = 
eid1
;

564 
£¡ry2
->
∑ú_exi°
 = 1;

565 
£¡ry2
->
∑ú_íåy_poöãr
 = 
£¡ry1
;

567 
°ªam_íåy_2
->
èû_ôî
 = 
√xt_èû_ôî_2
;

568 
°ªam_íåy_2
->
èû_idx
 = 
√xt_idx_2
;

569 
	`xû_¥ötf
("[INSERT] sid: %uÉid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

570 
sid2
, 
eid2
,

571 
°ªam_íåy_2
->
hód_ôî
, såóm_íåy_2->
hód_idx
,

572 
°ªam_íåy_2
->
èû_ôî
, såóm_íåy_2->
èû_idx
 );

576 
°ªam_íåy_1
->
su•íded_íåy_˙t
 += 1;

577 
°ªam_íåy_2
->
su•íded_íåy_˙t
 += 1;

578 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 += 2;

580 
	`xû_¥ötf
("[JWDBG] %s: invÆidárg: m≠pög_ˇ£: %d\n", 
__func__
, 
m≠∑bÀ_ˇ£
);

581 
	`as£π
(0);

588 
	}
}

592 
uöt32_t
 
	$is_fú°_ïoch
(
uöt32_t
 
eid
, uöt32_à
œ°_eid
)

594  (
eid
 =0 && 
œ°_eid
 == 0)? 1: 0;

595 
	}
}

597 
uöt8_t
 
	$is_m≠∑bÀ
(
uöt32_t
 
sid
, uöt32_à
eid
)

599 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
(
sid
);

600 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

602 
uöt8_t
 
∑ss_ïoch_1_c‹√r_ˇ£
 = (
b_°ªam
->
fú°_ïoch_id
 =0 && 
eid
 == 1)?

603 (
b_°ªam
->
ïoch_zîo_d⁄e
) : 1;

604  ( (
∑ss_ïoch_1_c‹√r_ˇ£
 && (
b_°ªam
->
œ°_ïoch_id
 + 1 >
eid
))

605 || 
	`is_fú°_ïoch
(
eid
, 
b_°ªam
->
œ°_ïoch_id
));

607 
	}
}

609 
uöt8_t
 
	$∑ss_ïoch_⁄e_c‹√r_ˇ£
(
m≠pög_waô_íåy_t
* 
£¡ry
, 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
)

611 i‡(
b_°ªam
->
fú°_ïoch_id
 =0 && 
£¡ry
->
ïoch_id
 == 1){

612  (
b_°ªam
->
ïoch_zîo_d⁄e
);

616 
	}
}

619 
uöt32_t
 
	$∑ú_is_m≠∑bÀ
(
m≠pög_waô_íåy_t
* 
£¡ry
)

621 
uöt32_t
 
sid
 = 
£¡ry
->
∑ú_°ªam_id
;

622 
uöt32_t
 
eid
 = 
£¡ry
->
∑ú_ïoch_id
;

623 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
 (
sid
);

624 
b¨rõr_°ªam_íåy_t
* 
b_°ªam
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

625 i‡–(
	`∑ss_ïoch_⁄e_c‹√r_ˇ£
(
£¡ry
, 
b_°ªam
Ë&& b_°ªam->
œ°_ïoch_id
 + 1 >
eid
)

626 || 
	`is_fú°_ïoch
(
eid
, 
b_°ªam
->
œ°_ïoch_id
))

628 i‡(
b_°ªam
->
œ°_ïoch_id
 + 1 < 
eid
)

638 
	}
}

640 
	$upd©e_ïoch_öfo_∑ú
(
m≠pög_waô_íåy_t
* 
£¡ry
)

642 
uöt32_t
 
sid
 = 
£¡ry
->
∑ú_°ªam_id
;

643 
uöt32_t
 
eid
 = 
£¡ry
->
∑ú_ïoch_id
;

645 
	`upd©e_ïoch_öfo
(
sid
, 
eid
, 
__func__
);

646 
	}
}

648 
	$ªmove_su•ísi⁄_íåy
(
uöt32_t
 
sid
, 
m≠pög_waô_íåy_t
* 
£¡ry
)

650 
uöt32_t
 
sidx
 = 
	`gë_°ªam_ödex
(
sid
);

651 
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

653 
°ªam_íåy
->
su•íded_íåy_˙t
 -= 1;

654 
	`as£π
(
°ªam_íåy
->
su•íded_íåy_˙t
 >= 0);

655 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 -= 1;

656 
	`as£π
(
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 >= 0);

658 
£¡ry
->
vÆid
 = 0;

659 
£¡ry
->
ïoch_id
 = 0;

660 
£¡ry
->
Õn
 = 0;

661 
£¡ry
->
µn
 = 0;

662 
£¡ry
->
∑ú_°ªam_id
 = 0;

663 
£¡ry
->
∑ú_ïoch_id
 = 0;

664 
£¡ry
->
∑ú_exi°
 = 0;

665 
£¡ry
->
∑ú_íåy_poöãr
 = 
NULL
;

666 
	}
}

668 
	$m≠_su•íded_íåy
(
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy
, 
uöt32_t
 
hidx
)

670 
m≠pög_waô_íåy_t
* 
£¡ry
;

671 
i
, 
ii
, 
m≠≥d
 = 0;

672 
uöt8_t
 
is_fú°
 = 1;

673 
fú°_unm≠≥d_vÆid_idx
 = -1;

674 
uöt32_t
 
cur_eidx
;

675 
i
 = 0; i < 
N_SUSPENSION
; i += 1){

676 
ii
 = (
i
 + 
hidx
Ë% 
N_SUSPENSION
;

677 
£¡ry
 = &
°ªam_íåy
->
su•ísi⁄_li°
[
ii
];

678 
	`¥ötf
("%s: sid: %uÉid: %u idx: %u\n", 
__func__
, 
°ªam_íåy
->
°ªam_id
,

679 
£¡ry
->
ïoch_id
, 
ii
);

680 i‡(
£¡ry
->
vÆid
==0){

681 
	`¥ötf
("övÆid idx: %u\n", 
ii
);

687 i‡–
	`is_fú°_ïoch
(
£¡ry
->
ïoch_id
, 
°ªam_íåy
->
œ°_ïoch_id
)

688 || (
	`∑ss_ïoch_⁄e_c‹√r_ˇ£
(
£¡ry
, 
°ªam_íåy
Ë&& síåy->
ïoch_id
 <°ªam_íåy->
œ°_ïoch_id
 + 1) ) {

689 i‡(
£¡ry
->
∑ú_exi°
) {

692 i‡(
	`∑ú_is_m≠∑bÀ
(
£¡ry
)){

693 
	`upd©e_ïoch_öfo_∑ú
(
£¡ry
);

695 i‡(
£¡ry
->
∑ú_íåy_poöãr
 !
NULL
)

696 
	`ªmove_su•ísi⁄_íåy
(
£¡ry
->
∑ú_°ªam_id
, síåy->
∑ú_íåy_poöãr
);

697 
UPDATE_MAP_
;

700 i‡(
is_fú°
){

701 
fú°_unm≠≥d_vÆid_idx
 = 
ii
;

702 
is_fú°
 = 0;

705 
	`¥ötf
("unm≠≥d ca£ 1 sid: %uÉid: %u idx: %u\n", 
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
ii
);

708 
UPDATE_MAP_
:

710 
	`Upd©eAddrWrôe
(
£¡ry
->
Õn
, síåy->
µn
);

712 
	`upd©e_ïoch_öfo
(
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
__func__
);

714 
cur_eidx
 = 
	`gë_ïoch_ödex
 (
£¡ry
->
ïoch_id
);

723 i‡–
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
num_upd©ed_∑ges
 > såóm_íåy->ïoch_li°[cur_eidx].
num_tŸÆ_∑ges
) {

724 
	`as£π
(0);

728 i‡((
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
num_upd©ed_∑ges
 =°ªam_íåy->ïoch_li°[cur_eidx].
num_tŸÆ_∑ges
) &&

729 –
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
°©e
 =
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
 )) {

730 
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
°©e
 = 
EPOCH_STATE_CLOSED_DURABLE_MAPPED
;

733 
	`xû_¥ötf
("[REMOVE] sid: %uÉid: %u idx: %u\n", 
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
ii
);

734 
	`ªmove_su•ísi⁄_íåy
(
°ªam_íåy
->
°ªam_id
, 
£¡ry
);

735 
m≠≥d
 = 1;

741 
	`¥ötf
("unm≠≥d ca£ 2 sid: %uÉid: %u idx: %u\n",
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
ii
);

742 i‡(
is_fú°
){

743 
fú°_unm≠≥d_vÆid_idx
 = 
ii
;

744 
is_fú°
 = 0;

748 i‡(
m≠≥d
 == 0)

750 
√xt_hidx
;

751 i‡(
fú°_unm≠≥d_vÆid_idx
 != -1){

752 
√xt_hidx
 = 
fú°_unm≠≥d_vÆid_idx
;

753 
	`¥ötf
("ud∑ã_√xtidx sid: %uÉid: %uÇxtidx: %u\n",
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
√xt_hidx
);

755 
√xt_hidx
 = (
°ªam_íåy
->
hód_idx
 + 1Ë% 
N_SUSPENSION
;

756 
	`xû_¥ötf
("[MAP_SUS] sid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

757 
°ªam_íåy
->
°ªam_id
,

758 
°ªam_íåy
->
hód_ôî
, såóm_íåy->
hód_idx
,

759 
°ªam_íåy
->
èû_ôî
, såóm_íåy->
èû_idx
 );

761 i‡(
°ªam_íåy
->
hód_idx
 > 
√xt_hidx
)

762 
°ªam_íåy
->
hód_ôî
 += 1;

763 
°ªam_íåy
->
hód_idx
 = 
√xt_hidx
;

765 
	}
}

777 
	$b¨rõr_£¨ch_su•ísi⁄_li°_duÆ_°ªam
 () {

779 
cur_eidx
;

784 i‡(
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 == 0){

789 
uöt32_t
 
sidx
 = 0; sidx < 
N_STREAM
 && 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 > 0 ; sidx++) {

791 
b¨rõr_°ªam_íåy_t
* 
°ªam_íåy
 = &
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
];

792 i‡(
°ªam_íåy
->
°ªam_id
 > 0 && såóm_íåy->
su•íded_íåy_˙t
) {

794 
uöt32_t
 
hidx
 = 
°ªam_íåy
->
hód_idx
,

795 
tidx
 = 
°ªam_íåy
->
èû_idx
;

796 
hôî
 = 
°ªam_íåy
->
hód_ôî
,

797 
tôî
 = 
°ªam_íåy
->
èû_ôî
;

800 
	`su•ísi⁄_¨øy_ovîÊow_check
(
°ªam_íåy
);

804 
uöt32_t
 
vÀn
 = (
hidx
 <
tidx
)?Åidx - hidx + 1: 
N_SUSPENSION
 - (hidx -Åidx - 1);

805 
uöt32_t
 
i
, 
dñè
;

806 
fú°_unm≠≥d_vÆid_idx
 = -1;

807 
uöt8_t
 
is_fú°
 = 1;

808  
dñè
 = 0; dñè < 
vÀn
 && 
°ªam_íåy
->
su•íded_íåy_˙t
 > 0 ; delta++) {

809 
i
 = (
hidx
 + 
dñè
Ë% 
N_SUSPENSION
;

811 
m≠pög_waô_íåy_t
* 
£¡ry
 = &(
°ªam_íåy
->
su•ísi⁄_li°
[
i
]);

812 i‡(
£¡ry
->
vÆid
 == 0)

816 i‡–
	`is_fú°_ïoch
(
£¡ry
->
ïoch_id
, 
°ªam_íåy
->
œ°_ïoch_id
)

817 || (
	`∑ss_ïoch_⁄e_c‹√r_ˇ£
(
£¡ry
, 
°ªam_íåy
Ë&& síåy->
ïoch_id
 <°ªam_íåy->
œ°_ïoch_id
 + 1) ) {

818 i‡(
£¡ry
->
∑ú_exi°
) {

821 i‡(
	`∑ú_is_m≠∑bÀ
(
£¡ry
)){

822 
	`upd©e_ïoch_öfo_∑ú
(
£¡ry
);

824 i‡(
£¡ry
->
∑ú_íåy_poöãr
 !
NULL
)

825 
	`ªmove_su•ísi⁄_íåy
(
£¡ry
->
∑ú_°ªam_id
, síåy->
∑ú_íåy_poöãr
);

826 
UPDATE_MAP
;

829 i‡(
is_fú°
){

830 
fú°_unm≠≥d_vÆid_idx
 = 
i
;

831 
is_fú°
 = 0;

835 
UPDATE_MAP
:

837 
	`Upd©eAddrWrôe
(
£¡ry
->
Õn
, síåy->
µn
);

839 
	`upd©e_ïoch_öfo
(
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
__func__
);

841 
cur_eidx
 = 
	`gë_ïoch_ödex
 (
£¡ry
->
ïoch_id
);

844 i‡(
fú°_unm≠≥d_vÆid_idx
 =
i
){

845 
is_fú°
 = 1;

846 
fú°_unm≠≥d_vÆid_idx
 = -1;

854 i‡–
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
num_upd©ed_∑ges
 > såóm_íåy->ïoch_li°[cur_eidx].
num_tŸÆ_∑ges
) {

859 
	`as£π
(0);

863 i‡((
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
num_upd©ed_∑ges
 =°ªam_íåy->ïoch_li°[cur_eidx].
num_tŸÆ_∑ges
) &&

864 –
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
°©e
 =
EPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
 )) {

865 
°ªam_íåy
->
ïoch_li°
[
cur_eidx
].
°©e
 = 
EPOCH_STATE_CLOSED_DURABLE_MAPPED
;

878 
	`xû_¥ötf
("[REMOVE] sid: %uÉid: %u idx: %u\n", 
°ªam_íåy
->
°ªam_id
, 
£¡ry
->
ïoch_id
, 
i
);

879 
	`ªmove_su•ísi⁄_íåy
(
°ªam_íåy
->
°ªam_id
, 
£¡ry
);

895 i‡(
is_fú°
){

896 
fú°_unm≠≥d_vÆid_idx
 = 
i
;

897 
is_fú°
 = 0;

901 i‡(
fú°_unm≠≥d_vÆid_idx
 == -1){

903 
°ªam_íåy
->
hód_idx
 = 0;

904 
°ªam_íåy
->
èû_idx
 = 0;

905 
°ªam_íåy
->
hód_ôî
 = 0;

906 
°ªam_íåy
->
èû_ôî
 = 0;

907 
	`xû_¥ötf
("[MAPPED ALL] sid %u i¿%s\n", 
°ªam_íåy
->
°ªam_id
, 
__func__
);

909 i‡(
°ªam_íåy
->
hód_idx
 > 
fú°_unm≠≥d_vÆid_idx
)

910 
°ªam_íåy
->
hód_ôî
 += 1;

911 
°ªam_íåy
->
hód_idx
 = 
fú°_unm≠≥d_vÆid_idx
;

912 
	`xû_¥ötf
("[SEARCH] sid: %u hiter: %u hidx: %uÅiter: %uÅidx: %u \n",

913 
°ªam_íåy
->
°ªam_id
,

914 
°ªam_íåy
->
hód_ôî
, såóm_íåy->
hód_idx
,

915 
°ªam_íåy
->
èû_ôî
, såóm_íåy->
èû_idx
 );

921 
	}
}

923 
	$b¨rõr_öô
()

925 
	`xû_¥ötf
("[ Barrier init Start. ]\r\n");

926 
	`mem£t
((*)&
g_b¨rõrC⁄ãxt
, 0x00, (
b¨rõr_c⁄ãxt_t
));

927 
g_b¨rõrC⁄ãxt
.
g_su•íded_íåy_˙t
 = 0;

928 
uöt32_t
 
sidx
 = 0; sidx < 
N_STREAM
; sidx++)

930 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
is_fú°
 = 1;

931 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
fú°_ïoch_id
 = 0;

932 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
°ªam_id
 = 0;

933 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
vÆid_Àngth
 = 0;

934 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
œ°_ïoch_id
 = 0;

935 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_zîo_d⁄e
 = 0;

936 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
hód_idx
 = 0;

937 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
èû_idx
 = 0;

938 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
hód_ôî
 = 0;

939 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
èû_ôî
 = 0;

940 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•íded_íåy_˙t
 = 0;

942 
uöt32_t
 
eidx
 = 0;Éidx < 
N_EPOCH
;Éidx++)

945 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
eidx
].
°©e
 = 
EPOCH_STATE_NONE
;

946 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
eidx
].
ïoch_id
 = 0;

947 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
eidx
].
num_tŸÆ_∑ges
 = 0;

948 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
eidx
].
num_upd©ed_∑ges
 = 0;

949 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
ïoch_li°
[
eidx
].
num_duøbÀ_∑ges
 = 0;

952 
uöt32_t
 
i
 = 0; i < 
N_SUSPENSION
; i++) {

953 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
vÆid
 = 0;

954 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
Õn
 = 0;

955 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
µn
 = 0;

956 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
ïoch_id
 = 0;

957 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
∑ú_ïoch_id
 = 0;

958 
g_b¨rõrC⁄ãxt
.
°ªam
[
sidx
].
su•ísi⁄_li°
[
i
].
∑ú_°ªam_id
 = 0;

962 
	}
}

	@ftl/barrier_ftl.h

8 #i‚de‡
_BARRIER_FTL_H_


9 
	#_BARRIER_FTL_H_


	)

18 
	eïoch_°©e


20 
	mEPOCH_STATE_NONE
,

21 
	mEPOCH_STATE_ACTIVE_TRANSIENT_UNMAPPED
,

22 
	mEPOCH_STATE_CLOSED_TRANSIENT_UNMAPPED
,

23 
	mEPOCH_STATE_CLOSED_DURABLE_UNMAPPED
,

24 
	mEPOCH_STATE_CLOSED_DURABLE_MAPPED
,

25 } 
	tïoch_°©e_t
;

49 
	#N_STREAM
 128

	)

50 
	#N_EPOCH
 256

	)

52 
	#N_SUSPENSION
 2048

	)

55 
	#INVALID_EPOCH_ID
 (0xFFFF)

	)

56 
	#INVALID_STREAM_ID
 (0)

	)

58 
	#INVALID_NUM_PAGES
 (0xFFFFFFFF)

	)

60 
	s_m≠pög_waô_íåy


62 
	mvÆid
;

63 
	mÕn
;

64 
	mµn
;

65 
	mïoch_id
;

66 
	m∑ú_°ªam_id
;

67 
	m∑ú_ïoch_id
;

68 
uöt8_t
 
	m∑ú_exi°
;

69 * 
	m∑ú_íåy_poöãr
;

70 } 
	tm≠pög_waô_íåy_t
;

72 
	s_ïoch_íåy


74 
ïoch_°©e_t
 
	m°©e
;

75 
	mïoch_id
;

76 
	mnum_tŸÆ_∑ges
;

77 
	mnum_upd©ed_∑ges
;

78 
	mnum_duøbÀ_∑ges
;

79 } 
	tïoch_íåy_t
;

81 
	s_b¨rõr_°ªam_íåy


83 
uöt8_t
 
	mis_fú°
;

84 
uöt8_t
 
	mïoch_zîo_d⁄e
;

85 
	mfú°_ïoch_id
;

86 
	m°ªam_id
;

87 
	mvÆid_Àngth
;

88 
	mœ°_ïoch_id
;

89 
	mhód_idx
;

90 
	mèû_idx
;

91 
	mhód_ôî
;

92 
	mèû_ôî
;

93 
	mïoch_˙t
;

94 
	msu•íded_íåy_˙t
;

95 
m≠pög_waô_íåy_t
 
	msu•ísi⁄_li°
[
N_SUSPENSION
];

96 
ïoch_íåy_t
 
	mïoch_li°
[
N_EPOCH
];

98 } 
	tb¨rõr_°ªam_íåy_t
;

100 
	s_b¨rõr_c⁄ãxt


102 
uöt32_t
 
	mvÆid_°ªam_cou¡
;

103 
uöt32_t
 
	mvÆid_°ªam_bôm≠
[
N_STREAM
/32];

104 
b¨rõr_°ªam_íåy_t
 
	m°ªam
[
N_STREAM
];

105 
uöt32_t
 
	mg_su•íded_íåy_˙t
;

106 } 
	tb¨rõr_c⁄ãxt_t
;

117 
uöt32_t
 
gë_°ªam_ödex
 (
sid
);

118 
uöt32_t
 
gë_ïoch_ödex
 (
eid
);

119 
ïoch_°©e
 
b¨rõr_check_™d_£t_ïoch_°©e
 (
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
, 
∑ge_˙t
);

120 
b¨rõr_£t_ïoch_°©e
 (
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
, 
∑ge_˙t
);

121 
ïoch_°©e
 
b¨rõr_check_¥ev_ïoch_°©e
(
uöt32_t
 
sid
, uöt32_à
eid
);

122 
b¨rõr_ö¸ó£_tŸÆ_∑ge_cou¡
 (
sid
, 
eid
, 
∑ge_˙t
);

123 
b¨rõr_check_tŸÆ_∑ge_cou¡
 (
sid
, 
eid
);

124 
b¨rõr_ö¸ó£_duøbÀ_∑ge_cou¡
(
sid
, 
eid
, 
∑ge_˙t
);

127 
b¨rõr_ö£π_su•ísi⁄_¨øy
(
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid
, 
eid
);

128 
b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 
m≠∑bÀ_ˇ£
);

129 
b¨rõr_£¨ch_su•ísi⁄_li°
();

130 
b¨rõr_£¨ch_su•ísi⁄_li°_duÆ_°ªam
();

132 
b¨rõr_upd©e_doubÀ_°ªam
(
uöt32_t
 
sid1
, uöt32_à
eid1
, uöt32_à
sid2
, uöt32_à
eid2
);

133 
b¨rõr_add_ïoch_íåy
(
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
);

134 
b¨rõr_add_ïoch_íåy2
(
uöt32_t
 
sid
, uöt32_à
eid
, uöt32_à
b¨rõr
);

135 
uöt32_t
 
b¨rõr_p›_ïoch_íåy
(uöt32_à
sidx
);

136 
uöt32_t
 
b¨rõr_p›_ïoch_íåy2
(uöt32_à
sidx
);

137 
ïoch_°©e
 
b¨rõr_gë_¥ev_ïoch_°©e
(
sid
, 
eid
);

138 
b¨rõr_Êush_›î©i⁄
();

139 
b¨rõr_add_∑ge_cou¡
(
sid
, 
eid
, 
∑ge_˙t
);

140 
b¨rõr_ö¸ó£_duøbÀ_cou¡
(
sid
, 
eid
);

141 
b¨rõr_öô
();

144 
upd©e_ïoch_öfo
(
uöt32_t
 
sid
, uöt32_à
eid
, * 
func
);

145 
uöt8_t
 
is_m≠∑bÀ
(
uöt32_t
 
sid
, uöt32_à
eid
);

	@ftl/ftl_config.c

50 
	~<as£π.h
>

51 
	~"xtime_l.h
"

52 
	~"xû_¥ötf.h
"

53 
	~"../mem‹y_m≠.h
"

55 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

56 
	~"b¨rõr_·l.h
"

59 
	g°‹ageC≠acôy_L
;

61 
·l_c⁄ãxt
 
	gg_·l_c⁄ãxt
;

63 
	$_öô_·l_c⁄ãxt
()

65 
	`mem£t
((*)&
g_·l_c⁄ãxt
, 0x00, (
·l_c⁄ãxt
));

67 
	`XTime_GëTime
(&
g_·l_c⁄ãxt
.
°¨t_tick_öã∫Æ_Êush
);

68 
	}
}

70 
	$_check_·l_c⁄fig_ª°ri˘i⁄
()

72 
	`°©ic_as£π
((
USER_CHANNELS
 <
NSC_MAX_CHANNELS
), "[WARNING] Configuration Error: Channel [WARNING]");

73 
	`°©ic_as£π
((
USER_WAYS
 <
NSC_MAX_WAYS
), "[WARNING] Configuration Error: Way [WARNING]");

74 
	`°©ic_as£π
((
USER_BLOCKS_PER_LUN
 <
MAIN_BLOCKS_PER_LUN
), "[WARNING] Configuration Error: Block [WARNING]");

75 
	`°©ic_as£π
((
BITS_PER_FLASH_CELL
 =
SLC_MODE
), "[WARNING] Configuration Error: BIT_PER_FLASH_CELL [WARNING]");

77 
	`°©ic_as£π
((
RESERVED_DATA_BUFFER_BASE_ADDR
 + 0x00200000 <
COMPLETE_FLAG_TABLE_ADDR
),

79 
	`°©ic_as£π
((
TEMPORARY_PAY_LOAD_ADDR
 + 0x00001000 <
DATA_BUFFER_MAP_ADDR
),

81 
	`°©ic_as£π
((
FTL_MANAGEMENT_END_ADDR
 <
DRAM_END_ADDR
),

83 
	}
}

85 
	$_¥o˚ss_öã∫Æ_Êush
()

87 
	`XTime_GëTime
(&
g_·l_c⁄ãxt
.
íd_tick_öã∫Æ_Êush
);

89 
ñ≠£d_time_ms
 = 
	`GET_TIME_MS
(
g_·l_c⁄ãxt
.
°¨t_tick_öã∫Æ_Êush
, g_·l_c⁄ãxt.
íd_tick_öã∫Æ_Êush
);

91 i‡(
INTERNAL_FLUSH_PERIOD_MS
 <
ñ≠£d_time_ms
)

102 
	`XTime_GëTime
(&
g_·l_c⁄ãxt
.
°¨t_tick_öã∫Æ_Êush
);

104 
ñ≠£d_time_ms
 = 
	`GET_TIME_MS
(
g_·l_c⁄ãxt
.
íd_tick_öã∫Æ_Êush
, g_ftl_context.end_tick_internal_flush);

106 i‡(
ñ≠£d_time_ms
 > 1)

108 
	`xû_¥ötf
("öã∫Æ flush d⁄ê(%Œu)\r\n", 
ñ≠£d_time_ms
);

111 
	}
}

113 
	$·l_öô
()

115 
	`_check_·l_c⁄fig_ª°ri˘i⁄
();

117 
	`_öô_·l_c⁄ãxt
();

119 
	`InôAddªssM≠
();

121 
	`G¨bageCﬁÀ˘i⁄_Inô
();

123 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

124 
	`b¨rõr_öô
();

127 
°‹ageC≠acôy_L
 = (
MB_PER_SSD
 - (
MB_PER_MIN_FREE_BLOCK_SPACE
 + 
mbPîbadBlockS∑˚
 + 
MB_PER_OVER_PROVISION_BLOCK_SPACE
)Ë* ((1024*1024Ë/ 
BYTES_PER_NVME_BLOCK
);

129 
	`xû_¥ötf
("[ st‹agêˇ∑côy %d MB ]\r\n", 
°‹ageC≠acôy_L
 / ((1024*1024Ë/ 
BYTES_PER_NVME_BLOCK
));

130 
	`xû_¥ötf
("[ ftl configuration complete. ]\r\n");

131 
	}
}

133 
	$·l_èsk_run
()

138 
	`_¥o˚ss_öã∫Æ_Êush
();

141 
	}
}

	@ftl/ftl_config.h

47 #i‚de‡
FTL_CONFIG_H_


48 
	#FTL_CONFIG_H_


	)

50 
	~"xtime_l.h
"

51 
	~"../Êash/nsc_drivî.h
"

52 
	~"x∑ømëîs.h
"

54 
	~"../ho°/nvme/nvme.h
"

58 #ifdef 
XPAR_T4NFC_HLPER_7_BASEADDR


59 
	#NSC_7_CONNECTED
 1

	)

60 
	#NSC_7_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_7_S_AXI_BASEADDR


	)

61 
	#NSC_7_BASEADDR
 
XPAR_T4NFC_HLPER_7_BASEADDR


	)

63 
	#NSC_7_CONNECTED
 0

	)

64 
	#NSC_7_UCODEADDR
 0

	)

65 
	#NSC_7_BASEADDR
 0

	)

67 #ifdef 
XPAR_T4NFC_HLPER_6_BASEADDR


68 
	#NSC_6_CONNECTED
 1

	)

69 
	#NSC_6_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_6_S_AXI_BASEADDR


	)

70 
	#NSC_6_BASEADDR
 
XPAR_T4NFC_HLPER_6_BASEADDR


	)

72 
	#NSC_6_CONNECTED
 0

	)

73 
	#NSC_6_UCODEADDR
 0

	)

74 
	#NSC_6_BASEADDR
 0

	)

76 #ifdef 
XPAR_T4NFC_HLPER_5_BASEADDR


77 
	#NSC_5_CONNECTED
 1

	)

78 
	#NSC_5_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_5_S_AXI_BASEADDR


	)

79 
	#NSC_5_BASEADDR
 
XPAR_T4NFC_HLPER_5_BASEADDR


	)

81 
	#NSC_5_CONNECTED
 0

	)

82 
	#NSC_5_UCODEADDR
 0

	)

83 
	#NSC_5_BASEADDR
 0

	)

85 #ifdef 
XPAR_T4NFC_HLPER_4_BASEADDR


86 
	#NSC_4_CONNECTED
 1

	)

87 
	#NSC_4_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_4_S_AXI_BASEADDR


	)

88 
	#NSC_4_BASEADDR
 
XPAR_T4NFC_HLPER_4_BASEADDR


	)

90 
	#NSC_4_CONNECTED
 0

	)

91 
	#NSC_4_UCODEADDR
 0

	)

92 
	#NSC_4_BASEADDR
 0

	)

94 #ifdef 
XPAR_T4NFC_HLPER_3_BASEADDR


95 
	#NSC_3_CONNECTED
 1

	)

96 
	#NSC_3_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_3_S_AXI_BASEADDR


	)

97 
	#NSC_3_BASEADDR
 
XPAR_T4NFC_HLPER_3_BASEADDR


	)

99 
	#NSC_3_CONNECTED
 0

	)

100 
	#NSC_3_UCODEADDR
 0

	)

101 
	#NSC_3_BASEADDR
 0

	)

103 #ifdef 
XPAR_T4NFC_HLPER_2_BASEADDR


104 
	#NSC_2_CONNECTED
 1

	)

105 
	#NSC_2_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_2_S_AXI_BASEADDR


	)

106 
	#NSC_2_BASEADDR
 
XPAR_T4NFC_HLPER_2_BASEADDR


	)

108 
	#NSC_2_CONNECTED
 0

	)

109 
	#NSC_2_UCODEADDR
 0

	)

110 
	#NSC_2_BASEADDR
 0

	)

112 #ifdef 
XPAR_T4NFC_HLPER_1_BASEADDR


113 
	#NSC_1_CONNECTED
 1

	)

114 
	#NSC_1_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR


	)

115 
	#NSC_1_BASEADDR
 
XPAR_T4NFC_HLPER_1_BASEADDR


	)

117 
	#NSC_1_CONNECTED
 0

	)

118 
	#NSC_1_UCODEADDR
 0

	)

119 
	#NSC_1_BASEADDR
 0

	)

121 #ifdef 
XPAR_T4NFC_HLPER_0_BASEADDR


122 
	#NSC_0_CONNECTED
 1

	)

123 
	#NSC_0_UCODEADDR
 
XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR


	)

124 
	#NSC_0_BASEADDR
 
XPAR_T4NFC_HLPER_0_BASEADDR


	)

126 
	#NSC_0_CONNECTED
 0

	)

127 
	#NSC_0_UCODEADDR
 0

	)

128 
	#NSC_0_BASEADDR
 0

	)

132 
	#NUMBER_OF_CONNECTED_CHANNEL
 (
NSC_7_CONNECTED
 + 
NSC_6_CONNECTED
 + 
NSC_5_CONNECTED
 + 
NSC_4_CONNECTED
 + 
NSC_3_CONNECTED
 + 
NSC_2_CONNECTED
 + 
NSC_1_CONNECTED
 + 
NSC_0_CONNECTED
)

	)

138 
	#BYTES_PER_DATA_REGION_OF_NAND_ROW
 16384

	)

139 
	#BYTES_PER_SPARE_REGION_OF_NAND_ROW
 1664

	)

140 
	#BYTES_PER_NAND_ROW
 (
BYTES_PER_DATA_REGION_OF_NAND_ROW
 + 
BYTES_PER_SPARE_REGION_OF_NAND_ROW
)

	)

142 
	#ROWS_PER_SLC_BLOCK
 256

	)

143 
	#ROWS_PER_MLC_BLOCK
 256

	)

145 
	#MAIN_BLOCKS_PER_LUN
 5464

146 
	#EXTENDED_BLOCKS_PER_LUN
 452

147 
	#TOTAL_BLOCKS_PER_LUN
 (
MAIN_BLOCKS_PER_LUN
 + 
EXTENDED_BLOCKS_PER_LUN
)

	)

149 
	#MAIN_ROWS_PER_SLC_LUN
 (
ROWS_PER_SLC_BLOCK
 * 
MAIN_BLOCKS_PER_LUN
)

	)

150 
	#MAIN_ROWS_PER_MLC_LUN
 (
ROWS_PER_MLC_BLOCK
 * 
MAIN_BLOCKS_PER_LUN
)

	)

152 
	#LUNS_PER_DIE
 1

	)

154 
	#MAIN_BLOCKS_PER_DIE
 (
MAIN_BLOCKS_PER_LUN
 * 
LUNS_PER_DIE
)

	)

155 
	#TOTAL_BLOCKS_PER_DIE
 (
TOTAL_BLOCKS_PER_LUN
 * 
LUNS_PER_DIE
)

	)

157 
	#BAD_BLOCK_MARK_PAGE0
 0

158 
	#BAD_BLOCK_MARK_PAGE1
 (
ROWS_PER_MLC_BLOCK
 - 1)

159 
	#BAD_BLOCK_MARK_BYTE0
 0

160 
	#BAD_BLOCK_MARK_BYTE1
 (
BYTES_PER_DATA_REGION_OF_NAND_ROW
)

161 

	)

170 
	#NSC_MAX_CHANNELS
 (
NUMBER_OF_CONNECTED_CHANNEL
)

	)

171 
	#NSC_MAX_WAYS
 8

	)

174 
	#BYTES_PER_DATA_REGION_OF_PAGE
 16384

	)

175 
	#BYTES_PER_SPARE_REGION_OF_PAGE
 256

	)

177 
	#PAGES_PER_SLC_BLOCK
 (
ROWS_PER_SLC_BLOCK
)

	)

178 
	#PAGES_PER_MLC_BLOCK
 (
ROWS_PER_MLC_BLOCK
)

	)

181 
	#ECC_CHUNKS_PER_PAGE
 32

	)

182 
	#BIT_ERROR_THRESHOLD_PER_CHUNK
 24

	)

183 
	#ERROR_INFO_WORD_COUNT
 11

	)

190 
	#BYTES_PER_NVME_BLOCK
 4096

	)

191 
	#NVME_BLOCKS_PER_PAGE
 (
BYTES_PER_DATA_REGION_OF_PAGE
 / 
BYTES_PER_NVME_BLOCK
)

	)

199 
	#SLC_MODE
 1

	)

200 
	#MLC_MODE
 2

	)

203 
	#BITS_PER_FLASH_CELL
 
SLC_MODE


204 
	#USER_BLOCKS_PER_LUN
 4096

205 
	#USER_CHANNELS
 (
NUMBER_OF_CONNECTED_CHANNEL
)

206 
	#USER_WAYS
 8

208 

	)

209 
	#BYTES_PER_DATA_REGION_OF_SLICE
 16384

210 
	#BYTES_PER_SPARE_REGION_OF_SLICE
 256

	)

212 
	#SLICES_PER_PAGE
 (
BYTES_PER_DATA_REGION_OF_PAGE
 / 
BYTES_PER_DATA_REGION_OF_SLICE
)

213 
	#NVME_BLOCKS_PER_SLICE
 (
BYTES_PER_DATA_REGION_OF_SLICE
 / 
BYTES_PER_NVME_BLOCK
)

	)

215 
	#USER_DIES
 (
USER_CHANNELS
 * 
USER_WAYS
)

	)

217 
	#USER_PAGES_PER_BLOCK
 (
PAGES_PER_SLC_BLOCK
 * 
BITS_PER_FLASH_CELL
)

	)

218 
	#USER_PAGES_PER_LUN
 (
USER_PAGES_PER_BLOCK
 * 
USER_BLOCKS_PER_LUN
)

	)

219 
	#USER_PAGES_PER_DIE
 (
USER_PAGES_PER_LUN
 * 
LUNS_PER_DIE
)

	)

220 
	#USER_PAGES_PER_CHANNEL
 (
USER_PAGES_PER_DIE
 * 
USER_WAYS
)

	)

221 
	#USER_PAGES_PER_SSD
 (
USER_PAGES_PER_CHANNEL
 * 
USER_CHANNELS
)

	)

223 
	#SLICES_PER_BLOCK
 (
USER_PAGES_PER_BLOCK
 * 
SLICES_PER_PAGE
)

	)

224 
	#SLICES_PER_LUN
 (
USER_PAGES_PER_LUN
 * 
SLICES_PER_PAGE
)

	)

225 
	#SLICES_PER_DIE
 (
USER_PAGES_PER_DIE
 * 
SLICES_PER_PAGE
)

	)

226 
	#SLICES_PER_CHANNEL
 (
USER_PAGES_PER_CHANNEL
 * 
SLICES_PER_PAGE
)

	)

227 
	#SLICES_PER_SSD
 (
USER_PAGES_PER_SSD
 * 
SLICES_PER_PAGE
)

	)

229 
	#USER_BLOCKS_PER_DIE
 (
USER_BLOCKS_PER_LUN
 * 
LUNS_PER_DIE
)

	)

230 
	#USER_BLOCKS_PER_CHANNEL
 (
USER_BLOCKS_PER_DIE
 * 
USER_WAYS
)

	)

231 
	#USER_BLOCKS_PER_SSD
 (
USER_BLOCKS_PER_CHANNEL
 * 
USER_CHANNELS
)

	)

233 
	#MB_PER_BLOCK
 ((
BYTES_PER_DATA_REGION_OF_SLICE
 * 
SLICES_PER_BLOCK
Ë/ (1024 * 1024))

	)

234 
	#MB_PER_SSD
 (
USER_BLOCKS_PER_SSD
 * 
MB_PER_BLOCK
)

	)

235 
	#MB_PER_MIN_FREE_BLOCK_SPACE
 (
USER_DIES
 * 
MB_PER_BLOCK
)

	)

236 
	#MB_PER_METADATA_BLOCK_SPACE
 (
USER_DIES
 * 
MB_PER_BLOCK
)

	)

237 
	#MB_PER_OVER_PROVISION_BLOCK_SPACE
 ((
USER_BLOCKS_PER_SSD
 / 10Ë* 
MB_PER_BLOCK
)

	)

239 
	#INTERNAL_FLUSH_PERIOD_MS
 (1000)

240 

	)

241 
	#GET_TIME_MS
(
°¨t
, 
íd
Ë(1000*”nd-°¨t)/
COUNTS_PER_SECOND
)

	)

244 
	s_·l_c⁄ãxt


246 
XTime
 
	m°¨t_tick_öã∫Æ_Êush
;

247 
XTime
 
	míd_tick_öã∫Æ_Êush
;

248 } 
	t·l_c⁄ãxt
;

250 
·l_öô
();

251 
·l_èsk_run
();

253 
°‹ageC≠acôy_L
;

254 
T4REGS
 
chCéReg
[
USER_CHANNELS
];

	@ftl/garbage_collection.c

48 
	~"xû_¥ötf.h
"

49 
	~<as£π.h
>

50 
	~"../mem‹y_m≠.h
"

52 
P_GC_VICTIM_MAP
 
	g•_GCVimtimBlockM≠
 = (P_GC_VICTIM_MAPË
GC_VICTIM_MAP_ADDR
;

54 
	$_GëVi˘imBlock
(
dõNo
)

56 
evi˘edBlockNo
;

57 
övÆidSli˚C¡
;

59 
övÆidSli˚C¡
 = 
SLICES_PER_BLOCK
; invalidSliceCnt > 0 ; invalidSliceCnt--)

61 i‡(
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 !
BLOCK_NONE
)

63 
evi˘edBlockNo
 = 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
;

65 if(
BLOCK_NONE
 !
vútuÆBlockM≠På
->
block
[
dõNo
][
evi˘edBlockNo
].
√xtBlock
)

67 
vútuÆBlockM≠På
->
block
[
dõNo
][vútuÆBlockM≠På->block[dõNo][
evi˘edBlockNo
].
√xtBlock
].
¥evBlock
 = 
BLOCK_NONE
;

69 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
vútuÆBlockM≠På
->
block
[dõNo][
evi˘edBlockNo
].
√xtBlock
;

74 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
BLOCK_NONE
;

75 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
BLOCK_NONE
;

78  
evi˘edBlockNo
;

82 
	`as£π
(!"[WARNING] ThereáreÇo free blocks. AbortÅerminateÅhis ssd. [WARNING]");

83  
BLOCK_FAIL
;

84 
	}
}

86 
	$G¨bageCﬁÀ˘i⁄_AddVi˘imBlock
(
dõNo
, 
blockNo
, 
övÆidSli˚C¡
)

88 if(
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 !
BLOCK_NONE
)

90 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
¥evBlock
 = 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[dõNo][
övÆidSli˚C¡
].
èûBlock
;

91 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
√xtBlock
 = 
BLOCK_NONE
;

92 
vútuÆBlockM≠På
->
block
[
dõNo
][
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[dõNo][
övÆidSli˚C¡
].
èûBlock
].
√xtBlock
 = 
blockNo
;

94 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
blockNo
;

98 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
¥evBlock
 = 
BLOCK_NONE
;

99 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].
√xtBlock
 = 
BLOCK_NONE
;

101 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
blockNo
;

102 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
blockNo
;

104 
	}
}

106 
	$G¨bageCﬁÀ˘i⁄_Sñe˘iveGëFromGcVi˘imLi°
(
dõNo
, 
blockNo
)

108 
√xtBlock
, 
¥evBlock
, 
övÆidSli˚C¡
;

110 
√xtBlock
 = 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].nextBlock;

111 
¥evBlock
 = 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].prevBlock;

112 
övÆidSli˚C¡
 = 
vútuÆBlockM≠På
->
block
[
dõNo
][
blockNo
].invalidSliceCnt;

114 if((
√xtBlock
 !
BLOCK_NONE
Ë&& (
¥evBlock
 != BLOCK_NONE))

116 
vútuÆBlockM≠På
->
block
[
dõNo
][
¥evBlock
].
√xtBlock
 =ÇextBlock;

117 
vútuÆBlockM≠På
->
block
[
dõNo
][
√xtBlock
].
¥evBlock
 =ÖrevBlock;

119 if((
√xtBlock
 =
BLOCK_NONE
Ë&& (
¥evBlock
 != BLOCK_NONE))

121 
vútuÆBlockM≠På
->
block
[
dõNo
][
¥evBlock
].
√xtBlock
 = 
BLOCK_NONE
;

122 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
¥evBlock
;

124 if((
√xtBlock
 !
BLOCK_NONE
Ë&& (
¥evBlock
 == BLOCK_NONE))

126 
vútuÆBlockM≠På
->
block
[
dõNo
][
√xtBlock
].
¥evBlock
 = 
BLOCK_NONE
;

128 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
√xtBlock
;

132 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
BLOCK_NONE
;

133 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
BLOCK_NONE
;

135 
	}
}

137 
	$G¨bageCﬁÀ˘i⁄_Inô
()

139 
dõNo
=0 ; dõNÿ< 
USER_DIES
; dieNo++)

141 
övÆidSli˚C¡
 = 0 ; invÆidSli˚C¡ < (
SLICES_PER_BLOCK
+1); invalidSliceCnt++)

143 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
hódBlock
 = 
BLOCK_NONE
;

144 
•_GCVimtimBlockM≠
->
gcVi˘imLi°
[
dõNo
][
övÆidSli˚C¡
].
èûBlock
 = 
BLOCK_NONE
;

147 
	}
}

149 
	$G¨bageCﬁÀ˘i⁄_Pro˚ss
(
dõNo
)

151 
vi˘imBlockNo
, 
∑geNo
, 
vútuÆSli˚Addr
, 
logiˇlSli˚Addr
, 
dõNoF‹GcC›y
, 
ªqSlŸTag
;

153 
vi˘imBlockNo
 = 
	`_GëVi˘imBlock
(
dõNo
);

154 
dõNoF‹GcC›y
 = 
dõNo
;

156 if(
SLICES_PER_BLOCK
 !
vútuÆBlockM≠På
->
block
[
dõNo
][
vi˘imBlockNo
].
övÆidSli˚C¡
)

158 
SSD_REQ_FORMAT
* 
p_ªque°E¡ry
 = 
NULL
;

160 
∑geNo
 = 0 ;ÖageNÿ< 
USER_PAGES_PER_BLOCK
;ÖageNo++)

162 
vútuÆSli˚Addr
 = 
	`V‹g2VßTøn¶©i⁄
(
dõNo
, 
vi˘imBlockNo
, 
∑geNo
);

163 
logiˇlSli˚Addr
 = 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
vútuÆSli˚Addr
].logicalSliceAddr;

165 if(
LSA_NONE
 !
logiˇlSli˚Addr
)

167 if(
vútuÆSli˚Addr
 =
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].virtualSliceAddr)

170 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

171 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

173 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

174 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_READ
;

175 
p_ªque°E¡ry
->
logiˇlSli˚Addr
 =ÜogicalSliceAddr;

176 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_TEMP_ENTRY
;

177 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

178 
p_ªque°E¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

179 
p_ªque°E¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

180 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

181 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

182 
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
 = 
	`Buf„rM™agemít_AŒoˇãTempBuf
(
dõNo
);

184 
	`Buf„rM™agemít_Upd©eTempBufE¡ryInfoBlockögReq
(
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
, 
ªqSlŸTag
);

186 
p_ªque°E¡ry
->
«ndInfo
.
vútuÆSli˚Addr
 = virtualSliceAddr;

188 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

191 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

192 
p_ªque°E¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

194 
p_ªque°E¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

195 
p_ªque°E¡ry
->
ªqCode
 = 
REQ_CODE_WRITE
;

196 
p_ªque°E¡ry
->
logiˇlSli˚Addr
 =ÜogicalSliceAddr;

197 
p_ªque°E¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_TEMP_ENTRY
;

198 
p_ªque°E¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

199 
p_ªque°E¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

200 
p_ªque°E¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_OFF
;

201 
p_ªque°E¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

202 
p_ªque°E¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

203 
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
 = 
	`Buf„rM™agemít_AŒoˇãTempBuf
(
dõNo
);

204 
	`Buf„rM™agemít_Upd©eTempBufE¡ryInfoBlockögReq
(
p_ªque°E¡ry
->
d©aBufInfo
.
íåy
, 
ªqSlŸTag
);

206 
p_ªque°E¡ry
->
«ndInfo
.
vútuÆSli˚Addr
 = 
	`FödFªeVútuÆSli˚F‹Gc
(
dõNoF‹GcC›y
, 
vi˘imBlockNo
);

208 
logiˇlSli˚M≠På
->
logiˇlSli˚
[
logiˇlSli˚Addr
].
vútuÆSli˚Addr
 = 
p_ªque°E¡ry
->
«ndInfo
.virtualSliceAddr;

209 
vútuÆSli˚M≠På
->
vútuÆSli˚
[
p_ªque°E¡ry
->
«ndInfo
.
vútuÆSli˚Addr
].
logiˇlSli˚Addr
 =ÜogicalSliceAddr;

211 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

217 
	`Eø£Block
(
dõNo
, 
vi˘imBlockNo
);

218 
	}
}

	@ftl/garbage_collection.h

47 #i‚de‡
GARBAGE_COLLECTION_H_


48 
	#GARBAGE_COLLECTION_H_


	)

50 
	~"·l_c⁄fig.h
"

52 
	s_GC_VICTIM_LIST_ENTRY
 {

53 
	mhódBlock
 : 16;

54 
	mèûBlock
 : 16;

55 } 
	tGC_VICTIM_LIST_ENTRY
, *
	tP_GC_VICTIM_LIST_ENTRY
;

57 
	s_GC_VICTIM_MAP
 {

58 
GC_VICTIM_LIST_ENTRY
 
	mgcVi˘imLi°
[
USER_DIES
][
SLICES_PER_BLOCK
 + 1];

59 } 
	tGC_VICTIM_MAP
, *
	tP_GC_VICTIM_MAP
;

65 
G¨bageCﬁÀ˘i⁄_AddVi˘imBlock
(
dõNo
, 
blockNo
, 
övÆidSli˚C¡
);

66 
G¨bageCﬁÀ˘i⁄_Sñe˘iveGëFromGcVi˘imLi°
(
dõNo
, 
blockNo
);

68 
G¨bageCﬁÀ˘i⁄_Inô
();

69 
G¨bageCﬁÀ˘i⁄_Pro˚ss
(
dõNo
);

	@hal/hal_host.c

8 
	~"xû_¥ötf.h
"

9 
	~<°rög.h
>

11 
	~"../debug.h
"

12 
	~"Œd/Œd_nvme.h
"

13 
	~"Œd/Œd_hdma.h
"

15 
	~"hÆ_ho°.h
"

17 
	~"../ho°/nvme/io_ac˚ss.h
"

18 
	~"../ho°/nvme/nvme.h
"

19 
	~"../ho°/nvme/nvme_maö.h
"

21 
	~"../·l/b¨rõr_·l.h
"

23 
	~"../ªque°_Æloˇti⁄.h
"

24 
	~"../ªque°_scheduÀ.h
"

25 
	~"../d©a_buf„r.h
"

28 
	$hÆ_ho°_issue_hdma_ªq
(
ªqSlŸTag
)

30 
devAddr
, 
dmaIndex
, 
numOfNvmeBlock
, 
fua
;

32 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

34 
dmaIndex
 = 
p_ªqE¡ry
->
nvmeDmaInfo
.
°¨tIndex
;

35 
devAddr
 = 
	`Buf„rM™agemít_GëD©aBufAddr
(
ªqSlŸTag
);

36 
numOfNvmeBlock
 = 0;

38 if(
p_ªqE¡ry
->
ªqCode
 =
REQ_CODE_RxDMA
)

40 
b_ªqAutoCom∂ëe
 = 
NVME_COMMAND_AUTO_COMPLETION_ON
;

41 
fua
 = 
p_ªqE¡ry
->
nvmeDmaInfo
.fua;

43 i‡(
	`BRANCH_UNLIKELY
(
TRUE
 =
fua
))

45 
b_ªqAutoCom∂ëe
 = 
NVME_COMMAND_AUTO_COMPLETION_OFF
;

48 
numOfNvmeBlock
 < 
p_ªqE¡ry
->
nvmeDmaInfo
.numOfNvmeBlock)

53 
	`Œd_hdma_£t_auto_rx_dma
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
, 
dmaIndex
, 
devAddr
, 
b_ªqAutoCom∂ëe
);

55 
numOfNvmeBlock
++;

56 
dmaIndex
++;

57 
devAddr
 +
BYTES_PER_NVME_BLOCK
;

60 
HOST_DMA_FIFO_CNT_REG
 
dma_èû_fifo
;

61 
dma_èû_fifo
.
dw‹d
 = 
	`Œd_hdma_gë_dma_èû_fifo_˙t
();

63 
p_ªqE¡ry
->
nvmeDmaInfo
.
ªqTaû
 = 
dma_èû_fifo
.
autoDmaRx
;

64 
p_ªqE¡ry
->
nvmeDmaInfo
.
ovîFlowC¡
 = 
	`Œd_hdma_gë_auto_dma_rx_ovîÊow_˙t
();

66 if(
p_ªqE¡ry
->
ªqCode
 =
REQ_CODE_TxDMA
)

68 
numOfNvmeBlock
 < 
p_ªqE¡ry
->
nvmeDmaInfo
.numOfNvmeBlock)

73 
	`Œd_hdma_£t_auto_tx_dma
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
, 
dmaIndex
, 
devAddr
, 
NVME_COMMAND_AUTO_COMPLETION_ON
);

75 
numOfNvmeBlock
++;

76 
dmaIndex
++;

77 
devAddr
 +
BYTES_PER_NVME_BLOCK
;

80 
HOST_DMA_FIFO_CNT_REG
 
dma_èû_fifo
;

81 
dma_èû_fifo
.
dw‹d
 = 
	`Œd_hdma_gë_dma_èû_fifo_˙t
();

83 
p_ªqE¡ry
->
nvmeDmaInfo
.
ªqTaû
 = 
dma_èû_fifo
.
autoDmaTx
;

84 
p_ªqE¡ry
->
nvmeDmaInfo
.
ovîFlowC¡
 = 
	`Œd_hdma_gë_auto_dma_tx_ovîÊow_˙t
();

88 
	`as£π
(!"[WARNING] Not supportedÑeqCode [WARNING]");

91 
NVME_COMMAND_ENTRY
* 
p_cmdE¡ry
 = 
	`nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
);

93 
p_cmdE¡ry
->
hdmaWaôReqE¡ryC¡
++;

94 
	}
}

96 
	$hÆ_ho°_h™dÀ_hdma_ªsu…
()

98 
ªqSlŸTag
, 
¥evReq
;

99 
rxD⁄e
, 
txD⁄e
;

101 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromNvmeDmaReqQ
();

102 
rxD⁄e
 = 0;

103 
txD⁄e
 = 0;

105 
NVME_COMMAND_ENTRY
* 
p_cmdE¡ry
 = 
NULL
;

106 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
NULL
;

108 
ªqSlŸTag
 !
REQ_SLOT_TAG_NONE
)

110 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

111 
p_cmdE¡ry
 = 
	`nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
);

113 
¥evReq
 = 
p_ªqE¡ry
->prevReq;

115 i‡(
REQ_CODE_RxDMA
 =
p_ªqE¡ry
->
ªqCode
)

117 if(!
rxD⁄e
)

119 
rxD⁄e
 = 
	`Œd_hdma_check_auto_rx_dma_∑πül_d⁄e
(
p_ªqE¡ry
->
nvmeDmaInfo
.
ªqTaû
 ,Ö_ªqE¡ry->nvmeDmaInfo.
ovîFlowC¡
);

122 if(
rxD⁄e
)

132 
	`Reque°AŒoˇti⁄_Sñe˘iveGëFromNvmeDmaReqQ
(
ªqSlŸTag
);

134 
p_cmdE¡ry
->
hdmaCom∂ëeReqE¡ryC¡
++;

136 i‡(
p_cmdE¡ry
->
tŸÆReqE¡ryC¡
 =p_cmdE¡ry->
hdmaCom∂ëeReqE¡ryC¡
)

138 i‡(
FALSE
 =
p_ªqE¡ry
->
nvmeDmaInfo
.
fua
)

140 
	`nvme_comm™d_c⁄ãxt_de¸ó£_wrôe_out°™dög_cou¡
();

141 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

148 if(!
txD⁄e
)

150 
txD⁄e
 = 
	`Œd_hdma_check_auto_tx_dma_∑πül_d⁄e
(
p_ªqE¡ry
->
nvmeDmaInfo
.
ªqTaû
 ,Ö_ªqE¡ry->nvmeDmaInfo.
ovîFlowC¡
);

153 if(
txD⁄e
)

166 
	`Reque°AŒoˇti⁄_Sñe˘iveGëFromNvmeDmaReqQ
(
ªqSlŸTag
);

168 
p_cmdE¡ry
->
hdmaCom∂ëeReqE¡ryC¡
++;

170 i‡(
p_cmdE¡ry
->
tŸÆReqE¡ryC¡
 =p_cmdE¡ry->
hdmaCom∂ëeReqE¡ryC¡
)

172 
	`nvme_comm™d_c⁄ãxt_de¸ó£_ªad_out°™dög_cou¡
();

173 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

178 
ªqSlŸTag
 = 
¥evReq
;

180 
	}
}

182 
	$hÆ_ho°_£t_nvme_c˚n
()

184 
ccEnSë
 = 
	`Œd_nvme_gë_cc_í
();

186 if(1 =
ccEnSë
)

188 
	`Œd_nvme_£t_admö_queue
(1, 1, 1);

189 
	`Œd_nvme_£t_c°s_rdy
(1);

192  
ccEnSë
;

193 
	}
}

195 
	$hÆ_ho°_˛ór_nvme_c˚n
()

197 
ccEnSë
 = 
	`Œd_nvme_gë_cc_í
();

199 if(0 =
ccEnSë
)

201 
	`Œd_nvme_£t_c°s_sh°
(0);

202 
	`Œd_nvme_£t_c°s_rdy
(0);

205  
ccEnSë
;

206 
	}
}

208 
	$hÆ_ho°_nvme_shutdown
()

210 
NVME_STATUS_REG
 
nvmeReg
;

211 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

213 i‡(0 !
nvmeReg
.
ccShn
)

215 
	`Œd_nvme_£t_c°s_sh°
(1);

217 
qID
 = 0; qID < 8; qID++)

219 
	`Œd_nvme_£t_io_cq
(
qID
, 0, 0, 0, 0, 0, 0);

220 
	`Œd_nvme_£t_io_sq
(
qID
, 0, 0, 0, 0, 0);

223 
	`Œd_nvme_£t_admö_queue
(0, 0, 0);

224 
	`Œd_nvme_£t_c°s_sh°
(2);

230 
	}
}

232 
	$hÆ_ho°_„tch_nvme_comm™d
(
NVME_COMMAND_ENTRY
* 
p_comm™d_li°
)

234 
NVME_COMMAND_ENTRY
 
cmd_íåy
;

236 
cmd_íåy
.
tŸÆReqE¡ryC¡
 = 0;

237 
cmd_íåy
.
hdmaWaôReqE¡ryC¡
 = 0;

238 
cmd_íåy
.
hdmaCom∂ëeReqE¡ryC¡
 = 0;

239 
cmd_íåy
.
N™dWaôReqE¡ryC¡
 = 0;

240 
cmd_íåy
.
N™dCom∂ëeReqE¡ryC¡
 = 0;

242 
b_„tch_comm™d
 = 
	`Œd_nvme_gë_cmd
(&
cmd_íåy
.
qID
, &cmd_íåy.
cmdSlŸTag
, &cmd_íåy.
cmdSeqNum
, cmd_íåy.
cmdDw‹d
);

244 i‡(
FALSE
 !
b_„tch_comm™d
)

246 
	`mem˝y
((*)&
p_comm™d_li°
[
cmd_íåy
.
cmdSlŸTag
], (*)&cmd_íåy, (
NVME_COMMAND_ENTRY
));

248  
cmd_íåy
.
cmdSlŸTag
;

251  
INVALID_CMD_SLOT_TAG
;

252 
	}
}

254 
	$hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
cmd_¶Ÿ_èg
, 
cmd_•ecific
, 
°©us_fõld
)

256 
NVME_COMPLETION
 
nvmeCPL
 = {0,};

258 
nvmeCPL
.
•ecific
 = 
cmd_•ecific
;

259 
nvmeCPL
.
°©usFõldW‹d
 = 
°©us_fõld
;

261 
	`Œd_nvme_£t_auto_˝l
(
cmd_¶Ÿ_èg
, 
nvmeCPL
.
•ecific
,ÇvmeCPL.
°©usFõldW‹d
);

262 
	}
}

	@hal/hal_host.h

8 #i‚de‡
_HAL_HOST_H_


9 
	#_HAL_HOST_H_


	)

11 
	~"../ho°/nvme/nvme.h
"

12 
	~"../ho°/nvme/nvme_maö.h
"

14 
	#NVME_COMMAND_AUTO_COMPLETION_OFF
 0

	)

15 
	#NVME_COMMAND_AUTO_COMPLETION_ON
 1

	)

17 
hÆ_ho°_issue_hdma_ªq
(
ªqSlŸTag
);

18 
hÆ_ho°_h™dÀ_hdma_ªsu…
();

19 
hÆ_ho°_£t_nvme_c˚n
();

20 
hÆ_ho°_˛ór_nvme_c˚n
();

21 
hÆ_ho°_nvme_shutdown
();

22 
hÆ_ho°_„tch_nvme_comm™d
(
NVME_COMMAND_ENTRY
* 
p_cmdC⁄ãxt
);

23 
hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
cmd_¶Ÿ_èg
, 
cmd_•ecific
, 
°©us_fõld
);

	@hal/lld/host_lld.h

54 #i‚de‡
__HOST_LLD_H_


55 
	#__HOST_LLD_H_


	)

57 
	#HOST_IP_ADDR
 (
XPAR_NVME_CTRL_0_BASEADDR
)

	)

59 
	~"Œd_pcõ.h
"

60 
	~"Œd_hdma.h
"

61 
	~"Œd_nvme.h
"

63 
	#DEV_IRQ_MASK_REG_ADDR
 (
HOST_IP_ADDR
 + 0x4)

	)

64 
	#DEV_IRQ_CLEAR_REG_ADDR
 (
HOST_IP_ADDR
 + 0x8)

	)

65 
	#DEV_IRQ_STATUS_REG_ADDR
 (
HOST_IP_ADDR
 + 0xC)

	)

67 
	#PCIE_STATUS_REG_ADDR
 (
HOST_IP_ADDR
 + 0x100)

	)

68 
	#PCIE_FUNC_REG_ADDR
 (
HOST_IP_ADDR
 + 0x104)

	)

71 
	#NVME_STATUS_REG_ADDR
 (
HOST_IP_ADDR
 + 0x200)

	)

72 
	#HOST_DMA_FIFO_CNT_REG_ADDR
 (
HOST_IP_ADDR
 + 0x204)

	)

73 
	#NVME_ADMIN_QUEUE_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x21C)

	)

74 
	#NVME_IO_SQ_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x220)

	)

75 
	#NVME_IO_CQ_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x260)

	)

77 
	#NVME_CMD_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x300)

	)

78 
	#NVME_CPL_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x304)

	)

79 
	#HOST_DMA_CMD_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x310)

	)

81 
	#NVME_CMD_SRAM_ADDR
 (
HOST_IP_ADDR
 + 0x10000)

	)

86 
	#HOST_DMA_DIRECT_TYPE
 (1)

	)

87 
	#HOST_DMA_AUTO_TYPE
 (0)

	)

89 
	#HOST_DMA_TX_DIRECTION
 (1)

	)

90 
	#HOST_DMA_RX_DIRECTION
 (0)

	)

92 
	#ONLY_CPL_TYPE
 (0)

	)

93 
	#AUTO_CPL_TYPE
 (1)

	)

94 
	#CMD_SLOT_RELEASE_TYPE
 (2)

	)

95 
	#P_SLOT_TAG_WIDTH
 (10)

97 

	)

98 #¥agm®
∑ck
(
push
, 1)

100 
	s_DEV_IRQ_REG


103 
	mdw‹d
;

105 
	mpcõLök
 :1;

106 
	mbusMa°î
 :1;

107 
	mpcõIrq
 :1;

108 
	mpcõMsi
 :1;

109 
	mpcõMsix
 :1;

110 
	mnvmeCcEn
 :1;

111 
	mnvmeCcShn
 :1;

112 
	mmAxiWrôeEº
 :1;

113 
	mmAxiRódEº
 :1;

114 
	mpcõMªqEº
 :1;

115 
	mpcõC∂dEº
 :1;

116 
	mpcõC∂dLíEº
 :1;

117 
	mª£rved0
 :20;

120 } 
	tDEV_IRQ_REG
;

122 
	s_PCIE_STATUS_REG


125 
	mdw‹d
;

127 
	m…ssm
 :6;

128 
	mª£rved0
 :2;

129 
	mpcõLökUp
 :1;

130 
	mª£rved1
 :23;

133 } 
	tPCIE_STATUS_REG
;

135 
	s_PCIE_FUNC_REG


138 
	mdw‹d
;

140 
	mbusMa°î
 :1;

141 
	mmsiE«bÀ
 :1;

142 
	mmsixE«bÀ
 :1;

143 
	múqDißbÀ
 :1;

144 
	mmsiVecNum
 :3;

145 
	mª£rved0
 :25;

148 } 
	tPCIE_FUNC_REG
;

151 #¥agm®
∑ck
(
p›
)

	@hal/lld/lld_hdma.c

7 
	~"../../debug.h
"

8 
	~"xû_¥ötf.h
"

9 
	~"../../ho°/nvme/io_ac˚ss.h
"

10 
	~"Œd_hdma.h
"

12 
HOST_DMA_STATUS
 
	gg_ho°DmaSètus
;

13 
HOST_DMA_ASSIST_STATUS
 
	gg_ho°DmaAssi°Sètus
;

15 
	$Œd_hdma_£t_dúe˘_tx_dma
(
devAddr
, 
pcõAddrH
, 
pcõAddrL
, 
Àn
)

17 
	`ASSERT
((
Àn
 <0x1000Ë&& ((
pcõAddrL
 & 0x3) == 0));

19 
HOST_DMA_CMD_FIFO_REG
 
ho°DmaReg
;

21 
	`mem£t
((*)&
ho°DmaReg
, 0x00, (
HOST_DMA_CMD_FIFO_REG
));

23 
ho°DmaReg
.
devAddr
 = devAddr;

24 
ho°DmaReg
.
pcõAddrL
 =ÖcieAddrL;

25 
ho°DmaReg
.
pcõAddrH
 =ÖcieAddrH;

27 
ho°DmaReg
.
dw‹d
[3] = 0;

28 
ho°DmaReg
.
dmaTy≥
 = 
HOST_DMA_DIRECT_TYPE
;

29 
ho°DmaReg
.
dmaDúe˘i⁄
 = 
HOST_DMA_TX_DIRECTION
;

30 
ho°DmaReg
.
dmaLí
 = 
Àn
;

32 
	`IO_WRITE32
(
HOST_DMA_CMD_FIFO_REG_ADDR
, 
ho°DmaReg
.
dw‹d
[0]);

33 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 4), 
ho°DmaReg
.
dw‹d
[1]);

34 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 8), 
ho°DmaReg
.
dw‹d
[2]);

35 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 12), 
ho°DmaReg
.
dw‹d
[3]);

36 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 16), 
ho°DmaReg
.
dw‹d
[4]);

38 
g_ho°DmaSètus
.
fifoTaû
.
dúe˘DmaTx
++;

39 
g_ho°DmaSètus
.
dúe˘DmaTxC¡
++;

40 
	}
}

42 
	$Œd_hdma_£t_dúe˘_rx_dma
(
devAddr
, 
pcõAddrH
, 
pcõAddrL
, 
Àn
)

44 
	`ASSERT
((
Àn
 <0x1000Ë&& ((
pcõAddrL
 & 0x3) == 0));

46 
HOST_DMA_CMD_FIFO_REG
 
ho°DmaReg
;

48 
	`mem£t
((*)&
ho°DmaReg
, 0x00, (
HOST_DMA_CMD_FIFO_REG
));

50 
ho°DmaReg
.
devAddr
 = devAddr;

51 
ho°DmaReg
.
pcõAddrH
 =ÖcieAddrH;

52 
ho°DmaReg
.
pcõAddrL
 =ÖcieAddrL;

54 
ho°DmaReg
.
dw‹d
[3] = 0;

55 
ho°DmaReg
.
dmaTy≥
 = 
HOST_DMA_DIRECT_TYPE
;

56 
ho°DmaReg
.
dmaDúe˘i⁄
 = 
HOST_DMA_RX_DIRECTION
;

57 
ho°DmaReg
.
dmaLí
 = 
Àn
;

59 
	`IO_WRITE32
(
HOST_DMA_CMD_FIFO_REG_ADDR
, 
ho°DmaReg
.
dw‹d
[0]);

60 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 4), 
ho°DmaReg
.
dw‹d
[1]);

61 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 8), 
ho°DmaReg
.
dw‹d
[2]);

62 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 12), 
ho°DmaReg
.
dw‹d
[3]);

63 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 16), 
ho°DmaReg
.
dw‹d
[4]);

64 
g_ho°DmaSètus
.
fifoTaû
.
dúe˘DmaRx
++;

65 
g_ho°DmaSètus
.
dúe˘DmaRxC¡
++;

67 
	}
}

69 
	$Œd_hdma_£t_auto_tx_dma
(
cmdSlŸTag
, 
cmd4KBOff£t
, 
devAddr
, 
autoCom∂ëi⁄
)

71 
HOST_DMA_CMD_FIFO_REG
 
ho°DmaReg
;

72 
ãmpTaû
;

74 
	`ASSERT
(
cmd4KBOff£t
 < 256);

76 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

77 (
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
 + 1Ë% 256 =g_ho°DmaSètus.
fifoHód
.autoDmaTx)

78 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

80 
ho°DmaReg
.
devAddr
 = devAddr;

82 
ho°DmaReg
.
dw‹d
[3] = 0;

83 
ho°DmaReg
.
dmaTy≥
 = 
HOST_DMA_AUTO_TYPE
;

84 
ho°DmaReg
.
dmaDúe˘i⁄
 = 
HOST_DMA_TX_DIRECTION
;

85 
ho°DmaReg
.
cmd4KBOff£t
 = cmd4KBOffset;

86 
ho°DmaReg
.
cmdSlŸTag
 = cmdSlotTag;

87 
ho°DmaReg
.
autoCom∂ëi⁄
 =áutoCompletion;

89 
	`IO_WRITE32
(
HOST_DMA_CMD_FIFO_REG_ADDR
, 
ho°DmaReg
.
dw‹d
[0]);

92 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 12), 
ho°DmaReg
.
dw‹d
[3]);

93 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 16), 
ho°DmaReg
.
dw‹d
[4]);

95 
ãmpTaû
 = 
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
++;

96 if(
ãmpTaû
 > 
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
)

97 
g_ho°DmaAssi°Sètus
.
autoDmaTxOvîFlowC¡
++;

99 
g_ho°DmaSètus
.
autoDmaTxC¡
++;

100 
	}
}

102 
	$Œd_hdma_£t_auto_rx_dma
(
cmdSlŸTag
, 
cmd4KBOff£t
, 
devAddr
, 
autoCom∂ëi⁄
)

104 
HOST_DMA_CMD_FIFO_REG
 
ho°DmaReg
;

105 
ãmpTaû
;

107 
	`ASSERT
(
cmd4KBOff£t
 < 256);

109 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

110 (
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
 + 1Ë% 256 =g_ho°DmaSètus.
fifoHód
.autoDmaRx)

111 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

113 
ho°DmaReg
.
devAddr
 = devAddr;

115 
ho°DmaReg
.
dw‹d
[3] = 0;

116 
ho°DmaReg
.
dmaTy≥
 = 
HOST_DMA_AUTO_TYPE
;

117 
ho°DmaReg
.
dmaDúe˘i⁄
 = 
HOST_DMA_RX_DIRECTION
;

118 
ho°DmaReg
.
cmd4KBOff£t
 = cmd4KBOffset;

119 
ho°DmaReg
.
cmdSlŸTag
 = cmdSlotTag;

120 
ho°DmaReg
.
autoCom∂ëi⁄
 =áutoCompletion;

122 
	`IO_WRITE32
(
HOST_DMA_CMD_FIFO_REG_ADDR
, 
ho°DmaReg
.
dw‹d
[0]);

125 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 12), 
ho°DmaReg
.
dw‹d
[3]);

126 
	`IO_WRITE32
((
HOST_DMA_CMD_FIFO_REG_ADDR
 + 16), 
ho°DmaReg
.
dw‹d
[4]);

128 
ãmpTaû
 = 
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
++;

129 if(
ãmpTaû
 > 
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
)

130 
g_ho°DmaAssi°Sètus
.
autoDmaRxOvîFlowC¡
++;

132 
g_ho°DmaSètus
.
autoDmaRxC¡
++;

133 
	}
}

135 
	$Œd_hdma_check_dúe˘_tx_dma_d⁄e
()

137 
g_ho°DmaSètus
.
fifoHód
.
dúe˘DmaTx
 !g_ho°DmaSètus.
fifoTaû
.directDmaTx)

139 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

141 
	}
}

143 
	$Œd_hdma_check_dúe˘_rx_dma_d⁄e
()

145 
g_ho°DmaSètus
.
fifoHód
.
dúe˘DmaRx
 !g_ho°DmaSètus.
fifoTaû
.directDmaRx)

147 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

149 
	}
}

151 
	$Œd_hdma_check_auto_tx_dma_d⁄e
()

153 
g_ho°DmaSètus
.
fifoHód
.
autoDmaTx
 !g_ho°DmaSètus.
fifoTaû
.autoDmaTx)

155 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

157 
	}
}

159 
	$Œd_hdma_check_auto_rx_dma_d⁄e
()

161 
g_ho°DmaSètus
.
fifoHód
.
autoDmaRx
 !g_ho°DmaSètus.
fifoTaû
.autoDmaRx)

163 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

165 
	}
}

167 
	$Œd_hdma_check_auto_tx_dma_∑πül_d⁄e
(
èûIndex
, 
èûAssi°Index
)

171 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

173 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaTx
 =g_ho°DmaSètus.
fifoTaû
.autoDmaTx)

176 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaTx
 < 
èûIndex
)

178 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
 < 
èûIndex
)

180 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
 > g_ho°DmaSètus.
fifoHód
.autoDmaTx)

183 if(
g_ho°DmaAssi°Sètus
.
autoDmaTxOvîFlowC¡
 !(
èûAssi°Index
 + 1))

187 if(
g_ho°DmaAssi°Sètus
.
autoDmaTxOvîFlowC¡
 !
èûAssi°Index
)

191 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaTx
 =
èûIndex
)

195 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
 < 
èûIndex
)

199 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaTx
 > g_ho°DmaSètus.
fifoHód
.autoDmaTx)

202 if(
g_ho°DmaAssi°Sètus
.
autoDmaTxOvîFlowC¡
 !
èûAssi°Index
)

208 
	}
}

210 
	$Œd_hdma_check_auto_rx_dma_∑πül_d⁄e
(
èûIndex
, 
èûAssi°Index
)

214 
g_ho°DmaSètus
.
fifoHód
.
dw‹d
 = 
	`IO_READ32
(
HOST_DMA_FIFO_CNT_REG_ADDR
);

216 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaRx
 =g_ho°DmaSètus.
fifoTaû
.autoDmaRx)

219 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaRx
 < 
èûIndex
)

221 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
 < 
èûIndex
)

223 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
 > g_ho°DmaSètus.
fifoHód
.autoDmaRx)

226 if(
g_ho°DmaAssi°Sètus
.
autoDmaRxOvîFlowC¡
 !(
èûAssi°Index
 + 1))

230 if(
g_ho°DmaAssi°Sètus
.
autoDmaRxOvîFlowC¡
 !
èûAssi°Index
)

234 if(
g_ho°DmaSètus
.
fifoHód
.
autoDmaRx
 =
èûIndex
)

238 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
 < 
èûIndex
)

242 if(
g_ho°DmaSètus
.
fifoTaû
.
autoDmaRx
 > g_ho°DmaSètus.
fifoHód
.autoDmaRx)

245 if(
g_ho°DmaAssi°Sètus
.
autoDmaRxOvîFlowC¡
 !
èûAssi°Index
)

251 
	}
}

253 
	$Œd_hdma_gë_dma_èû_fifo_˙t
()

255  
g_ho°DmaSètus
.
fifoTaû
.
dw‹d
;

256 
	}
}

258 
	$Œd_hdma_gë_auto_dma_tx_ovîÊow_˙t
()

260  
g_ho°DmaAssi°Sètus
.
autoDmaTxOvîFlowC¡
;

261 
	}
}

263 
	$Œd_hdma_gë_auto_dma_rx_ovîÊow_˙t
()

265  
g_ho°DmaAssi°Sètus
.
autoDmaRxOvîFlowC¡
;

266 
	}
}

	@hal/lld/lld_hdma.h

8 #i‚de‡
_LLD_HDMA_H_


9 
	#_LLD_HDMA_H_


	)

11 
	#HOST_IP_ADDR
 (
XPAR_NVME_CTRL_0_BASEADDR
)

	)

13 
	#HOST_DMA_FIFO_CNT_REG_ADDR
 (
HOST_IP_ADDR
 + 0x204)

	)

14 
	#HOST_DMA_CMD_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x310)

	)

16 
	#HOST_DMA_DIRECT_TYPE
 (1)

	)

17 
	#HOST_DMA_AUTO_TYPE
 (0)

	)

19 
	#HOST_DMA_TX_DIRECTION
 (1)

	)

20 
	#HOST_DMA_RX_DIRECTION
 (0)

	)

25 
	s_HOST_DMA_FIFO_CNT_REG


28 
	mdw‹d
;

31 
	mdúe˘DmaRx
;

32 
	mdúe˘DmaTx
;

33 
	mautoDmaRx
;

34 
	mautoDmaTx
;

37 } 
	tHOST_DMA_FIFO_CNT_REG
;

40 
	s_HOST_DMA_CMD_FIFO_REG


43 
	mdw‹d
[5];

46 
	mdevAddr
;

47 
	mpcõAddrH
;

48 
	mpcõAddrL
;

51 
	mdmaLí
 :13;

52 
	mautoCom∂ëi⁄
 :1;

53 
	mcmd4KBOff£t
 :9;

54 
	mª£rved0
 :7;

55 
	mdmaDúe˘i⁄
 :1;

56 
	mdmaTy≥
 :1;

58 
	mcmdSlŸTag
;

61 } 
	tHOST_DMA_CMD_FIFO_REG
;

63 
	s_HOST_DMA_STATUS


65 
HOST_DMA_FIFO_CNT_REG
 
	mfifoHód
;

66 
HOST_DMA_FIFO_CNT_REG
 
	mfifoTaû
;

67 
	mdúe˘DmaTxC¡
;

68 
	mdúe˘DmaRxC¡
;

69 
	mautoDmaTxC¡
;

70 
	mautoDmaRxC¡
;

71 } 
	tHOST_DMA_STATUS
;

74 
	s_HOST_DMA_ASSIST_STATUS


76 
	mautoDmaTxOvîFlowC¡
;

77 
	mautoDmaRxOvîFlowC¡
;

78 } 
	tHOST_DMA_ASSIST_STATUS
;

84 
Œd_hdma_£t_dúe˘_tx_dma
(
devAddr
, 
pcõAddrH
, 
pcõAddrL
, 
Àn
);

85 
Œd_hdma_£t_dúe˘_rx_dma
(
devAddr
, 
pcõAddrH
, 
pcõAddrL
, 
Àn
);

86 
Œd_hdma_£t_auto_tx_dma
(
cmdSlŸTag
, 
cmd4KBOff£t
, 
devAddr
, 
autoCom∂ëi⁄
);

87 
Œd_hdma_£t_auto_rx_dma
(
cmdSlŸTag
, 
cmd4KBOff£t
, 
devAddr
, 
autoCom∂ëi⁄
);

88 
Œd_hdma_check_dúe˘_tx_dma_d⁄e
();

89 
Œd_hdma_check_dúe˘_rx_dma_d⁄e
();

90 
Œd_hdma_check_auto_tx_dma_d⁄e
();

91 
Œd_hdma_check_auto_rx_dma_d⁄e
();

92 
Œd_hdma_check_auto_tx_dma_∑πül_d⁄e
(
èûIndex
, 
èûAssi°Index
);

93 
Œd_hdma_check_auto_rx_dma_∑πül_d⁄e
(
èûIndex
, 
èûAssi°Index
);

94 
Œd_hdma_gë_dma_èû_fifo_˙t
();

95 
Œd_hdma_gë_auto_dma_tx_ovîÊow_˙t
();

96 
Œd_hdma_gë_auto_dma_rx_ovîÊow_˙t
();

	@hal/lld/lld_nvme.c

9 
	~"xû_¥ötf.h
"

10 
	~"../../ho°/nvme/io_ac˚ss.h
"

11 
	~"Œd_nvme.h
"

12 
	~"../../ho°/nvme/nvme.h
"

13 
	~"../../ho°/nvme/nvme_maö.h
"

15 
	$Œd_pcõ_async_ª£t
(
r°C¡
)

17 
NVME_STATUS_REG
 
nvmeReg
;

19 
nvmeReg
.
r°C¡
 =ÑstCnt;

20 
	`xû_¥ötf
("r°C¡%X \r\n",
r°C¡
);

21 
	`IO_WRITE32
(
NVME_STATUS_REG_ADDR
, 
nvmeReg
.
dw‹d
);

23 
	}
}

25 
	$Œd_pcõ_£t_lök_width
(
lökNum
)

27 
NVME_STATUS_REG
 
nvmeReg
;

29 
nvmeReg
.
lökNum
 =ÜinkNum;

30 
nvmeReg
.
lökEn
 = 1;

31 
	`xû_¥ötf
("lökNum%X \r\n",
lökNum
);

32 
	`IO_WRITE32
(
NVME_STATUS_REG_ADDR
, 
nvmeReg
.
dw‹d
);

34 
	}
}

37 
	$Œd_nvme_gë_cc_í
()

39 
NVME_STATUS_REG
 
nvmeReg
;

41 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

43  ()
nvmeReg
.
ccEn
;

44 
	}
}

48 
	$Œd_nvme_£t_c°s_rdy
(
rdy
)

50 
NVME_STATUS_REG
 
nvmeReg
;

52 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

53 
nvmeReg
.
c°sRdy
 = 
rdy
;

55 
	`IO_WRITE32
(
NVME_STATUS_REG_ADDR
, 
nvmeReg
.
dw‹d
);

56 
	}
}

58 
	$Œd_nvme_£t_c°s_sh°
(
sh°
)

60 
NVME_STATUS_REG
 
nvmeReg
;

62 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

63 
nvmeReg
.
c°sSh°
 = 
sh°
;

65 
	`IO_WRITE32
(
NVME_STATUS_REG_ADDR
, 
nvmeReg
.
dw‹d
);

66 
	}
}

68 
	$Œd_nvme_£t_admö_queue
(
sqVÆid
, 
cqVÆid
, 
cqIrqEn
)

70 
NVME_ADMIN_QUEUE_SET_REG
 
nvmeReg
;

72 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_ADMIN_QUEUE_SET_REG_ADDR
);

73 
nvmeReg
.
sqVÆid
 = sqValid;

74 
nvmeReg
.
cqVÆid
 = cqValid;

75 
nvmeReg
.
cqIrqEn
 = cqIrqEn;

77 
	`IO_WRITE32
(
NVME_ADMIN_QUEUE_SET_REG_ADDR
, 
nvmeReg
.
dw‹d
);

78 
	}
}

81 
	$Œd_nvme_gë_cmd
(
NVME_COMMAND_ENTRY
* 
p_comm™d_li°
)

83 
NVME_CMD_FIFO_REG
 
nvmeReg
;

85 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_CMD_FIFO_REG_ADDR
);

87 if(
nvmeReg
.
cmdVÆid
 == 1)

89 
addr
;

90 
idx
;

91 *
qID
 = 
nvmeReg
.qID;

93 
p_comm™d_li°
[
nvmeReg
.
cmdSlŸTag
].
qID
 =ÇvmeReg.qID;

94 
p_comm™d_li°
[
nvmeReg
.
cmdSlŸTag
].cmdSlotTag =ÇvmeReg.cmdSlotTag;

95 
p_comm™d_li°
[
nvmeReg
.
cmdSlŸTag
].
cmdSeqNum
 =ÇvmeReg.cmdSeqNum;

97 
addr
 = 
NVME_CMD_SRAM_ADDR
 + (
nvmeReg
.
cmdSlŸTag
 * 64);

99 
idx
 = 0; idx < 16; idx++)

101 
p_comm™d_li°
[
nvmeReg
.
cmdSlŸTag
].
cmdDw‹d
[
idx
] = 
	`IO_READ32
(
addr
 + (idx * 4));

105  ()
nvmeReg
.
cmdVÆid
;

106 
	}
}

109 
	$Œd_nvme_gë_cmd
(*
qID
, *
cmdSlŸTag
, *
cmdSeqNum
, *
cmdDw‹d
)

111 
NVME_CMD_FIFO_REG
 
nvmeReg
;

113 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_CMD_FIFO_REG_ADDR
);

115 if(
nvmeReg
.
cmdVÆid
 == 1)

117 
addr
;

118 
idx
;

119 *
qID
 = 
nvmeReg
.qID;

120 *
cmdSlŸTag
 = 
nvmeReg
.cmdSlotTag;

121 *
cmdSeqNum
 = 
nvmeReg
.cmdSeqNum;

123 
addr
 = 
NVME_CMD_SRAM_ADDR
 + (
nvmeReg
.
cmdSlŸTag
 * 64);

124 
idx
 = 0; idx < 16; idx++)

126 *(
cmdDw‹d
 + 
idx
Ë
	`IO_READ32
(
addr
 + (idx * 4));

130  ()
nvmeReg
.
cmdVÆid
;

131 
	}
}

133 
	$Œd_nvme_£t_auto_˝l
(
cmdSlŸTag
, 
•ecific
, 
°©usFõldW‹d
)

135 
NVME_CPL_FIFO_REG
 
nvmeReg
;

137 
nvmeReg
.
•ecific
 = specific;

138 
nvmeReg
.
cmdSlŸTag
 = cmdSlotTag;

139 
nvmeReg
.
°©usFõldW‹d
 = statusFieldWord;

140 
nvmeReg
.
˝lTy≥
 = 
AUTO_CPL_TYPE
;

143 
	`IO_WRITE32
((
NVME_CPL_FIFO_REG_ADDR
 + 4), 
nvmeReg
.
dw‹d
[1]);

144 
	`IO_WRITE32
((
NVME_CPL_FIFO_REG_ADDR
 + 8), 
nvmeReg
.
dw‹d
[2]);

145 
	}
}

147 
	$Œd_nvme_£t_¶Ÿ_ªÀa£
(
cmdSlŸTag
)

149 
NVME_CPL_FIFO_REG
 
nvmeReg
;

151 
nvmeReg
.
cmdSlŸTag
 = cmdSlotTag;

152 
nvmeReg
.
˝lTy≥
 = 
CMD_SLOT_RELEASE_TYPE
;

156 
	`IO_WRITE32
((
NVME_CPL_FIFO_REG_ADDR
 + 8), 
nvmeReg
.
dw‹d
[2]);

157 
	}
}

159 
	$Œd_nvme_£t_m™uÆ_˝l
(
sqId
, 
cid
, 
•ecific
, 
°©usFõldW‹d
)

161 
NVME_CPL_FIFO_REG
 
nvmeReg
;

163 
nvmeReg
.
cid
 = cid;

164 
nvmeReg
.
sqId
 = sqId;

165 
nvmeReg
.
•ecific
 = specific;

166 
nvmeReg
.
°©usFõldW‹d
 = statusFieldWord;

167 
nvmeReg
.
˝lTy≥
 = 
ONLY_CPL_TYPE
;

169 
	`IO_WRITE32
(
NVME_CPL_FIFO_REG_ADDR
, 
nvmeReg
.
dw‹d
[0]);

170 
	`IO_WRITE32
((
NVME_CPL_FIFO_REG_ADDR
 + 4), 
nvmeReg
.
dw‹d
[1]);

171 
	`IO_WRITE32
((
NVME_CPL_FIFO_REG_ADDR
 + 8), 
nvmeReg
.
dw‹d
[2]);

172 
	}
}

174 
	$Œd_nvme_£t_io_sq
(
ioSqIdx
, 
vÆid
, 
cqVe˘‹
, 
qSzõ
, 
pcõBa£AddrL
, 
pcõBa£AddrH
)

176 
NVME_IO_SQ_SET_REG
 
nvmeReg
;

177 
addr
;

179 
nvmeReg
.
vÆid
 = valid;

180 
nvmeReg
.
cqVe˘‹
 = cqVector;

181 
nvmeReg
.
sqSize
 = 
qSzõ
;

182 
nvmeReg
.
pcõBa£AddrL
 =ÖcieBaseAddrL;

183 
nvmeReg
.
pcõBa£AddrH
 =ÖcieBaseAddrH;

185 
addr
 = 
NVME_IO_SQ_SET_REG_ADDR
 + (
ioSqIdx
 * 8);

186 
	`IO_WRITE32
(
addr
, 
nvmeReg
.
dw‹d
[0]);

187 
	`IO_WRITE32
((
addr
 + 4), 
nvmeReg
.
dw‹d
[1]);

188 
	}
}

190 
	$Œd_nvme_£t_io_cq
(
ioCqIdx
, 
vÆid
, 
úqEn
, 
úqVe˘‹
, 
qSzõ
, 
pcõBa£AddrL
, 
pcõBa£AddrH
)

192 
NVME_IO_CQ_SET_REG
 
nvmeReg
;

193 
addr
;

195 
nvmeReg
.
vÆid
 = valid;

196 
nvmeReg
.
úqEn
 = irqEn;

197 
nvmeReg
.
úqVe˘‹
 = irqVector;

198 
nvmeReg
.
cqSize
 = 
qSzõ
;

199 
nvmeReg
.
pcõBa£AddrL
 =ÖcieBaseAddrL;

200 
nvmeReg
.
pcõBa£AddrH
 =ÖcieBaseAddrH;

202 
addr
 = 
NVME_IO_CQ_SET_REG_ADDR
 + (
ioCqIdx
 * 8);

203 
	`IO_WRITE32
(
addr
, 
nvmeReg
.
dw‹d
[0]);

204 
	`IO_WRITE32
((
addr
 + 4), 
nvmeReg
.
dw‹d
[1]);

206 
	}
}

	@hal/lld/lld_nvme.h

8 #i‚de‡
_LLD_NVME_H_


9 
	#_LLD_NVME_H_


	)

11 
	#HOST_IP_ADDR
 (
XPAR_NVME_CTRL_0_BASEADDR
)

	)

13 
	#NVME_STATUS_REG_ADDR
 (
HOST_IP_ADDR
 + 0x200)

	)

14 
	#NVME_ADMIN_QUEUE_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x21C)

	)

15 
	#NVME_IO_SQ_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x220)

	)

16 
	#NVME_IO_CQ_SET_REG_ADDR
 (
HOST_IP_ADDR
 + 0x260)

	)

18 
	#NVME_CMD_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x300)

	)

19 
	#NVME_CPL_FIFO_REG_ADDR
 (
HOST_IP_ADDR
 + 0x304)

	)

21 
	#NVME_CMD_SRAM_ADDR
 (
HOST_IP_ADDR
 + 0x10000)

	)

24 
	#ONLY_CPL_TYPE
 (0)

	)

25 
	#AUTO_CPL_TYPE
 (1)

	)

26 
	#CMD_SLOT_RELEASE_TYPE
 (2)

	)

28 
	#P_SLOT_TAG_WIDTH
 (10)

29 

	)

31 
	s_NVME_STATUS_REG


34 
	mdw‹d
;

36 
	mccEn
 :1;

37 
	mccShn
 :2;

38 
	mª£rved0
 :1;

39 
	mc°sRdy
 :1;

40 
	mc°sSh°
 :2;

41 
	mr°C¡
 :4;

42 
	mlökNum
 :2;

43 
	mlökEn
 :2;

44 
	mª£rved1
 :17;

47 } 
	tNVME_STATUS_REG
;

50 
	s_NVME_CMD_FIFO_REG


53 
	mdw‹d
;

55 
	mqID
 :4;

56 
	mª£rved0
 :1;

57 
	mcmdSlŸTag
 :
P_SLOT_TAG_WIDTH
;

58 
	mª£rved2
 :1;

59 
	mcmdSeqNum
 :8;

60 
	mª£rved3
 :(17-
P_SLOT_TAG_WIDTH
);

61 
	mcmdVÆid
 :1;

64 } 
	tNVME_CMD_FIFO_REG
;

67 
	s_NVME_CPL_FIFO_REG


70 
	mdw‹d
[3];

74 
	mcid
 :16;

75 
	msqId
 :4;

76 
	mª£rved0
 :12;

79 
	m•ecific
;

81 
	mcmdSlŸTag
 :
P_SLOT_TAG_WIDTH
;

82 
	mª£rved1
 :(14- 
P_SLOT_TAG_WIDTH
);

83 
	m˝lTy≥
 :2;

86 
	m°©usFõldW‹d
;

89 
	mª£rved0
 :1;

90 
	mSC
 :8;

91 
	mSCT
 :3;

92 
	mª£rved1
 :2;

93 
	mMORE
 :1;

94 
	mDNR
 :1;

95 }
	m°©usFõld
;

99 } 
	tNVME_CPL_FIFO_REG
;

102 
	s_NVME_ADMIN_QUEUE_SET_REG


105 
	mdw‹d
;

107 
	mcqVÆid
 :1;

108 
	msqVÆid
 :1;

109 
	mcqIrqEn
 :1;

110 
	mª£rved0
 :29;

113 } 
	tNVME_ADMIN_QUEUE_SET_REG
;

116 
	s_NVME_IO_SQ_SET_REG


119 
	mdw‹d
[2];

121 
	mpcõBa£AddrL
;

122 
	mpcõBa£AddrH
 :16;

123 
	mvÆid
 :1;

124 
	mcqVe˘‹
 :4;

125 
	mª£rved1
 :3;

126 
	msqSize
 :8;

129 } 
	tNVME_IO_SQ_SET_REG
;

133 
	s_NVME_IO_CQ_SET_REG


136 
	mdw‹d
[2];

138 
	mpcõBa£AddrL
;

139 
	mpcõBa£AddrH
 :16;

140 
	mvÆid
 :1;

141 
	múqVe˘‹
 :3;

142 
	múqEn
 :1;

143 
	mª£rved1
 :3;

144 
	mcqSize
 :8;

147 } 
	tNVME_IO_CQ_SET_REG
;

152 
	s_NVME_CMD_SRAM


154 
	mdw‹d
[128][16];

155 } 
	t_NVME_CMD_SRAM
;

158 
Œd_pcõ_async_ª£t
(
r°C¡
);

159 
Œd_pcõ_£t_lök_width
(
lökNum
);

160 
Œd_nvme_gë_cc_í
();

161 
Œd_nvme_£t_c°s_rdy
(
rdy
);

162 
Œd_nvme_£t_c°s_sh°
(
sh°
);

163 
Œd_nvme_£t_admö_queue
(
sqVÆid
, 
cqVÆid
, 
cqIrqEn
);

165 
Œd_nvme_gë_cmd
(*
qID
, *
cmdSlŸTag
, *
cmdSeqNum
, *
cmdDw‹d
);

168 
Œd_nvme_£t_auto_˝l
(
cmdSlŸTag
, 
•ecific
, 
°©usFõldW‹d
);

169 
Œd_nvme_£t_¶Ÿ_ªÀa£
(
cmdSlŸTag
);

170 
Œd_nvme_£t_m™uÆ_˝l
(
sqId
, 
cid
, 
•ecific
, 
°©usFõldW‹d
);

171 
Œd_nvme_£t_io_sq
(
ioSqIdx
, 
vÆid
, 
cqVe˘‹
, 
qSzõ
, 
pcõBa£AddrL
, 
pcõBa£AddrH
);

172 
Œd_nvme_£t_io_cq
(
ioCqIdx
, 
vÆid
, 
úqEn
, 
úqVe˘‹
, 
qSzõ
, 
pcõBa£AddrL
, 
pcõBa£AddrH
);

	@hal/lld/lld_pcie.c

	@hal/lld/lld_pcie.h

8 #i‚de‡
_LLD_PCIE_H_


9 
	#_LLD_PCIE_H_


	)

12 
Œd_pcõ_async_ª£t
(
r°C¡
);

13 
Œd_pcõ_£t_lök_width
(
lökNum
);

	@host/nvme/io_access.h

48 #i‚de‡
__IO_ACCESS_H_


49 
	#__IO_ACCESS_H_


	)

51 
	#IO_WRITE32
(
addr
, 
vÆ
Ë*((vﬁ©ûê*)◊ddr)Ë
	)
val

52 
	#IO_READ32
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

	@host/nvme/nvme.h

51 #i‚de‡
__NVME_H_


52 
	#__NVME_H_


	)

55 
	#IFLOOP_DEBUG
 (0)

	)

56 
	#PRINT_DEBUG
 (0)

	)

57 
	#PRINT_DEBUG_MAP
 (1)

	)

58 
	#BARRIER_IN_DMA
 (1)

	)

59 
	#SUPPORT_BARRIER_FTL
 (1)

	)

60 
	#SUPPORT_INSERT_SUSPENSION_LIST
 (1)

	)

61 
	#SUPPORT_SEARCH_SUSPENSION_LIST
 (1)

	)

63 
	#MEASURE_LATENCY
 (1)

	)

66 
	#INVALID_CMD_SLOT_TAG
 (0xFFFF)

	)

68 
	#MAX_NUM_OF_IO_SQ
 8

	)

69 
	#MAX_NUM_OF_IO_CQ
 8

	)

71 
	#ADMIN_CMD_DRAM_DATA_BUFFER
 0x00200000

	)

73 
	#STORAGE_CAPACITY_L
 0x00000000

74 
	#STORAGE_CAPACITY_H
 0x00000000

	)

76 
	#MAX_NUM_OF_NLB
 (512 * 1024 / 4096)

	)

79 
	#NVME_OPC_ADMIN_DELETE_IO_SQ
 0x00

	)

80 
	#NVME_OPC_ADMIN_CREATE_IO_SQ
 0x01

	)

81 
	#NVME_OPC_ADMIN_GET_LOG_PAGE
 0x02

	)

82 
	#NVME_OPC_ADMIN_DELETE_IO_CQ
 0x04

	)

83 
	#NVME_OPC_ADMIN_CREATE_IO_CQ
 0x05

	)

84 
	#NVME_OPC_ADMIN_IDENTIFY
 0x06

	)

85 
	#NVME_OPC_ADMIN_ABORT
 0x08

	)

86 
	#NVME_OPC_ADMIN_SET_FEATURES
 0x09

	)

87 
	#NVME_OPC_ADMIN_GET_FEATURES
 0x0A

	)

88 
	#NVME_OPC_ADMIN_ASYNCHRONOUS_EVENT_REQUEST
 0x0C

	)

89 
	#NVME_OPC_ADMIN_FIRMWARE_ACTIVATE
 0x10

	)

90 
	#NVME_OPC_ADMIN_FIRMWARE_IMAGE_DOWNLOAD
 0x11

	)

91 
	#NVME_OPC_ADMIN_FORMAT_NVM
 0x80

	)

92 
	#NVME_OPC_ADMIN_DOORBELL_BUFFER_CONFIG
 0x7C

	)

93 
	#NVME_OPC_ADMIN_SECURITY_SEND
 0x81

	)

94 
	#NVME_OPC_ADMIN_SECURITY_RECEIVE
 0x82

	)

97 
	#NVME_OPC_NVM_FLUSH
 0x00

	)

98 
	#NVME_OPC_NVM_WRITE
 0x01

	)

99 
	#NVME_OPC_NVM_READ
 0x02

	)

100 
	#NVME_OPC_NVM_WRITE_UNCORRECTABLE
 0x04

	)

101 
	#NVME_OPC_NVM_COMPARE
 0x05

	)

102 
	#NVME_OPC_NVM_DATASET_MANAGEMENT
 0x09

	)

105 
	#SCT_GENERIC_COMMAND_STATUS
 0

	)

106 
	#SCT_COMMAND_SPECIFIC_STATUS
 1

	)

107 
	#SCT_MEDIA_AND_DATA_INTEGRITY_ERRORS
 2

	)

108 
	#SCT_VENDOR_SPECIFIC
 7

	)

111 
	#SC_SUCCESSFUL_COMPLETION
 0x00

	)

112 
	#SC_INVALID_COMMAND_OPCODE
 0x01

	)

113 
	#SC_INVALID_FIELD_IN_COMMAND
 0x02

	)

114 
	#SC_COMMAND_ID_CONFLICT
 0x03

	)

115 
	#SC_DATA_TRANSFER_ERROR
 0x04

	)

116 
	#SC_COMMANDS_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION
 0x05

	)

117 
	#SC_INTERNAL_DEVICE_ERROR
 0x06

	)

118 
	#SC_COMMAND_ABORT_REQUESTED
 0x07

	)

119 
	#SC_COMMAND_ABORTED_DUE_TO_SQ_DELETION
 0x08

	)

120 
	#SC_COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND
 0x09

	)

121 
	#SC_COMMAND_ABORTED_DUE_TO_MISSING_FUSED_COMMAND
 0x0A

	)

122 
	#SC_INVALID_NAMESPACE_OR_FORMAT
 0x0B

	)

123 
	#SC_COMMAND_SEQUENCE_ERROR
 0x0C

	)

124 
	#SC_INVALID_SGL_SEGMENT_DESCRIPTOR
 0x0D

	)

125 
	#SC_INVALID_NUMBER_OF_SGL_DESCRIPTORS
 0x0E

	)

126 
	#SC_DATA_SGL_LENGTH_INVALID
 0x0F

	)

127 
	#SC_METADATA_SGL_LENGTH_INVALID
 0x10

	)

128 
	#SC_SGL_DESCRIPTOR_TYPE_INVALID
 0x11

	)

129 
	#SC_INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER
 0x12

	)

130 
	#SC_PRP_OFFSET_INVALID
 0x13

	)

131 
	#SC_ATOMIC_WRITE_UNIT_EXCEEDED
 0x14

	)

132 
	#SC_SGL_OFFSET_INVALID
 0x16

	)

133 
	#SC_SGL_SUB_TYPE_INVALID
 0x17

	)

134 
	#SC_HOST_IDENTIFIER_INCONSISTENT_FORMAT
 0x18

	)

135 
	#SC_KEEP_ALIVE_TIMEOUT_EXPIRED
 0x19

	)

136 
	#SC_KEEP_ALIVE_TIMEOUT_INVALID
 0x1A

	)

139 
	#SC_LBA_OUT_OF_RANGE
 0x80

	)

140 
	#SC_CAPACITY_EXCEEDED
 0x81

	)

141 
	#SC_NAMESPACE_NOT_READY
 0x82

	)

142 
	#SC_RESERVATION_CONFLICT
 0x83

	)

143 
	#SC_FORMAT_IN_PROGRESS
 0x84

	)

146 
	#SC_COMPLETION_QUEUE_INVALID
 0x00

147 
	#SC_INVALID_QUEUE_IDENTIFIER
 0x01

148 
	#SC_INVALID_QUEUE_SIZE
 0x02

149 
	#SC_ABORT_COMMAND_LIMIT_EXCEEDED
 0x03

150 
	#SC_ASYNCHRONOUS_EVENT_REQUEST_LIMIT_EXCEEDED
 0x05

151 
	#SC_INVALID_FIRMWARE_SLOT
 0x06

152 
	#SC_INVALID_FIRMWARE_IMAGE
 0x07

153 
	#SC_INVALID_INTERRUPT_VECTOR
 0x08

154 
	#SC_INVALID_LOG_PAGE
 0x09

155 
	#SC_INVALID_FORMAT
 0x0A

156 
	#SC_FIRMWARE_ACTIVATION_REQUIRES_CONVENTIONAL_RESET
 0x0B

157 
	#SC_INVALID_QUEUE_DELETION
 0x0C

158 
	#SC_FEATURE_IDENTIFIER_NOT_SAVEABLE
 0x0D

159 
	#SC_FEATURE_NOT_CHANGEABLE
 0x0E

160 
	#SC_FEATURE_NOT_NAMESPACE_SPECIFIC
 0x0F

161 
	#SC_FIRMWARE_ACTIVATION_REQUIRES_NVM_SUBSYSTEM_RESET
 0x10

162 
	#SC_FIRMWARE_ACTIVATION_REQUIRES_RESET
 0x11

163 
	#SC_FIRMWARE_ACTIVATION_REQUIRES_MAXIMUM_TIME_VIOLATION
 0x12

164 
	#SC_FIRMWARE_ACTIVATION_PROHIBITED
 0x13

165 
	#SC_OVERLAPPING_RANGE
 0x14

166 
	#SC_NAMESPACE_INSUFFICIENT_CAPACITY
 0x15

167 
	#SC_NAMESPACE_IDENTIFIER_UNAVAILABLE
 0x16

168 
	#SC_NAMESPACE_ALREADY_ATTACHED
 0x18

169 
	#SC_NAMESPACE_IS_PRIVATE
 0x19

170 
	#SC_NAMESPACE_NOT_ATTACHED
 0x1A

171 
	#SC_THIN_PROVISIONING_NOT_SUPPORTED
 0x1B

172 
	#SC_CONTROLLER_LIST_INVALID
 0x1C

173 

	)

175 
	#SC_CONFLICTING_ATTRIBUTES
 0x80

176 
	#SC_INVALID_PROTECTION_INFORMATION
 0x81

177 
	#SC_ATTEMPTED_WRITE_TO_READ_ONLY_RANGE
 0x82

178 

	)

180 
	#SC_WRITE_FAULT
 0x80

	)

181 
	#SC_UNRECOVERED_READ_ERROR
 0x81

	)

182 
	#SC_END_TO_END_GUARD_CHECK_ERROR
 0x82

	)

183 
	#SC_END_TO_END_APPLICATION_TAG_CHECK_ERROR
 0x83

	)

184 
	#SC_END_TO_END_REFERENCE_TAG_CHECK_ERROR
 0x84

	)

185 
	#SC_COMPARE_FAILURE
 0x85

	)

186 
	#SC_ACCESS_DENIED
 0x86

	)

187 
	#SC_DEALLOCATED_OR_UNWRITTEN_LOGICAL_BLOCK
 0x87

	)

192 
	#FID_ARBITRATION
 0x01

	)

193 
	#FID_POWER_MANAGEMENT
 0x02

	)

194 
	#FID_LBA_RANGE_TYPE
 0x03

	)

195 
	#FID_TEMPERATURE_THRESHOLD
 0x04

	)

196 
	#FID_ERROR_RECOVERY
 0x05

	)

197 
	#FID_VOLATILE_WRITE_CACHE
 0x06

	)

198 
	#FID_NUMBER_OF_QUEUES
 0x07

	)

199 
	#FID_INTERRUPT_COALESCING
 0x08

	)

200 
	#FID_INTERRUPT_VECTOR_CONFIGURATION
 0x09

	)

201 
	#FID_WRITE_ATOMICITY
 0x0A

	)

202 
	#FID_ASYNCHRONOUS_EVENT_CONFIGURATION
 0x0B

	)

203 
	#FID_POWER_STATE_TRANSITION
 0x0C

	)

204 
	#FID_TIMESTAMP
 0x0E

	)

205 
	#FID_SOFTWARE_PROGRESS_MARKER
 0x80

	)

208 
	#NVME_TASK_IDLE
 0x0

	)

209 
	#NVME_TASK_WAIT_CC_EN
 0x1

	)

210 
	#NVME_TASK_RUNNING
 0x2

	)

211 
	#NVME_TASK_SHUTDOWN
 0x3

	)

212 
	#NVME_TASK_WAIT_RESET
 0x4

	)

213 
	#NVME_TASK_RESET
 0x5

	)

214 #¥agm®
∑ck
(
push
, 1)

218 
	s_NVME_ADMIN_COMMAND


221 
	mdw‹d
[16];

224 
	mOPC
;

225 
	mFUSE
 :2;

226 
	mª£rved0
 :5;

227 
	mPSDT
 :1;

228 
	mCID
;

230 
	mNSID
;

231 
	mª£rved1
[2];

232 
	mMPTR
[2];

233 
	mPRP1
[2];

234 
	mPRP2
[2];

235 
	mdw‹d10
;

236 
	mdw‹d11
;

237 
	mdw‹d12
;

238 
	mdw‹d13
;

239 
	mdw‹d14
;

240 
	mdw‹d15
;

243 }
	tNVME_ADMIN_COMMAND
;

245 
	s_ADMIN_SET_FEATURES_NUMBER_OF_QUEUES_COMPLETE


248 
	mdw‹d
;

250 
	mNCQA
;

251 
	mNSQA
;

254 } 
	tADMIN_SET_FEATURES_NUMBER_OF_QUEUES_COMPLETE
;

256 
	s_NVME_IO_COMMAND


259 
	mdw‹d
[16];

262 
	mOPC
;

263 
	mFUSE
 :2;

264 
	mª£rved0
 :5;

265 
	mPSDT
 :1;

266 
	mCID
;

268 
	mNSID
;

271 
	m°ªam_id_1
;

272 
	m°ªam_id_2
;

273 
	mïoch_id_1
;

274 
	mïoch_id_2
;

279 
	mMPTR
[2];

280 
	mPRP1
[2];

281 
	mPRP2
[2];

282 
	mdw‹d10
;

283 
	mdw‹d11
;

284 
	mdw‹d12
;

285 
	mdw‹d13
;

286 
	mdw‹d14
;

287 
	mdw‹d15
;

290 }
	tNVME_IO_COMMAND
;

292 
	s_NVME_COMPLETION


295 
	mdw‹d
[2];

297 
	m•ecific
;

299 
	m°©usFõldW‹d
;

302 
	mª£rved0
 :1;

303 
	mSC
 :8;

304 
	mSCT
 :3;

305 
	mª£rved1
 :2;

306 
	mMORE
 :1;

307 
	mDNR
 :1;

308 }
	m°©usFõld
;

309 
	mdw‹d1
;

315 }
	tNVME_COMPLETION
;

317 
	s_ADMIN_SET_FEATURES_DW10


320 
	mdw‹d
;

322 
	mFID
;

323 
	mª£rved0
[2];

324 
	mª£rved1
 :7;

325 
	mSV
 :1;

328 } 
	tADMIN_SET_FEATURES_DW10
;

330 
	s_ADMIN_SET_FEATURES_NUMBER_OF_QUEUES_DW11


333 
	mdw‹d
;

335 
	mNCQR
;

336 
	mNSQR
;

339 } 
	tADMIN_SET_FEATURES_NUMBER_OF_QUEUES_DW11
;

343 
	s_ADMIN_GET_FEATURES_DW10


346 
	mdw‹d
;

348 
	mFID
;

349 
	mSEL
 :3;

350 
	mª£rved0
 :5;

351 
	mª£rved1
[2];

354 } 
	tADMIN_GET_FEATURES_DW10
;

357 
	s_ADMIN_CREATE_IO_CQ_DW10


360 
	mdw‹d
;

362 
	mQID
;

363 
	mQSIZE
;

366 } 
	tADMIN_CREATE_IO_CQ_DW10
;

368 
	s_ADMIN_CREATE_IO_CQ_DW11


371 
	mdw‹d
;

373 
	mPC
 :1;

374 
	mIEN
 :1;

375 
	mª£rved0
 :14;

376 
	mIV
;

379 } 
	tADMIN_CREATE_IO_CQ_DW11
;

383 
	s_ADMIN_DELETE_IO_CQ_DW10


386 
	mdw‹d
;

388 
	mQID
;

389 
	mª£rved0
;

392 } 
	tADMIN_DELETE_IO_CQ_DW10
;

397 
	s_ADMIN_CREATE_IO_SQ_DW10


400 
	mdw‹d
;

402 
	mQID
;

403 
	mQSIZE
;

406 } 
	tADMIN_CREATE_IO_SQ_DW10
;

408 
	s_ADMIN_CREATE_IO_SQ_DW11


411 
	mdw‹d
;

413 
	mPC
 :1;

414 
	mQPRIO
 :2;

415 
	mª£rved0
 :13;

416 
	mCQID
;

419 } 
	tADMIN_CREATE_IO_SQ_DW11
;

422 
	s_ADMIN_DELETE_IO_SQ_DW10


425 
	mdw‹d
;

427 
	mQID
;

428 
	mª£rved0
;

431 } 
	tADMIN_DELETE_IO_SQ_DW10
;

434 
	s_ADMIN_IDENTIFY_COMMAND_DW10


437 
	mdw‹d
;

439 
	mCNS
 :1;

440 
	mª£rved0
 :31;

443 } 
	tADMIN_IDENTIFY_COMMAND_DW10
;

446 
	s_ADMIN_GET_LOG_PAGE_DW10


449 
	mdw‹d
;

451 
	mLID
;

452 
	mª£rved0
;

453 
	mNUMD
 :12;

454 
	mª£rved1
 :4;

457 } 
	tADMIN_GET_LOG_PAGE_DW10
;

460 
	s_ADMIN_IDENTIFY_POWER_STATE_DESCRIPTOR


463 
	mdw‹d
[8];

465 
	mMP
;

466 
	mª£rved0
 :8;

467 
	mMPS
 :1;

468 
	mNOPS
 :1;

469 
	mª£rved1
 :6;

470 
	mENLAT
;

471 
	mEXLAT
;

472 
	mRRT
 :5;

473 
	mª£rved2
 :3;

474 
	mRRL
 :5;

475 
	mª£rved3
 :3;

476 
	mRWT
 :5;

477 
	mª£rved4
 :3;

478 
	mRWL
 :5;

479 
	mª£rved5
 :3;

480 
	mª£rved6
[4];

483 } 
	tADMIN_IDENTIFY_POWER_STATE_DESCRIPTOR
;

486 
	s_ADMIN_IDENTIFY_CONTROLLER


488 
	mVID
;

489 
	mSSVID
;

490 
	mSN
[20];

491 
	mMN
[40];

492 
	mFR
[8];

493 
	mRAB
;

494 
	mIEEE
[3];

495 
	mCMIC
;

496 
	mMDTS
;

497 
	mCNTLID
;

498 
	mª£rved0
[176];

502 
	msuµ‹tsSecurôySídSecurôyRe˚ive
 :1;

503 
	msuµ‹tsF‹m©NVM
 :1;

504 
	msuµ‹tsFúmw¨eA˘iv©eFúmw¨eDow∆ﬂd
 :1;

505 
	mª£rved0
 :13;

506 } 
	mOACS
;

508 
	mACL
;

509 
	mAERL
;

513 
	mfú°Fúmw¨eSlŸRódO∆y
 :1;

514 
	msuµ‹ãdNumbîOfFúmw¨eSlŸs
 :3;

515 
	mª£rved0
 :4;

516 } 
	mFRMW
;

520 
	msuµ‹tsSMARTHó…hInf‹m©i⁄LogPage
 :1;

521 
	msuµŸtsComm™dEf„˘sLogPage
 :1;

522 
	mª£rved0
 :6;

523 } 
	mLPA
;

525 
	mELPE
;

526 
	mNPSS
;

528 
	mAVSCC
 :1;

529 
	mª£rved1
 :7;

531 
	mAPSTA
 :1;

532 
	mª£rved2
 :7;

534 
	mª£rved3
[246];

538 
	mªquúedSubmissi⁄QueueE¡rySize
 :4;

539 
	mmaximumSubmissi⁄QueueE¡rySize
 :4;

540 } 
	mSQES
;

544 
	mªquúedCom∂ëi⁄QueueE¡rySize
 :4;

545 
	mmaximumCom∂ëi⁄QueueE¡rySize
 :4;

546 } 
	mCQES
;

548 
	mª£rved4
[2];

549 
	mNN
;

553 
	msuµ‹tsCom∑ª
 :1;

554 
	msuµ‹tsWrôeUnc‹ª˘abÀ
 :1;

555 
	msuµ‹tsD©aSëM™agemít
 :1;

556 
	mª£rved0
 :13;

557 } 
	mONCS
;

561 
	msuµ‹tsCom∑ªWrôe
 :1;

562 
	mª£rved0
 :15;

563 } 
	mFUSES
;

567 
	mf‹m©AµlõsToAŒName•a˚s
 :1;

568 
	m£cuªEø£AµlõsToAŒName•a˚s
 :1;

569 
	msuµ‹tsCry±ogøphicEø£
 :1;

570 
	mª£rved0
 :5;

571 } 
	mFNA
;

575 
	m¥e£¡
 :1;

576 
	mª£rved0
 :7;

577 } 
	mVWC
;

579 
	mAWUN
;

580 
	mAWUPF
;

582 
	mNVSCC
 :1;

583 
	mª£rved5
 :7;

585 
	mª£rved6
;

587 
	mACWU
;

589 
	mª£rved7
[2];

593 
	msuµ‹tsSGL
 :1;

594 
	mª£rved0
 :15;

595 
	msuµ‹tsSGLBôBuckëDes¸ùt‹
 :1;

596 
	mª£rved1
 :15;

597 } 
	mSGLS
;

600 
	mª£rved8
[164];

601 
	mª£rved9
[1344];

603 
ADMIN_IDENTIFY_POWER_STATE_DESCRIPTOR
 
	mPSDx
[32];

605 
	mVS
[1024];

607 } 
	tADMIN_IDENTIFY_CONTROLLER
;

613 
	s_ADMIN_IDENTIFY_FORMAT_DATA


615 
	mMS
;

616 
	mLBADS
;

617 
	mRP
 :2;

618 
	mª£rved
 :6;

619 } 
	tADMIN_IDENTIFY_FORMAT_DATA
;

622 
	s_ADMIN_IDENTIFY_NAMESPACE


624 
	mNSZE
[2];

625 
	mNCAP
[2];

626 
	mNUSE
[2];

630 
	msuµ‹tsThöProvisi⁄ög
 :1;

631 
	mª£rved0
 :7;

632 } 
	mNSFEAT
;

634 
	mNLBAF
;

638 
	msuµ‹ãdCombö©i⁄
 :4;

639 
	msuµ‹tsMëad©aAtEndOfLBA
 :1;

640 
	mª£rved0
 :3;

641 } 
	mFLBAS
;

645 
	msuµ‹tsMëad©aAsP¨tOfLBA
 :1;

646 
	msuµ‹tsMëad©aAsSïî©e
 :1;

647 
	mª£rved0
 :6;

648 } 
	mMC
;

653 
	msuµ‹tsPrŸe˘i⁄Ty≥1
 :1;

654 
	msuµ‹tsPrŸe˘i⁄Ty≥2
 :1;

655 
	msuµ‹tsPrŸe˘i⁄Ty≥3
 :1;

656 
	msuµ‹tsPrŸe˘i⁄Fú°8
 :1;

657 
	msuµ‹tsPrŸe˘i⁄La°8
 :1;

658 
	mª£rved0
 :3;

659 } 
	mDPC
;

663 
	m¥Ÿe˘i⁄E«bÀd
 :3;

664 
	m¥Ÿe˘i⁄InFú°8
 :1;

665 
	mª£rved0
 :4;

666 } 
	mDPS
;

670 
	msuµ‹tsMu…ù©hIOSh¨ög
 :1;

671 
	mª£rved0
 :7;

672 } 
	mNMIC
;

676 
	msuµ‹tsPîsi°ThroughPowîLoss
 :1;

677 
	msuµ‹tsWrôeEx˛usiveRe£rv©i⁄
 :1;

678 
	msuµ‹tsWrôeEx˛usiveRegi°ø¡s
 :1;

679 
	msuµ‹tsEx˛usiveAc˚ssRegi°ø¡s
 :1;

680 
	msuµ‹tsWrôeEx˛usiveAŒRegi°ø¡s
 :1;

681 
	msuµ‹tsEx˛usiveAc˚ssAŒRegi°ø¡s
 :1;

682 
	mª£rved0
 :2;

683 } 
	mRESCAP
;

685 
	mª£rved0
[88];

686 
	mEUI64
[8];

688 
ADMIN_IDENTIFY_FORMAT_DATA
 
	mLBAFx
[16];

690 
	mª£rved1
[192];

691 
	mVS
[3712];

693 } 
	tADMIN_IDENTIFY_NAMESPACE
;

697 
	s_IO_WRITE_COMMAND_DW12


700 
	mdw‹d
;

702 
	mNLB
;

703 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

704 
	mª£rved0
 :9;

705 
	mb¨rõr_Êag
 :1;

707 
	mª£rved0
 :10;

709 
	mPRINFO
 :4;

710 
	mFUA
 :1;

711 
	mLR
 :1;

714 } 
	tIO_WRITE_COMMAND_DW12
;

716 
	s_IO_WRITE_COMMAND_DW13


719 
	mdw‹d
;

723 
	mAc˚ssFªquícy
 :4;

724 
	mAc˚ssL©ícy
 :2;

725 
	mSequítülReque°
 :1;

726 
	mIncom¥essibÀ
 :1;

727 } 
	mDSM
;

728 
	mª£rved0
[3];

731 } 
	tIO_WRITE_COMMAND_DW13
;

733 
	s_IO_WRITE_COMMAND_DW15


736 
	mdw‹d
;

738 
	mELBAT
;

739 
	mELBATM
;

742 } 
	tIO_WRITE_COMMAND_DW15
;

746 
	s_IO_READ_COMMAND_DW12


749 
	mdw‹d
;

751 
	mNLB
;

752 
	mª£rved0
 :10;

753 
	mPRINFO
 :4;

754 
	mFUA
 :1;

755 
	mLR
 :1;

758 } 
	tIO_READ_COMMAND_DW12
;

760 
	s_IO_READ_COMMAND_DW13


763 
	mdw‹d
;

767 
	mAc˚ssFªquícy
 :4;

768 
	mAc˚ssL©ícy
 :2;

769 
	mSequítülReque°
 :1;

770 
	mIncom¥essibÀ
 :1;

771 } 
	mDSM
;

772 
	mª£rved0
[3];

775 } 
	tIO_READ_COMMAND_DW13
;

777 
	s_IO_READ_COMMAND_DW15


780 
	mdw‹d
;

782 
	mELBAT
;

783 
	mELBATM
;

786 } 
	tIO_READ_COMMAND_DW15
;

790 
	s_IO_DATASET_MANAGEMENT_COMMAND_DW10


792 
	mNR
 :8;

793 
	mª£rved0
 :24;

794 } 
	t_IO_DATASET_MANAGEMENT_COMMAND_DW10
;

796 
	s_IO_DATASET_MANAGEMENT_COMMAND_DW11


798 
	mIDR
 :1;

799 
	mIDW
 :1;

800 
	mAD
 :1;

801 
	mª£rved0
 :29;

802 } 
	t_IO_DATASET_MANAGEMENT_COMMAND_DW11
;

804 
	s_DATASET_MANAGEMENT_CONTEXT_ATTRIBUTES


806 
	mAF
 :4;

807 
	mAL
 :2;

808 
	mª£rved0
 :2;

809 
	mSR
 :1;

810 
	mSW
 :1;

811 
	mWP
 :1;

812 
	mª£rved1
 :13;

813 
	mComm™dAc˚ssSize
 :8;

814 } 
	tDATASET_MANAGEMENT_CONTEXT_ATTRIBUTES
;

816 
	s_DATASET_MANAGEMENT_RANGE


818 
DATASET_MANAGEMENT_CONTEXT_ATTRIBUTES
 
	mC⁄ãxtAâribuãs
;

819 
	mÀngthInLogiˇlBlocks
;

820 
	m°¨tögLBA
[2];

821 } 
	tDATASET_MANAGEMENT_RANGE
;

823 #¥agm®
∑ck
(
p›
)

826 
	s_NVME_ADMIN_QUEUE_STATUS


828 
	míabÀ
;

829 
	msqVÆid
;

830 
	mcqVÆid
;

831 
	múqEn
;

832 } 
	tNVME_ADMIN_QUEUE_STATUS
;

834 
	s_NVME_IO_SQ_STATUS


836 
	mvÆid
;

837 
	mcqVe˘‹
;

838 
	mqSzõ
;

839 
	mpcõBa£AddrL
;

840 
	mpcõBa£AddrH
;

841 } 
	tNVME_IO_SQ_STATUS
;

843 
	s_NVME_IO_CQ_STATUS


845 
	mvÆid
;

846 
	múqEn
;

847 
	mª£rved0
;

848 
	múqVe˘‹
;

849 
	mqSzõ
;

850 
	mpcõBa£AddrL
;

851 
	mpcõBa£AddrH
;

852 } 
	tNVME_IO_CQ_STATUS
;

	@host/nvme/nvme_admin_cmd.c

48 
	~"xû_¥ötf.h
"

49 
	~"../../debug.h
"

50 
	~"°rög.h
"

51 
	~"io_ac˚ss.h
"

54 
	~"../../hÆ/Œd/Œd_hdma.h
"

55 
	~"../../hÆ/Œd/Œd_nvme.h
"

56 
	~"../../hÆ/hÆ_ho°.h
"

57 
	~"nvme.h
"

58 
	~"nvme_idítify.h
"

59 
	~"nvme_admö_cmd.h
"

60 
	~"nvme_maö.h
"

62 
NVME_TASK_CONTEXT
 
g_nvmeTask
;

64 
	$gë_num_of_queue
(
dw‹d11
)

66 
ADMIN_SET_FEATURES_NUMBER_OF_QUEUES_DW11
 
ªque°ed
;

67 
ADMIN_SET_FEATURES_NUMBER_OF_QUEUES_COMPLETE
 
Æloˇãd
;

69 
ªque°ed
.
dw‹d
 = 
dw‹d11
;

70 
	`xû_¥ötf
("Numbî o‡IO Submissi⁄ Queue†Reque°ed (NSQR, zîo-ba£d): 0x%04X\r\n", 
ªque°ed
.
NSQR
);

71 
	`xû_¥ötf
("Numbî o‡IO Com∂ëi⁄ Queue†Reque°ed (NCQR, zîo-ba£d): 0x%04X\r\n", 
ªque°ed
.
NCQR
);

74 if(
ªque°ed
.
NSQR
 >
MAX_NUM_OF_IO_SQ
)

76 
g_nvmeTask
.
numOfIOSubmissi⁄QueuesAŒoˇãd
 = 
MAX_NUM_OF_IO_SQ
;

80 
g_nvmeTask
.
numOfIOSubmissi⁄QueuesAŒoˇãd
 = 
ªque°ed
.
NSQR
 + 1;

83 
Æloˇãd
.
NSQA
 = 
g_nvmeTask
.
numOfIOSubmissi⁄QueuesAŒoˇãd
 - 1;

87 if(
ªque°ed
.
NCQR
 >
MAX_NUM_OF_IO_CQ
)

89 
g_nvmeTask
.
numOfIOCom∂ëi⁄QueuesAŒoˇãd
 = 
MAX_NUM_OF_IO_CQ
;

93 
g_nvmeTask
.
numOfIOCom∂ëi⁄QueuesAŒoˇãd
 = 
ªque°ed
.
NCQR
 + 1;

96 
Æloˇãd
.
NCQA
 = 
g_nvmeTask
.
numOfIOCom∂ëi⁄QueuesAŒoˇãd
 - 1;

98 
	`xû_¥ötf
("Numbî o‡IO Submissi⁄ Queue†AŒoˇãd (NSQA, zîo-ba£d): 0x%04X\r\n", 
Æloˇãd
.
NSQA
);

99 
	`xû_¥ötf
("Numbî o‡IO Com∂ëi⁄ Queue†AŒoˇãd (NCQA, zîo-ba£d): 0x%04X\r\n", 
Æloˇãd
.
NCQA
);

101  
Æloˇãd
.
dw‹d
;

102 
	}
}

104 
	$h™dÀ_£t_„©uªs
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

106 
ADMIN_SET_FEATURES_DW10
 
„©uªs
;

108 
„©uªs
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

110 
„©uªs
.
FID
)

112 
FID_NUMBER_OF_QUEUES
:

114 
nvmeCPL
->
dw‹d
[0] = 0x0;

115 
nvmeCPL
->
•ecific
 = 
	`gë_num_of_queue
(
nvmeAdmöCmd
->
dw‹d11
);

118 
FID_INTERRUPT_COALESCING
:

120 
nvmeCPL
->
dw‹d
[0] = 0x0;

121 
nvmeCPL
->
•ecific
 = 0x0;

124 
FID_ARBITRATION
:

126 
nvmeCPL
->
dw‹d
[0] = 0x0;

127 
nvmeCPL
->
•ecific
 = 0x0;

130 
FID_ASYNCHRONOUS_EVENT_CONFIGURATION
:

132 
nvmeCPL
->
dw‹d
[0] = 0x0;

133 
nvmeCPL
->
•ecific
 = 0x0;

136 
FID_VOLATILE_WRITE_CACHE
:

138 
	`xû_¥ötf
("Së VWC: %X\r\n", 
nvmeAdmöCmd
->
dw‹d11
);

139 
g_nvmeTask
.
ˇcheEn
 = (
nvmeAdmöCmd
->
dw‹d11
 & 0x1);

140 
nvmeCPL
->
dw‹d
[0] = 0x0;

141 
nvmeCPL
->
•ecific
 = 0x0;

144 
FID_POWER_MANAGEMENT
:

146 
nvmeCPL
->
dw‹d
[0] = 0x0;

147 
nvmeCPL
->
•ecific
 = 0x0;

150 
FID_TIMESTAMP
:

152 
nvmeCPL
->
dw‹d
[0] = 0x0;

153 
nvmeCPL
->
•ecific
 = 0x0;

158 
	`xû_¥ötf
("NŸ Suµ‹àFID (Së): %X\r\n", 
„©uªs
.
FID
);

159 
	`ASSERT
(0);

163 
	`xû_¥ötf
("Së Fótuª FID:%X\r\n", 
„©uªs
.
FID
);

164 
	}
}

166 
	$h™dÀ_gë_„©uªs
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

168 
ADMIN_GET_FEATURES_DW10
 
„©uªs
;

169 
NVME_COMPLETION
 
˝l
;

171 
„©uªs
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

173 
„©uªs
.
FID
)

175 
FID_LBA_RANGE_TYPE
:

177 
	`ASSERT
(
nvmeAdmöCmd
->
NSID
 == 1);

179 
˝l
.
dw‹d
[0] = 0x0;

180 
˝l
.
°©usFõld
.
SC
 = 
SC_INVALID_FIELD_IN_COMMAND
;

181 
nvmeCPL
->
dw‹d
[0] = 
˝l
.dword[0];

182 
nvmeCPL
->
•ecific
 = 0x0;

185 
FID_TEMPERATURE_THRESHOLD
:

187 
nvmeCPL
->
dw‹d
[0] = 0x0;

188 
nvmeCPL
->
•ecific
 = 
nvmeAdmöCmd
->
dw‹d11
;

191 
FID_VOLATILE_WRITE_CACHE
:

194 
	`xû_¥ötf
("Gë VWC: %X\r\n", 
g_nvmeTask
.
ˇcheEn
);

195 
nvmeCPL
->
dw‹d
[0] = 0x0;

196 
nvmeCPL
->
•ecific
 = 
g_nvmeTask
.
ˇcheEn
;

199 
FID_POWER_MANAGEMENT
:

201 
nvmeCPL
->
dw‹d
[0] = 0x0;

202 
nvmeCPL
->
•ecific
 = 0x0;

205 
FID_POWER_STATE_TRANSITION
:

207 
nvmeCPL
->
dw‹d
[0] = 0x0;

208 
nvmeCPL
->
•ecific
 = 0x0;

213 
nvmeCPL
->
dw‹d
[0] = 0x0;

214 
nvmeCPL
->
•ecific
 = 0x0;

219 
	`xû_¥ötf
("NŸ Suµ‹àFID (Gë): %X\r\n", 
„©uªs
.
FID
);

220 
	`ASSERT
(0);

224 
	`xû_¥ötf
("Gë Fótuª FID:%X\r\n", 
„©uªs
.
FID
);

225 
	}
}

227 
	$h™dÀ_¸óã_io_sq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

229 
ADMIN_CREATE_IO_SQ_DW10
 
sqInfo10
;

230 
ADMIN_CREATE_IO_SQ_DW11
 
sqInfo11
;

231 
NVME_IO_SQ_STATUS
 *
ioSqSètus
;

232 
ioSqIdx
;

234 
sqInfo10
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

235 
sqInfo11
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d11
;

237 
	`xû_¥ötf
("¸óã sq: 0x%08X, 0x%08X\r\n", 
sqInfo11
.
dw‹d
, 
sqInfo10
.dword);

242 
	`ASSERT
((
nvmeAdmöCmd
->
PRP1
[0] & 0x3) == 0 &&ÇvmeAdminCmd->PRP1[1] < 0x10000);

243 
	`ASSERT
(0 < 
sqInfo10
.
QID
 && sqInfo10.QID <8 && sqInfo10.
QSIZE
 < 0x100 && 0 < 
sqInfo11
.
CQID
 && sqInfo11.CQID <= 8);

245 
ioSqIdx
 = 
sqInfo10
.
QID
 - 1;

246 
ioSqSètus
 = 
g_nvmeTask
.
ioSqInfo
 + 
ioSqIdx
;

248 
ioSqSètus
->
vÆid
 = 1;

249 
ioSqSètus
->
qSzõ
 = 
sqInfo10
.
QSIZE
;

250 
ioSqSètus
->
cqVe˘‹
 = 
sqInfo11
.
CQID
;

251 
ioSqSètus
->
pcõBa£AddrL
 = 
nvmeAdmöCmd
->
PRP1
[0];

252 
ioSqSètus
->
pcõBa£AddrH
 = 
nvmeAdmöCmd
->
PRP1
[1];

254 
	`Œd_nvme_£t_io_sq
(
ioSqIdx
, 
ioSqSètus
->
vÆid
, ioSqSètus->
cqVe˘‹
, ioSqSètus->
qSzõ
, ioSqSètus->
pcõBa£AddrL
, ioSqSètus->
pcõBa£AddrH
);

256 
nvmeCPL
->
dw‹d
[0] = 0;

257 
nvmeCPL
->
•ecific
 = 0x0;

259 
	}
}

261 
	$h™dÀ_dñëe_io_sq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

263 
ADMIN_DELETE_IO_SQ_DW10
 
sqInfo10
;

264 
NVME_IO_SQ_STATUS
 *
ioSqSètus
;

265 
ioSqIdx
;

267 
sqInfo10
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

269 
	`xû_¥ötf
("dñëêsq: 0x%08X\r\n", 
sqInfo10
.
dw‹d
);

271 
ioSqIdx
 = ()
sqInfo10
.
QID
 - 1;

272 
ioSqSètus
 = 
g_nvmeTask
.
ioSqInfo
 + 
ioSqIdx
;

274 
ioSqSètus
->
vÆid
 = 0;

275 
ioSqSètus
->
cqVe˘‹
 = 0;

276 
ioSqSètus
->
qSzõ
 = 0;

277 
ioSqSètus
->
pcõBa£AddrL
 = 0;

278 
ioSqSètus
->
pcõBa£AddrH
 = 0;

280 
	`Œd_nvme_£t_io_sq
(
ioSqIdx
, 0, 0, 0, 0, 0);

282 
nvmeCPL
->
dw‹d
[0] = 0;

283 
nvmeCPL
->
•ecific
 = 0x0;

284 
	}
}

287 
	$h™dÀ_¸óã_io_cq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

289 
ADMIN_CREATE_IO_CQ_DW10
 
cqInfo10
;

290 
ADMIN_CREATE_IO_CQ_DW11
 
cqInfo11
;

291 
NVME_IO_CQ_STATUS
 *
ioCqSètus
;

292 
ioCqIdx
;

294 
cqInfo10
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

295 
cqInfo11
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d11
;

297 
	`xû_¥ötf
("¸óã cq: 0x%08X, 0x%08X\r\n", 
cqInfo11
.
dw‹d
, 
cqInfo10
.dword);

299 
	`ASSERT
(((
nvmeAdmöCmd
->
PRP1
[0] & 0x3) == 0) && (nvmeAdminCmd->PRP1[1] < 0x10000));

300 
	`ASSERT
(
cqInfo11
.
IV
 < 8 && 
cqInfo10
.
QSIZE
 < 0x100 && 0 < cqInfo10.
QID
 && cqInfo10.QID <= 8);

302 
ioCqIdx
 = 
cqInfo10
.
QID
 - 1;

303 
ioCqSètus
 = 
g_nvmeTask
.
ioCqInfo
 + 
ioCqIdx
;

305 
ioCqSètus
->
vÆid
 = 1;

306 
ioCqSètus
->
qSzõ
 = 
cqInfo10
.
QSIZE
;

307 
ioCqSètus
->
úqEn
 = 
cqInfo11
.
IEN
;

308 
ioCqSètus
->
úqVe˘‹
 = 
cqInfo11
.
IV
;

309 
ioCqSètus
->
pcõBa£AddrL
 = 
nvmeAdmöCmd
->
PRP1
[0];

310 
ioCqSètus
->
pcõBa£AddrH
 = 
nvmeAdmöCmd
->
PRP1
[1];

312 
	`Œd_nvme_£t_io_cq
(
ioCqIdx
, 
ioCqSètus
->
vÆid
, ioCqSètus->
úqEn
, ioCqSètus->
úqVe˘‹
, ioCqSètus->
qSzõ
, ioCqSètus->
pcõBa£AddrL
, ioCqSètus->
pcõBa£AddrH
);

314 
nvmeCPL
->
dw‹d
[0] = 0;

315 
nvmeCPL
->
•ecific
 = 0x0;

316 
	}
}

318 
	$h™dÀ_dñëe_io_cq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

320 
ADMIN_DELETE_IO_CQ_DW10
 
cqInfo10
;

321 
NVME_IO_CQ_STATUS
 *
ioCqSètus
;

322 
ioCqIdx
;

324 
cqInfo10
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

326 
	`xû_¥ötf
("dñëêcq: 0x%08X\r\n", 
cqInfo10
.
dw‹d
);

328 
ioCqIdx
 = ()
cqInfo10
.
QID
 - 1;

329 
ioCqSètus
 = 
g_nvmeTask
.
ioCqInfo
 + 
ioCqIdx
;

331 
ioCqSètus
->
vÆid
 = 0;

332 
ioCqSètus
->
úqVe˘‹
 = 0;

333 
ioCqSètus
->
qSzõ
 = 0;

334 
ioCqSètus
->
pcõBa£AddrL
 = 0;

335 
ioCqSètus
->
pcõBa£AddrH
 = 0;

337 
	`Œd_nvme_£t_io_cq
(
ioCqIdx
, 0, 0, 0, 0, 0, 0);

339 
nvmeCPL
->
dw‹d
[0] = 0;

340 
nvmeCPL
->
•ecific
 = 0x0;

341 
	}
}

343 
	$h™dÀ_idítify
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

345 
ADMIN_IDENTIFY_COMMAND_DW10
 
idítifyInfo
;

346 
pIdítifyD©a
 = 
ADMIN_CMD_DRAM_DATA_BUFFER
;

347 
¥p
[2];

348 
¥pLí
;

350 
idítifyInfo
.
dw‹d
 = 
nvmeAdmöCmd
->
dw‹d10
;

352 if(
idítifyInfo
.
CNS
 == 1)

354 if((
nvmeAdmöCmd
->
PRP1
[0] & 0x3Ë!0 || (nvmeAdmöCmd->
PRP2
[0] & 0x3) != 0)

355 
	`xû_¥ötf
("CI: %X, %X, %X, %X\r\n", 
nvmeAdmöCmd
->
PRP1
[1],ÇvmeAdmöCmd->PRP1[0],ÇvmeAdmöCmd->
PRP2
[1],ÇvmeAdminCmd->PRP2[0]);

357 
	`ASSERT
((
nvmeAdmöCmd
->
PRP1
[0] & 0x3Ë=0 && (nvmeAdmöCmd->
PRP2
[0] & 0x3) == 0);

358 
	`idítify_c⁄åﬁÀr
(
pIdítifyD©a
);

360 if(
idítifyInfo
.
CNS
 == 0)

362 if((
nvmeAdmöCmd
->
PRP1
[0] & 0x3Ë!0 || (nvmeAdmöCmd->
PRP2
[0] & 0x3) != 0)

363 
	`xû_¥ötf
("NI: %X, %X, %X, %X\r\n", 
nvmeAdmöCmd
->
PRP1
[1],ÇvmeAdmöCmd->PRP1[0],ÇvmeAdmöCmd->
PRP2
[1],ÇvmeAdminCmd->PRP2[0]);

365 
	`ASSERT
((
nvmeAdmöCmd
->
PRP1
[0] & 0x3Ë=0 && (nvmeAdmöCmd->
PRP2
[0] & 0x3) == 0);

366 
	`idítify_«me•a˚
(
pIdítifyD©a
);

369 
	`ASSERT
(0);

371 
¥p
[0] = 
nvmeAdmöCmd
->
PRP1
[0];

372 
¥p
[1] = 
nvmeAdmöCmd
->
PRP1
[1];

374 
¥pLí
 = 0x1000 - (
¥p
[0] & 0xFFF);

376 
	`Œd_hdma_£t_dúe˘_tx_dma
(
pIdítifyD©a
, 
¥p
[1],ÖΩ[0], 
¥pLí
);

378 if(
¥pLí
 != 0x1000)

380 
pIdítifyD©a
 =ÖIdítifyD©®+ 
¥pLí
;

381 
¥pLí
 = 0x1000 -ÖrpLen;

382 
¥p
[0] = 
nvmeAdmöCmd
->
PRP2
[0];

383 
¥p
[1] = 
nvmeAdmöCmd
->
PRP2
[1];

387 
	`Œd_hdma_£t_dúe˘_tx_dma
(
pIdítifyD©a
, 
¥p
[1],ÖΩ[0], 
¥pLí
);

390 
	`Œd_hdma_check_dúe˘_tx_dma_d⁄e
();

391 
nvmeCPL
->
dw‹d
[0] = 0;

392 
nvmeCPL
->
•ecific
 = 0x0;

393 
	}
}

395 
	$h™dÀ_gë_log_∑ge
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
)

422 
nvmeCPL
->
dw‹d
[0] = 0;

423 
nvmeCPL
->
•ecific
 = 0x9;

424 
	}
}

426 
	$AdmöComm™d_¥o˚ss
(
NVME_COMMAND_ENTRY
*
p_cmdC⁄ãxt
)

428 
NVME_COMPLETION
 
nvmeCPL
;

429 
NVME_ADMIN_COMMAND
 *
p_admöCmd
 = (NVME_ADMIN_COMMAND*)
p_cmdC⁄ãxt
->
cmdDw‹d
;

431 
›c
 = ()
p_admöCmd
->
OPC
;

432 
√edC∂
 = 1;

433 
√edSlŸRñó£
 = 0;

436 
	`xû_¥ötf
("OPC = 0x%X\r\n", 
p_admöCmd
->
OPC
);

437 
	`xû_¥ötf
("CID = 0x%X\r\n", 
p_admöCmd
->
CID
);

438 
	`xû_¥ötf
("NSID = 0x%X\r\n", 
p_admöCmd
->
NSID
);

439 
	`xû_¥ötf
("PRP1[63:32] = 0x%X, PRP1[31:0] = 0x%X\r\n", 
p_admöCmd
->
PRP1
[1],Ö_adminCmd->PRP1[0]);

440 
	`xû_¥ötf
("PRP2[63:32] = 0x%X, PRP2[31:0] = 0x%X\r\n", 
p_admöCmd
->
PRP2
[1],Ö_adminCmd->PRP2[0]);

441 
	`xû_¥ötf
("dw‹d10 = 0x%X\r\n", 
p_admöCmd
->
dw‹d10
);

442 
	`xû_¥ötf
("dw‹d11 = 0x%X\r\n", 
p_admöCmd
->
dw‹d11
);

443 
	`xû_¥ötf
("dw‹d12 = 0x%X\r\n", 
p_admöCmd
->
dw‹d12
);

444 
	`xû_¥ötf
("dw‹d13 = 0x%X\r\n", 
p_admöCmd
->
dw‹d13
);

445 
	`xû_¥ötf
("dw‹d14 = 0x%X\r\n", 
p_admöCmd
->
dw‹d14
);

446 
	`xû_¥ötf
("dw‹d15 = 0x%X\r\n", 
p_admöCmd
->
dw‹d15
);

449 
›c
)

451 
NVME_OPC_ADMIN_SET_FEATURES
:

453 
	`h™dÀ_£t_„©uªs
(
p_admöCmd
, &
nvmeCPL
);

456 
NVME_OPC_ADMIN_CREATE_IO_CQ
:

458 
	`h™dÀ_¸óã_io_cq
(
p_admöCmd
, &
nvmeCPL
);

461 
NVME_OPC_ADMIN_CREATE_IO_SQ
:

463 
	`h™dÀ_¸óã_io_sq
(
p_admöCmd
, &
nvmeCPL
);

466 
NVME_OPC_ADMIN_IDENTIFY
:

468 
	`h™dÀ_idítify
(
p_admöCmd
, &
nvmeCPL
);

471 
NVME_OPC_ADMIN_GET_FEATURES
:

473 
	`h™dÀ_gë_„©uªs
(
p_admöCmd
, &
nvmeCPL
);

476 
NVME_OPC_ADMIN_DELETE_IO_CQ
:

478 
	`h™dÀ_dñëe_io_cq
(
p_admöCmd
, &
nvmeCPL
);

481 
NVME_OPC_ADMIN_DELETE_IO_SQ
:

483 
	`h™dÀ_dñëe_io_sq
(
p_admöCmd
, &
nvmeCPL
);

486 
NVME_OPC_ADMIN_ASYNCHRONOUS_EVENT_REQUEST
:

488 
√edC∂
 = 0;

489 
√edSlŸRñó£
 = 1;

490 
nvmeCPL
.
dw‹d
[0] = 0;

491 
nvmeCPL
.
•ecific
 = 0x0;

494 
NVME_OPC_ADMIN_GET_LOG_PAGE
:

496 
	`h™dÀ_gë_log_∑ge
(
p_admöCmd
, &
nvmeCPL
);

499 
NVME_OPC_ADMIN_SECURITY_RECEIVE
:

501 
√edC∂
 = 0;

502 
√edSlŸRñó£
 = 0;

503 
nvmeCPL
.
dw‹d
[0] = 0;

504 
nvmeCPL
.
•ecific
 = 0x0;

507 
NVME_OPC_ADMIN_DOORBELL_BUFFER_CONFIG
:

509 
√edC∂
 = 0;

510 
√edSlŸRñó£
 = 0;

511 
nvmeCPL
.
dw‹d
[0] = 0;

512 
nvmeCPL
.
•ecific
 = 0x0;

515 
NVME_OPC_ADMIN_ABORT
:

518 
√edC∂
 = 1;

519 
√edSlŸRñó£
 = 0;

520 
nvmeCPL
.
dw‹d
[0] = 0;

521 
nvmeCPL
.
•ecific
 = 0x0;

525 
	`xû_¥ötf
("NŸ Suµ‹àAdmö Comm™d OPC: %X\r\n", 
›c
);

526 
nvmeCPL
.
dw‹d
[0] = 0;

527 
nvmeCPL
.
°©usFõldW‹d
 = 
SC_INVALID_FIELD_IN_COMMAND
;

532 if(
√edC∂
 == 1)

534 
	`hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
p_cmdC⁄ãxt
->
cmdSlŸTag
, 
nvmeCPL
.
•ecific
,ÇvmeCPL.
°©usFõldW‹d
);

536 if(
√edSlŸRñó£
 == 1)

538 
	`Œd_nvme_£t_¶Ÿ_ªÀa£
(
p_cmdC⁄ãxt
->
cmdSlŸTag
);

547 
	`xû_¥ötf
("D⁄êAdmö Comm™d OPC: %X\r\n", 
›c
);

549 
	}
}

	@host/nvme/nvme_admin_cmd.h

47 #i‚de‡
__NVME_ADMIN_CMD_H_


48 
	#__NVME_ADMIN_CMD_H_


	)

51 
gë_num_of_queue
(
dw‹d11
);

53 
h™dÀ_£t_„©uªs
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

55 
h™dÀ_gë_„©uªs
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

57 
h™dÀ_¸óã_io_cq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

59 
h™dÀ_dñëe_io_cq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

61 
h™dÀ_¸óã_io_sq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

63 
h™dÀ_dñëe_io_sq
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

65 
h™dÀ_idítify
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

67 
h™dÀ_gë_log_∑ge
(
NVME_ADMIN_COMMAND
 *
nvmeAdmöCmd
, 
NVME_COMPLETION
 *
nvmeCPL
);

69 
AdmöComm™d_¥o˚ss
(
NVME_COMMAND_ENTRY
 *
p_cmdC⁄ãxt
);

	@host/nvme/nvme_identify.c

52 
	~"xû_¥ötf.h
"

53 
	~"../../debug.h
"

54 
	~"°rög.h
"

56 
	~"nvme.h
"

57 
	~"nvme_idítify.h
"

58 
	~"../../·l/·l_c⁄fig.h
"

60 
	$idítify_c⁄åﬁÀr
(
pBuf„r
)

62 
ADMIN_IDENTIFY_CONTROLLER
 *
idítifyCNTL
;

63 
ADMIN_IDENTIFY_POWER_STATE_DESCRIPTOR
 *
powîSèãDesc
;

65 
idítifyCNTL
 = (
ADMIN_IDENTIFY_CONTROLLER
*)
pBuf„r
;

67 
	`mem£t
(
idítifyCNTL
, 0, (
ADMIN_IDENTIFY_CONTROLLER
));

69 
idítifyCNTL
->
VID
 = 
PCI_VENDOR_ID
;

70 
idítifyCNTL
->
SSVID
 = 
PCI_SUBSYSTEM_VENDOR_ID
;

72 
	`mem£t
(
idítifyCNTL
->
SN
, 0x20, 20);

73 
	`mem˝y
(
idítifyCNTL
->
SN
, 
SERIAL_NUMBER
, (SERIAL_NUMBER));

75 
	`mem£t
(
idítifyCNTL
->
MN
, 0x20, 40);

76 
	`mem˝y
(
idítifyCNTL
->
MN
, 
MODEL_NUMBER
, (MODEL_NUMBER));

78 
	`mem£t
(
idítifyCNTL
->
FR
, 0x20, 8);

79 
	`mem˝y
(
idítifyCNTL
->
FR
, 
FIRMWARE_REVISION
, (FIRMWARE_REVISION));

82 
idítifyCNTL
->
RAB
 = 0x0;

83 
idítifyCNTL
->
IEEE
[0] = 0xE4;

84 
idítifyCNTL
->
IEEE
[1] = 0xD2;

85 
idítifyCNTL
->
IEEE
[2] = 0x5C;

86 
idítifyCNTL
->
CMIC
 = 0x0;

87 
idítifyCNTL
->
MDTS
 = 0x8;

88 
idítifyCNTL
->
CNTLID
 = 0x9;

90 
idítifyCNTL
->
OACS
.
suµ‹tsSecurôySídSecurôyRe˚ive
 = 0x0;

91 
idítifyCNTL
->
OACS
.
suµ‹tsF‹m©NVM
 = 0x0;

92 
idítifyCNTL
->
OACS
.
suµ‹tsFúmw¨eA˘iv©eFúmw¨eDow∆ﬂd
 = 0x0;

94 
idítifyCNTL
->
ACL
 = 0x3;

95 
idítifyCNTL
->
AERL
 = 0x3;

97 
idítifyCNTL
->
FRMW
.
fú°Fúmw¨eSlŸRódO∆y
 = 0x1;

98 
idítifyCNTL
->
FRMW
.
suµ‹ãdNumbîOfFúmw¨eSlŸs
 = 0x1;

100 
idítifyCNTL
->
LPA
.
suµ‹tsSMARTHó…hInf‹m©i⁄LogPage
 = 0x0;

102 
idítifyCNTL
->
ELPE
 = 0x8;

103 
idítifyCNTL
->
NPSS
 = 0x0;

104 
idítifyCNTL
->
AVSCC
 = 0x0;

105 
idítifyCNTL
->
APSTA
 = 0x0;

107 
idítifyCNTL
->
SQES
.
ªquúedSubmissi⁄QueueE¡rySize
 = 0x6;

108 
idítifyCNTL
->
SQES
.
maximumSubmissi⁄QueueE¡rySize
 = 0x6;

110 
idítifyCNTL
->
CQES
.
ªquúedCom∂ëi⁄QueueE¡rySize
 = 0x4;

111 
idítifyCNTL
->
CQES
.
maximumCom∂ëi⁄QueueE¡rySize
 = 0x4;

113 
idítifyCNTL
->
NN
 = 0x1;

115 
idítifyCNTL
->
ONCS
.
suµ‹tsCom∑ª
 = 0x0;

116 
idítifyCNTL
->
ONCS
.
suµ‹tsWrôeUnc‹ª˘abÀ
 = 0x0;

117 
idítifyCNTL
->
ONCS
.
suµ‹tsD©aSëM™agemít
 = 0x0;

119 
idítifyCNTL
->
FUSES
.
suµ‹tsCom∑ªWrôe
 = 0x0;

121 
idítifyCNTL
->
FNA
.
f‹m©AµlõsToAŒName•a˚s
 = 0x0;

122 
idítifyCNTL
->
FNA
.
£cuªEø£AµlõsToAŒName•a˚s
 = 0x0;

123 
idítifyCNTL
->
FNA
.
suµ‹tsCry±ogøphicEø£
 = 0x0;

125 
idítifyCNTL
->
VWC
.
¥e£¡
 = 0x1;

127 
idítifyCNTL
->
AWUN
 = 0x0;

128 
idítifyCNTL
->
AWUPF
 = 0x0;

129 
idítifyCNTL
->
NVSCC
 = 0x0;

130 
idítifyCNTL
->
ACWU
 = 0x0;

132 
idítifyCNTL
->
SGLS
.
suµ‹tsSGL
 = 0x0;

133 
idítifyCNTL
->
SGLS
.
suµ‹tsSGLBôBuckëDes¸ùt‹
 = 0x0;

135 
powîSèãDesc
 = &
idítifyCNTL
->
PSDx
[0];

137 
powîSèãDesc
->
MP
 = 0x09C4;

138 
powîSèãDesc
->
MPS
 = 0x0;

139 
powîSèãDesc
->
NOPS
 = 0x0;

140 
powîSèãDesc
->
ENLAT
 = 0x0;

141 
powîSèãDesc
->
EXLAT
 = 0x0;

142 
powîSèãDesc
->
RRT
 = 0x0;

143 
powîSèãDesc
->
RRL
 = 0x0;

144 
powîSèãDesc
->
RWT
 = 0x0;

145 
powîSèãDesc
->
RWL
 = 0x0;

146 
	}
}

148 
	$idítify_«me•a˚
(
pBuf„r
)

150 
ADMIN_IDENTIFY_NAMESPACE
 *
idítifyNS
;

151 
ADMIN_IDENTIFY_FORMAT_DATA
 *
f‹m©D©a
;

152 
idítifyNS
 = (
ADMIN_IDENTIFY_NAMESPACE
 *)
pBuf„r
;

154 
	`mem£t
(
idítifyNS
, 0, (
ADMIN_IDENTIFY_NAMESPACE
));

156 
idítifyNS
->
NSZE
[0] = 
°‹ageC≠acôy_L
;

157 
idítifyNS
->
NSZE
[1] = 
STORAGE_CAPACITY_H
;

158 
idítifyNS
->
NCAP
[0] = 
°‹ageC≠acôy_L
;

159 
idítifyNS
->
NCAP
[1] = 
STORAGE_CAPACITY_H
;

160 
idítifyNS
->
NUSE
[0] = 
°‹ageC≠acôy_L
;

161 
idítifyNS
->
NUSE
[1] = 
STORAGE_CAPACITY_H
;

163 
idítifyNS
->
NSFEAT
.
suµ‹tsThöProvisi⁄ög
 = 0x0;

165 
idítifyNS
->
NLBAF
 = 0x0;

167 
idítifyNS
->
FLBAS
.
suµ‹ãdCombö©i⁄
 = 0x0;

168 
idítifyNS
->
FLBAS
.
suµ‹tsMëad©aAtEndOfLBA
 = 0x0;

170 
idítifyNS
->
MC
.
suµ‹tsMëad©aAsP¨tOfLBA
 = 0x0;

171 
idítifyNS
->
MC
.
suµ‹tsMëad©aAsSïî©e
 = 0x0;

174 
idítifyNS
->
DPC
.
suµ‹tsPrŸe˘i⁄Ty≥1
 = 0x0;

175 
idítifyNS
->
DPC
.
suµ‹tsPrŸe˘i⁄Ty≥2
 = 0x0;

176 
idítifyNS
->
DPC
.
suµ‹tsPrŸe˘i⁄Ty≥3
 = 0x0;

177 
idítifyNS
->
DPC
.
suµ‹tsPrŸe˘i⁄Fú°8
 = 0x0;

178 
idítifyNS
->
DPC
.
suµ‹tsPrŸe˘i⁄La°8
 = 0x0;

180 
idítifyNS
->
DPS
.
¥Ÿe˘i⁄E«bÀd
 = 0x0;

181 
idítifyNS
->
DPS
.
¥Ÿe˘i⁄InFú°8
 = 0x0;

183 
idítifyNS
->
NMIC
.
suµ‹tsMu…ù©hIOSh¨ög
 = 0x0;

185 
idítifyNS
->
RESCAP
.
suµ‹tsPîsi°ThroughPowîLoss
 = 0x0;

186 
idítifyNS
->
RESCAP
.
suµ‹tsWrôeEx˛usiveRe£rv©i⁄
 = 0x0;

187 
idítifyNS
->
RESCAP
.
suµ‹tsWrôeEx˛usiveRegi°ø¡s
 = 0x0;

188 
idítifyNS
->
RESCAP
.
suµ‹tsEx˛usiveAc˚ssRegi°ø¡s
 = 0x0;

189 
idítifyNS
->
RESCAP
.
suµ‹tsWrôeEx˛usiveAŒRegi°ø¡s
 = 0x0;

190 
idítifyNS
->
RESCAP
.
suµ‹tsEx˛usiveAc˚ssAŒRegi°ø¡s
 = 0x0;

192 
f‹m©D©a
 = &
idítifyNS
->
LBAFx
[0];

194 
f‹m©D©a
->
MS
 = 0x0;

195 
f‹m©D©a
->
LBADS
 = 0xC;

196 
f‹m©D©a
->
RP
 = 0x2;

197 
	}
}

	@host/nvme/nvme_identify.h

49 #i‚de‡
__NVME_IDENTIFY_H_


50 
	#__NVME_IDENTIFY_H_


	)

52 
	#PCI_VENDOR_ID
 0x1EDC

	)

53 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x1EDC

	)

54 
	#SERIAL_NUMBER
 "SSDD515T"

	)

55 
	#MODEL_NUMBER
 "Cosmos+ O≥nSSD"

	)

56 
	#FIRMWARE_REVISION
 "TYPE0005"

	)

58 
idítify_c⁄åﬁÀr
(
pBuf„r
);

60 
idítify_«me•a˚
(
pBuf„r
);

	@host/nvme/nvme_io_cmd.c

53 
	~"xû_¥ötf.h
"

54 
	~"../../debug.h
"

55 
	~"io_ac˚ss.h
"

57 
	~"../../hÆ/Œd/Œd_nvme.h
"

58 
	~"../../hÆ/hÆ_ho°.h
"

60 
	~"nvme.h
"

61 
	~"nvme_io_cmd.h
"

62 
	~"nvme_maö.h
"

64 
	~"../../·l/·l_c⁄fig.h
"

65 
	~"../../ªque°_f‹m©.h
"

66 
	~"../../ªque°_å™sf‹m.h
"

67 
	~"../../ªque°_scheduÀ.h
"

68 
	~"../../ªque°_Æloˇti⁄.h
"

70 
	~"xû_ex˚±i⁄.h
"

72 
	~"../../d©a_buf„r.h
"

73 
	~"../../·l/addªss_å™¶©i⁄.h
"

74 
	~"../../·l/b¨rõr_·l.h
"

77 
	~"xtime_l.h
"

78 
	~"x∑ømëîs.h
"

81 
	$_¶i˚IOComm™dToReqE¡rõs
(
NVME_COMMAND_ENTRY
 *
p_cmdE¡ry
)

83 
cmdSlŸTag
 = 
p_cmdE¡ry
->cmdSlotTag;

84 
NVME_IO_COMMAND
 *
p_nvmeIOCmd
 = (NVME_IO_COMMAND*)
p_cmdE¡ry
->
cmdDw‹d
;

86 
ªqCode
, 
ãmpNumOfNvmeBlock
, 
nvmeDmaSèπIndex
;

88 i‡(
NVME_OPC_NVM_WRITE
 =
p_nvmeIOCmd
->
OPC
)

90 
ªqCode
 = 
REQ_CODE_WRITE
;

92 i‡(
NVME_OPC_NVM_READ
 =
p_nvmeIOCmd
->
OPC
)

94 
ªqCode
 = 
REQ_CODE_READ
;

98 
	`as£π
(!"[WARNING] Not supported command code [WARNING]");

101 
IO_WRITE_COMMAND_DW12
 
cdw12
;

102 
cdw12
.
dw‹d
 = 
p_nvmeIOCmd
->dword[12];

104 
°¨tLba
 = 
p_nvmeIOCmd
->
dw‹d
[10];

105 
numOfLba
 = (
cdw12
.
NLB
 + 1);

106 
ídLba
 = ((
°¨tLba
 + 
numOfLba
) - 1);

107 
lbaOff£t
 = (
°¨tLba
 % 
NVME_BLOCKS_PER_SLICE
);

109 
nvmeDmaSèπIndex
 = 0;

111 
°¨tLß
 = (
°¨tLba
 / 
NVME_BLOCKS_PER_SLICE
);

112 
cuºítLß
 = 
°¨tLß
;

113 
ídLß
 = (
ídLba
 / 
NVME_BLOCKS_PER_SLICE
);

116 
ªqSlŸTag
 = 
REQ_SLOT_TAG_NONE
;

117 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
NULL
;

121 i‡(
NVME_BLOCKS_PER_SLICE
 < 
numOfLba
)

123 
ãmpNumOfNvmeBlock
 = 
NVME_BLOCKS_PER_SLICE
;

127 
ãmpNumOfNvmeBlock
 = 
numOfLba
;

130 i‡(
cuºítLß
 !
°¨tLß
)

132 
lbaOff£t
 = 0;

135 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

136 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

138 
p_ªqE¡ry
->
ªqTy≥
 = 
REQ_TYPE_SLICE
;

139 
p_ªqE¡ry
->
ªqCode
 =ÑeqCode;

140 
p_ªqE¡ry
->
nvmeCmdSlŸTag
 = 
cmdSlŸTag
;

141 
p_ªqE¡ry
->
logiˇlSli˚Addr
 = 
cuºítLß
;

142 
p_ªqE¡ry
->
nvmeDmaInfo
.
°¨tIndex
 = 
nvmeDmaSèπIndex
;

143 
p_ªqE¡ry
->
nvmeDmaInfo
.
nvmeBlockOff£t
 = 
lbaOff£t
;

144 
p_ªqE¡ry
->
nvmeDmaInfo
.
numOfNvmeBlock
 = 
ãmpNumOfNvmeBlock
;

149 i‡(
REQ_CODE_WRITE
 =
ªqCode
)

151 
p_ªqE¡ry
->
nvmeDmaInfo
.
fua
 = 
cdw12
.
FUA
;

153 
p_ªqE¡ry
->
°ªam_id_1
 = 
p_nvmeIOCmd
->stream_id_1;

154 
p_ªqE¡ry
->
°ªam_id_2
 = 
p_nvmeIOCmd
->stream_id_2;

155 
p_ªqE¡ry
->
ïoch_id_1
 = 
p_nvmeIOCmd
->epoch_id_1;

156 
p_ªqE¡ry
->
ïoch_id_2
 = 
p_nvmeIOCmd
->epoch_id_2;

157 
p_ªqE¡ry
->
b¨rõr_Êag
 = 0;

159 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

160 #i‡(
BARRIER_IN_DMA
 == 0)

161 
uöt32_t
 
sid1
 = 
p_ªqE¡ry
->
°ªam_id_1
 ;

162 
uöt32_t
 
sid2
 = 
p_ªqE¡ry
->
°ªam_id_2
;

163 
uöt32_t
 
eid1
 = 
p_ªqE¡ry
->
ïoch_id_1
;

164 
uöt32_t
 
eid2
 = 
p_ªqE¡ry
->
ïoch_id_2
;

165 
uöt8_t
 
is_œ°_¶i˚
 = !(
ídLß
 >
cuºítLß
);

166 
p_ªqE¡ry
->
b¨rõr_Êag
 = (
is_œ°_¶i˚
)? 
cdw12
.barrier_flag: 0;

167 i‡(
sid1
){

168 
	`b¨rõr_£t_ïoch_°©e
(
sid1
, 
eid1
, 
p_ªqE¡ry
->
b¨rõr_Êag
, 1);

169 i‡(
sid2
){

170 
	`b¨rõr_£t_ïoch_°©e
(
sid2
, 
eid2
, 
p_ªqE¡ry
->
b¨rõr_Êag
, 1);

179 
	`Reque°AŒoˇti⁄_MoveToSli˚ReqQ
(
ªqSlŸTag
);

181 
cuºítLß
++;

182 
nvmeDmaSèπIndex
 +
ãmpNumOfNvmeBlock
;

183 
numOfLba
 -
ãmpNumOfNvmeBlock
;

185 
p_cmdE¡ry
->
tŸÆReqE¡ryC¡
++;

186 } 
ídLß
 >
cuºítLß
);

188 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

190 i‡(
REQ_CODE_WRITE
 =
ªqCode
)

192 
p_ªqE¡ry
->
b¨rõr_Êag
 = 
cdw12
.barrier_flag;

193 #i‡(
PRINT_DEBUG_MAP
 == 1)

194 i‡(
p_ªqE¡ry
->
°ªam_id_1
 > 0)

195 
	`xû_¥ötf
("[ OPIMQ ] sid1:%uÉid1:%u sid2:%uÉid2:%u barrier_flag:%u\r\n",

196 
p_ªqE¡ry
->
°ªam_id_1
,Ö_ªqE¡ry->
ïoch_id_1
,

197 
p_ªqE¡ry
->
°ªam_id_2
,Ö_ªqE¡ry->
ïoch_id_2
,

198 
p_ªqE¡ry
->
b¨rõr_Êag
 );

205 i‡(
REQ_CODE_WRITE
 =
ªqCode
)

217 
	}
}

221 
	$_Evi˘D©aBufE¡ry
(
‹igöReqSlŸTag
)

223 
ªqSlŸTag
, 
vútuÆSli˚Addr
, 
d©aBufE¡ryIdx
;

225 
d©aBufE¡ryIdx
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
‹igöReqSlŸTag
].
d©aBufInfo
.
íåy
;

227 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
d©aBufE¡ryIdx
);

229 if(
p_d©aBufE¡ry
->
dúty
 =
DATA_BUF_DIRTY
)

232 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

238 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

239 i‡(
p_d©aBufE¡ry
->
°ªam_id_1
) {

244 
uöt32_t
 
sid1
 = 
p_d©aBufE¡ry
->
°ªam_id_1
;

245 
uöt32_t
 
eid1
 = 
p_d©aBufE¡ry
->
ïoch_id_1
;

246 
uöt32_t
 
m≠∑bÀ_1
 = 
p_d©aBufE¡ry
->mappable_1;

247 
uöt32_t
 
sid2
 = 
p_d©aBufE¡ry
->
°ªam_id_2
;

248 
uöt32_t
 
eid2
 = 
p_d©aBufE¡ry
->
ïoch_id_2
;

249 
uöt32_t
 
m≠∑bÀ_2
 = 
p_d©aBufE¡ry
->mappable_2;

254 i‡–(
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

255 && (
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))) {

256 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

258 
	`upd©e_ïoch_öfo
(
sid1
, 
eid1
, 
__func__
);

260 
	`upd©e_ïoch_öfo
(
sid2
, 
eid2
, 
__func__
);

261 } i‡–(
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

262 && !(
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))) {

263 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

264 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

265 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 2);

267 } i‡–(
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))

268 && !(
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))) {

269 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

270 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

271 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 1);

274 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

275 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

276 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 0);

280 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

283 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
p_d©aBufE¡ry
->
logiˇlSli˚Addr
);

285 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 = 
REQ_TYPE_NAND
;

286 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_WRITE
;

287 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeCmdSlŸTag
 =ÑeqPoﬁPå->ªqPoﬁ[
‹igöReqSlŸTag
].nvmeCmdSlotTag;

288 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
logiˇlSli˚Addr
 = 
p_d©aBufE¡ry
->logicalSliceAddr;

289 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ENTRY
;

290 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

291 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

292 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_ON
;

293 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

294 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

295 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ryIdx
;

298 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

299 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_1
 = 
p_d©aBufE¡ry
->stream_id_1;

300 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_2
 = 
p_d©aBufE¡ry
->stream_id_2;

301 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_1
 = 
p_d©aBufE¡ry
->epoch_id_1;

302 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_2
 = 
p_d©aBufE¡ry
->epoch_id_2;

303 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_1
 = 
p_d©aBufE¡ry
->mappable_1;

304 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_2
 = 
p_d©aBufE¡ry
->mappable_2;

306 
	`Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
d©aBufE¡ryIdx
, 
ªqSlŸTag
);

307 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
 = virtualSliceAddr;

309 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

311 
p_d©aBufE¡ry
->
dúty
 = 
DATA_BUF_CLEAN
;

312 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

313 
p_d©aBufE¡ry
->
°ªam_id_1
 = 0;

314 
p_d©aBufE¡ry
->
°ªam_id_2
 = 0;

315 
p_d©aBufE¡ry
->
ïoch_id_1
 = 0;

316 
p_d©aBufE¡ry
->
ïoch_id_2
 = 0;

317 
p_d©aBufE¡ry
->
m≠∑bÀ_1
 = 0;

318 
p_d©aBufE¡ry
->
m≠∑bÀ_2
 = 0;

321 
	}
}

323 
	$_D©aRódFromN™d
(
‹igöReqSlŸTag
)

325 
ªqSlŸTag
, 
vútuÆSli˚Addr
;

327 
vútuÆSli˚Addr
 = 
	`AddrTønsRód
(
ªqPoﬁPå
->
ªqPoﬁ
[
‹igöReqSlŸTag
].
logiˇlSli˚Addr
);

329 if(
vútuÆSli˚Addr
 !
VSA_FAIL
)

331 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

333 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 = 
REQ_TYPE_NAND
;

334 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_READ
;

335 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeCmdSlŸTag
 =ÑeqPoﬁPå->ªqPoﬁ[
‹igöReqSlŸTag
].nvmeCmdSlotTag;

336 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
logiˇlSli˚Addr
 =ÑeqPoﬁPå->ªqPoﬁ[
‹igöReqSlŸTag
].logicalSliceAddr;

337 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ENTRY
;

338 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

339 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

340 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_ON
;

341 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

342 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

344 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 =ÑeqPoﬁPå->ªqPoﬁ[
‹igöReqSlŸTag
].dataBufInfo.entry;

345 
	`Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
,ÑeqSlotTag);

346 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
 = virtualSliceAddr;

348 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

350 
	}
}

352 
	$_moveSli˚E¡rõsF‹NextO≥øti⁄
()

355 
ªqSlŸTag
, 
d©aBufE¡ry
;

357 
tmp
 = 1000, 
˙t
;

358 
˙t
 = 0;

359 
ªt
 = 0;

360 0 !(
ªt
 = 
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_SLICE
, 0, 0)))

365 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ryFromSli˚ReqQ
();

366 i‡(
REQ_SLOT_TAG_FAIL
 =
ªqSlŸTag
)

372 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

373 
d©aBufE¡ry
 = 
	`Buf„rM™agemít_CheckBufHô
(
ªqSlŸTag
);

375 i‡(
d©aBufE¡ry
 !
DATA_BUF_FAIL
) {

376 i‡(
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_1
 > 0) {

380 
d©aBufE¡ry
 = 
	`Buf„rM™agemít_AŒocBuf
();

381 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ry
;

383 
	`as£π
(
d©aBufE¡ry
 < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
);

386 
	`_Evi˘D©aBufE¡ry
(
ªqSlŸTag
);

390 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
logiˇlSli˚Addr
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].logicalSliceAddr;

391 
	`Buf„rM™agemít_AddBufToHashLi°
(
d©aBufE¡ry
);

393 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

395 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

397 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
)

399 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeDmaInfo
.
numOfNvmeBlock
 !
NVME_BLOCKS_PER_SLICE
)

401 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

407 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ry
;

412 
d©aBufE¡ry
 = 
	`Buf„rM™agemít_AŒocBuf
();

413 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ry
;

415 
	`as£π
(
d©aBufE¡ry
 < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
);

419 
	`_Evi˘D©aBufE¡ry
(
ªqSlŸTag
);

423 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
logiˇlSli˚Addr
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].logicalSliceAddr;

424 
	`Buf„rM™agemít_AddBufToHashLi°
(
d©aBufE¡ry
);

426 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

428 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

430 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
){

431 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeDmaInfo
.
numOfNvmeBlock
 !
NVME_BLOCKS_PER_SLICE
)

433 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

440 
d©aBufE¡ry
 = 
	`Buf„rM™agemít_CheckBufHô
(
ªqSlŸTag
);

441 i‡(
d©aBufE¡ry
 !
DATA_BUF_FAIL
)

443 
	`as£π
(
d©aBufE¡ry
 < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
);

445 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ry
;

450 
d©aBufE¡ry
 = 
	`Buf„rM™agemít_AŒocBuf
();

451 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
d©aBufE¡ry
;

453 
	`as£π
(
d©aBufE¡ry
 < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
);

456 
	`_Evi˘D©aBufE¡ry
(
ªqSlŸTag
);

459 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
logiˇlSli˚Addr
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].logicalSliceAddr;

460 
	`Buf„rM™agemít_AddBufToHashLi°
(
d©aBufE¡ry
);

462 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

464 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

466 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
)

468 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeDmaInfo
.
numOfNvmeBlock
 !
NVME_BLOCKS_PER_SLICE
)

470 
	`_D©aRódFromN™d
(
ªqSlŸTag
);

476 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

478 i‡(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_1
 > 0) {

479 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_1
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].stream_id_1;

480 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
ïoch_id_1
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].epoch_id_1;

482 i‡(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_2
 > 0) {

483 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_2
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].stream_id_2;

484 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
ïoch_id_2
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].epoch_id_2;

486 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_2
 = 0;

487 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
ïoch_id_2
 = 0;

502 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_1
 = 0;

503 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
°ªam_id_2
 = 0;

504 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
ïoch_id_1
 = 0;

505 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
ïoch_id_2
 = 0;

513 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
)

515 
d©aBufM≠På
->
d©aBuf
[
d©aBufE¡ry
].
dúty
 = 
DATA_BUF_DIRTY
;

516 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_RxDMA
;

518 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

520 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_TxDMA
;

524 
	`as£π
(!"[WARNING] Not supportedÑeqCode. [WARNING]");

527 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 = 
REQ_TYPE_NVME_DMA
;

528 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ENTRY
;

531 
	`Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
d©aBufE¡ry
, 
ªqSlŸTag
);

533 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

537 
	}
}

539 
	$_¥o˚ssRódComm™d
(
NVME_COMMAND_ENTRY
 *
p_cmdE¡ry
)

541 
NVME_IO_COMMAND
 *
p_ªadComm™d
 = (NVME_IO_COMMAND*)
p_cmdE¡ry
->
cmdDw‹d
;

545 
°¨tLba
[2];

552 
°¨tLba
[0] = 
p_ªadComm™d
->
dw‹d
[10];

553 
°¨tLba
[1] = 
p_ªadComm™d
->
dw‹d
[11];

557 
	`ASSERT
(
°¨tLba
[0] < 
°‹ageC≠acôy_L
 && (°¨tLba[1] < 
STORAGE_CAPACITY_H
 || startLba[1] == 0));

559 
	`ASSERT
((
p_ªadComm™d
->
PRP1
[0] & 0x3Ë=0 && (p_ªadComm™d->
PRP2
[0] & 0x3) == 0);

560 
	`ASSERT
(
p_ªadComm™d
->
PRP1
[1] < 0x10000 &&Ö_ªadComm™d->
PRP2
[1] < 0x10000);

562 
	`_¶i˚IOComm™dToReqE¡rõs
(
p_cmdE¡ry
);

564 
	}
}

567 
	$_¥o˚ssWrôeComm™d
(
NVME_COMMAND_ENTRY
 *
p_cmdE¡ry
)

569 
NVME_IO_COMMAND
 *
p_wrôeComm™d
 = (NVME_IO_COMMAND*)
p_cmdE¡ry
->
cmdDw‹d
;

570 
IO_WRITE_COMMAND_DW12
 
wrôeInfo12
;

573 
°¨tLba
[2];

575 
wrôeInfo12
.
dw‹d
 = 
p_wrôeComm™d
->dword[12];

583 i‡(1 =
wrôeInfo12
.
FUA
)

585 
	`xû_¥ötf
("\n[cmdSlŸTag:%u] slb:0x%X,Çlb:0x%X, fua:0x%X\r\n", 
p_cmdE¡ry
->
cmdSlŸTag
, 
p_wrôeComm™d
->
dw‹d
[10], (Ì_wrôeComm™d->dw‹d[12], 
wrôeInfo12
.
FUA
);

588 
°¨tLba
[0] = 
p_wrôeComm™d
->
dw‹d
[10];

589 
°¨tLba
[1] = 
p_wrôeComm™d
->
dw‹d
[11];

592 
	`ASSERT
(
°¨tLba
[0] < 
°‹ageC≠acôy_L
 && (°¨tLba[1] < 
STORAGE_CAPACITY_H
 || startLba[1] == 0));

594 
	`ASSERT
((
p_wrôeComm™d
->
PRP1
[0] & 0xFË=0 && (p_wrôeComm™d->
PRP2
[0] & 0xF) == 0);

595 
	`ASSERT
(
p_wrôeComm™d
->
PRP1
[1] < 0x10000 &&Ö_wrôeComm™d->
PRP2
[1] < 0x10000);

613 
	`_¶i˚IOComm™dToReqE¡rõs
(
p_cmdE¡ry
);

616 
	}
}

618 #i‡(
MEASURE_LATENCY
 == 1)

619 
XTime
 
	g°¨tTime_Êush
, 
	gídTime_Êush
;

620 
XTime
 
	g°¨tTime_Êushsync
, 
	gídTime_Êushsync
;

621 
XTime
 
	g°¨tTime_Êush£¨ch
, 
	gídTime_Êush£¨ch
;

622 
XTime
 
	g°¨tTime_wrôe
, 
	gídTime_wrôe
;

624 
	$¥öt_œãncy
(
XTime
 
°¨tTime
, XTimê
ídTime
, *
°r
)

626 
tmpSåög
[1024];

628 
	`•rötf
(
tmpSåög
,

629 "%s: %l‡°: %l‡ë: %l‡\n", 
°r
,

630 (Ë(
ídTime
 - 
°¨tTime
)/
COUNTS_PER_SECOND
,

631 (Ë(
°¨tTime
)/
COUNTS_PER_SECOND
,

632 (Ë(
ídTime
)/
COUNTS_PER_SECOND
);

633 
	`xû_¥ötf
("%s", 
tmpSåög
);

634 
	}
}

637 
	$_¥o˚ssFlushComm™d
()

640 #i‡(
MEASURE_LATENCY
 == 1)

641 
	`XTime_GëTime
(&
°¨tTime_Êushsync
);

644 
	`FlushWrôeD©aToN™d
();

645 #i‡(
MEASURE_LATENCY
 == 1)

646 
	`XTime_GëTime
(&
ídTime_Êushsync
);

648 
	}
}

650 
	$NVMComm™d_¥o˚ss
(
NVME_COMMAND_ENTRY
 *
p_cmdE¡ry
)

652 
NVME_IO_COMMAND
 *
p_nvmComm™d
 = (NVME_IO_COMMAND*)
p_cmdE¡ry
->
cmdDw‹d
;

654 
cmdSlŸTag
 = 
p_cmdE¡ry
->cmdSlotTag;

665 i‡(1 !
p_nvmComm™d
->
NSID
)

667 
	`xû_¥ötf
("övÆidÇsid [èg:%u,Çsid:%u]\r\n", 
cmdSlŸTag
, 
p_nvmComm™d
->
NSID
);

668 
	`hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
cmdSlŸTag
, 0, 
SC_INVALID_NAMESPACE_OR_FORMAT
);

670 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

676 
p_nvmComm™d
->
OPC
)

678 
NVME_OPC_NVM_FLUSH
:

681 #i‡(
MEASURE_LATENCY
 == 1)

682 
	`XTime_GëTime
(&
°¨tTime_Êush
);

684 
	`_¥o˚ssFlushComm™d
();

686 
	`hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
cmdSlŸTag
, 0, 
SC_SUCCESSFUL_COMPLETION
);

688 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

693 #i‡(
MEASURE_LATENCY
 == 1)

694 
	`XTime_GëTime
(&
ídTime_Êush
);

697 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

698 #i‡(
SUPPORT_SEARCH_SUSPENSION_LIST
 == 1)

700 #i‡(
MEASURE_LATENCY
 == 1)

701 
	`XTime_GëTime
(&
°¨tTime_Êush£¨ch
);

703 
	`b¨rõr_£¨ch_su•ísi⁄_li°_duÆ_°ªam
();

704 #i‡(
MEASURE_LATENCY
 == 1)

705 
	`XTime_GëTime
(&
ídTime_Êush£¨ch
);

711 #i‡(
MEASURE_LATENCY
 == 1)

712 
	`¥öt_œãncy
(
°¨tTime_Êush
, 
ídTime_Êush
, "Flush Latency");

713 
	`¥öt_œãncy
(
°¨tTime_Êushsync
, 
ídTime_Êushsync
, "FlushSync Latency");

714 
	`¥öt_œãncy
(
°¨tTime_Êush£¨ch
, 
ídTime_Êush£¨ch
, "FlushSearch Latency");

720 
NVME_OPC_NVM_WRITE
:

722 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_wrôe_out°™dög_cou¡
();

725 #i‡(
MEASURE_LATENCY
 == 1)

726 
	`XTime_GëTime
(&
°¨tTime_wrôe
);

728 
	`_¥o˚ssWrôeComm™d
(
p_cmdE¡ry
);

731 
NVME_OPC_NVM_READ
:

733 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_ªad_out°™dög_cou¡
();

735 
	`_¥o˚ssRódComm™d
(
p_cmdE¡ry
);

740 
	`xû_¥ötf
("NŸ Suµ‹àIO Comm™d OPC: %X\r\n", 
p_nvmComm™d
->
OPC
);

741 
	`ASSERT
(0);

747 i‡(
p_nvmComm™d
->
OPC
 !
NVME_OPC_NVM_FLUSH
){

749 
	`_moveSli˚E¡rõsF‹NextO≥øti⁄
();

750 #i‡(
PRINT_DEBUG
 == 1)

755 #i‡(
MEASURE_LATENCY
 == 1)

756 i‡(
p_nvmComm™d
->
OPC
 =
NVME_OPC_NVM_WRITE
){

757 
	`XTime_GëTime
(&
ídTime_wrôe
);

758 
	`¥öt_œãncy
(
°¨tTime_wrôe
, 
ídTime_wrôe
, "Write Latency");

766 
	}
}

	@host/nvme/nvme_io_cmd.h

47 #i‚de‡
__NVME_IO_CMD_H_


48 
	#__NVME_IO_CMD_H_


	)

50 
NVMComm™d_¥o˚ss
(
NVME_COMMAND_ENTRY
 *
p_cmdC⁄ãxt
);

	@host/nvme/nvme_main.c

59 
	~"xû_¥ötf.h
"

60 
	~"../../debug.h
"

61 
	~"io_ac˚ss.h
"

62 
	~"xtime_l.h
"

64 
	~"../../hÆ/Œd/ho°_Œd.h
"

65 
	~"../../hÆ/hÆ_ho°.h
"

67 
	~"nvme.h
"

68 
	~"nvme_maö.h
"

69 
	~"nvme_admö_cmd.h
"

70 
	~"nvme_io_cmd.h
"

72 
	~"../../·l/b¨rõr_·l.h
"

74 
	~"../../mem‹y_m≠.h
"

76 vﬁ©ûê
NVME_TASK_CONTEXT
 
	gg_nvmeTask
;

77 
NVME_COMMAND_CONTEXT_T
 
	gg_nvme_comm™d_c⁄ãxt
;

79 
	$dev_úq_h™dÀr
()

81 
DEV_IRQ_REG
 
devReg
;

84 
devReg
.
dw‹d
 = 
	`IO_READ32
(
DEV_IRQ_STATUS_REG_ADDR
);

85 
	`IO_WRITE32
(
DEV_IRQ_CLEAR_REG_ADDR
, 
devReg
.
dw‹d
);

88 if(
devReg
.
pcõLök
 == 1)

90 
PCIE_STATUS_REG
 
pcõReg
;

91 
pcõReg
.
dw‹d
 = 
	`IO_READ32
(
PCIE_STATUS_REG_ADDR
);

92 
	`xû_¥ötf
("PCIêLök: %d\r\n", 
pcõReg
.
pcõLökUp
);

94 if(
pcõReg
.
pcõLökUp
 == 0)

95 
g_nvmeTask
.
°©us
 = 
NVME_TASK_RESET
;

98 if(
devReg
.
busMa°î
 == 1)

100 
PCIE_FUNC_REG
 
pcõReg
;

101 
pcõReg
.
dw‹d
 = 
	`IO_READ32
(
PCIE_FUNC_REG_ADDR
);

102 
	`xû_¥ötf
("PCIêBu†Ma°î: %d\r\n", 
pcõReg
.
busMa°î
);

105 if(
devReg
.
pcõIrq
 == 1)

107 
PCIE_FUNC_REG
 
pcõReg
;

108 
pcõReg
.
dw‹d
 = 
	`IO_READ32
(
PCIE_FUNC_REG_ADDR
);

109 
	`xû_¥ötf
("PCIêIRQ DißbÀ: %d\r\n", 
pcõReg
.
úqDißbÀ
);

112 if(
devReg
.
pcõMsi
 == 1)

114 
PCIE_FUNC_REG
 
pcõReg
;

115 
pcõReg
.
dw‹d
 = 
	`IO_READ32
(
PCIE_FUNC_REG_ADDR
);

116 
	`xû_¥ötf
("PCIêMSI E«bÀ: %d, 0x%x\r\n", 
pcõReg
.
msiE«bÀ
,ÖcõReg.
msiVecNum
);

119 if(
devReg
.
pcõMsix
 == 1)

121 
PCIE_FUNC_REG
 
pcõReg
;

122 
pcõReg
.
dw‹d
 = 
	`IO_READ32
(
PCIE_FUNC_REG_ADDR
);

123 
	`xû_¥ötf
("PCIêMSI-X E«bÀ: %d\r\n", 
pcõReg
.
msixE«bÀ
);

126 if(
devReg
.
nvmeCcEn
 == 1)

128 
NVME_STATUS_REG
 
nvmeReg
;

129 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

130 
	`xû_¥ötf
("NVME CC.EN: %d\r\n", 
nvmeReg
.
ccEn
);

132 if(
nvmeReg
.
ccEn
 == 1)

134 
g_nvmeTask
.
°©us
 = 
NVME_TASK_WAIT_CC_EN
;

138 
g_nvmeTask
.
°©us
 = 
NVME_TASK_RESET
;

143 if(
devReg
.
nvmeCcShn
 == 1)

145 
NVME_STATUS_REG
 
nvmeReg
;

146 
nvmeReg
.
dw‹d
 = 
	`IO_READ32
(
NVME_STATUS_REG_ADDR
);

147 
	`xû_¥ötf
("NVME CC.SHN: %d\r\n", 
nvmeReg
.
ccShn
);

148 if(
nvmeReg
.
ccShn
 == 1)

149 
g_nvmeTask
.
°©us
 = 
NVME_TASK_SHUTDOWN
;

152 if(
devReg
.
mAxiWrôeEº
 == 1)

154 
	`xû_¥ötf
("mAxiWriteErr\r\n");

157 if(
devReg
.
pcõMªqEº
 == 1)

159 
	`xû_¥ötf
("pcieMreqErr\r\n");

162 if(
devReg
.
pcõC∂dEº
 == 1)

164 
	`xû_¥ötf
("pcieCpldErr\r\n");

167 if(
devReg
.
pcõC∂dLíEº
 == 1)

169 
	`xû_¥ötf
("pcieCpldLenErr\r\n");

172 
	}
}

174 
NVME_COMMAND_ENTRY
* 
	$nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
cmdSlŸTag
)

176  &
g_nvme_comm™d_c⁄ãxt
.
comm™d_li°
[
cmdSlŸTag
];

177 
	}
}

179 
	$nvme_comm™d_c⁄ãxt_ö¸ó£_ªad_out°™dög_cou¡
()

181 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_ªad_comm™d_cou¡
++;

182 
	}
}

184 
	$nvme_comm™d_c⁄ãxt_ö¸ó£_wrôe_out°™dög_cou¡
()

186 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_wrôe_comm™d_cou¡
++;

187 
	}
}

189 
	$nvme_comm™d_c⁄ãxt_de¸ó£_ªad_out°™dög_cou¡
()

191 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_ªad_comm™d_cou¡
--;

192 
	}
}

194 
	$nvme_comm™d_c⁄ãxt_de¸ó£_wrôe_out°™dög_cou¡
()

196 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_wrôe_comm™d_cou¡
--;

197 
	}
}

199 
	$nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
()

201 
g_nvme_comm™d_c⁄ãxt
.
com∂ëe_io_comm™d_cou¡
++;

202 
	}
}

204 
	$_nvme_èsk_run
()

206 
cmdSlŸTag
 = 
	`hÆ_ho°_„tch_nvme_comm™d
(
g_nvme_comm™d_c⁄ãxt
.
comm™d_li°
);

208 i‡(
INVALID_CMD_SLOT_TAG
 !
cmdSlŸTag
)

210 
NVME_COMMAND_ENTRY
* 
p_cmdE¡ry
 = &
g_nvme_comm™d_c⁄ãxt
.
comm™d_li°
[
cmdSlŸTag
];

212 i‡(
	`BRANCH_LIKELY
((0 !
p_cmdE¡ry
->
qID
)))

214 
g_nvme_comm™d_c⁄ãxt
.
„tch_io_comm™d_cou¡
++;

216 
	`NVMComm™d_¥o˚ss
(
p_cmdE¡ry
);

220 
	`AdmöComm™d_¥o˚ss
(
p_cmdE¡ry
);

223 
	}
}

225 
	$ho°_èsk_öô
()

227 
	`mem£t
((*)&
g_nvmeTask
, 0x00, (
NVME_TASK_CONTEXT
));

228 
	`mem£t
((*)&
g_nvme_comm™d_c⁄ãxt
, 0x00, (
NVME_COMMAND_CONTEXT_T
));

229 
	}
}

231 
	$ho°_èsk_run
()

233 
r°C¡
 = 0;

235 i‡(
	`BRANCH_LIKELY
((
NVME_TASK_RUNNING
 =
g_nvmeTask
.
°©us
)))

237 
	`_nvme_èsk_run
();

239 i‡(0 !
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NVME_DMA
, 0, 0))

241 
	`hÆ_ho°_h™dÀ_hdma_ªsu…
();

246 i‡(
NVME_TASK_WAIT_CC_EN
 =
g_nvmeTask
.
°©us
)

248 
b_ccEnSë
 = 
	`hÆ_ho°_£t_nvme_c˚n
();

250 if(1 =
b_ccEnSë
)

252 
g_nvmeTask
.
°©us
 = 
NVME_TASK_RUNNING
;

254 
g_nvme_comm™d_c⁄ãxt
.
„tch_io_comm™d_cou¡
 = 0;

255 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_ªad_comm™d_cou¡
 = 0;

256 
g_nvme_comm™d_c⁄ãxt
.
out°™dög_wrôe_comm™d_cou¡
 = 0;

258 
g_nvme_comm™d_c⁄ãxt
.
com∂ëe_io_comm™d_cou¡
 = 0;

260 
	`xû_¥ötf
("\r\nNVMeÑeady!!!\r\n");

263 i‡(
NVME_TASK_SHUTDOWN
 =
g_nvmeTask
.
°©us
)

265 
	`FlushWrôeD©aToN™d
();

267 
b_shutdown
 = 
	`hÆ_ho°_nvme_shutdown
();

269 if(0 !
b_shutdown
)

271 
g_nvmeTask
.
ˇcheEn
 = 0;

272 
g_nvmeTask
.
°©us
 = 
NVME_TASK_WAIT_RESET
;

275 
	`Upd©eBadBlockTabÀF‹GrownBadBlock
(
RESERVED_DATA_BUFFER_BASE_ADDR
);

277 
	`xû_¥ötf
("\r\nNVMe shutdown done.\r\n");

280 if(
NVME_TASK_WAIT_RESET
 =
g_nvmeTask
.
°©us
)

282 
b_ccEnSë
 = 
	`hÆ_ho°_˛ór_nvme_c˚n
();

284 i‡(0 =
b_ccEnSë
)

286 
g_nvmeTask
.
ˇcheEn
 = 0;

287 
g_nvmeTask
.
°©us
 = 
NVME_TASK_IDLE
;

289 
	`xû_¥ötf
("\r\nNVMe disable!!!\r\n");

292 if(
NVME_TASK_RESET
 =
g_nvmeTask
.
°©us
)

294 
qID
;

295 
qID
 = 0; qID < 8; qID++)

297 
	`Œd_nvme_£t_io_cq
(
qID
, 0, 0, 0, 0, 0, 0);

298 
	`Œd_nvme_£t_io_sq
(
qID
, 0, 0, 0, 0, 0);

301 i‡(
r°C¡
>= 5){

302 
	`Œd_pcõ_async_ª£t
(
r°C¡
);

303 
r°C¡
 = 0;

304 
	`xû_¥ötf
("\r\nPcie iink disable!!!\r\n");

305 
	`xû_¥ötf
("Wait few minute orÑeconnectÅhe PCIe cable\r\n");

308 
r°C¡
++;

310 
g_nvmeTask
.
ˇcheEn
 = 0;

311 
	`Œd_nvme_£t_admö_queue
(0, 0, 0);

312 
	`Œd_nvme_£t_c°s_sh°
(0);

313 
	`Œd_nvme_£t_c°s_rdy
(0);

314 
g_nvmeTask
.
°©us
 = 
NVME_TASK_IDLE
;

316 
	`xû_¥ötf
("\r\nNVMeÑeset!!!\r\n");

319 
	}
}

	@host/nvme/nvme_main.h

48 #i‚de‡
__NVME_MAIN_H_


49 
	#__NVME_MAIN_H_


	)

51 
	s_NVME_CONTEXT


53 
	m°©us
;

54 
	mˇcheEn
;

55 
NVME_ADMIN_QUEUE_STATUS
 
	madmöQueueInfo
;

56 
	mnumOfIOSubmissi⁄QueuesAŒoˇãd
;

57 
	mnumOfIOCom∂ëi⁄QueuesAŒoˇãd
;

58 
NVME_IO_SQ_STATUS
 
	mioSqInfo
[
MAX_NUM_OF_IO_SQ
];

59 
NVME_IO_CQ_STATUS
 
	mioCqInfo
[
MAX_NUM_OF_IO_CQ
];

60 } 
	tNVME_TASK_CONTEXT
;

63 
	s_NVME_COMMAND_ENTRY


65 
	mqID
;

66 
	mcmdSlŸTag
;

67 
	mcmdSeqNum
;

68 
	mcmdDw‹d
[16];

69 
	mtŸÆReqE¡ryC¡
;

70 
	mhdmaWaôReqE¡ryC¡
;

71 
	mhdmaCom∂ëeReqE¡ryC¡
;

72 
	mN™dWaôReqE¡ryC¡
;

73 
	mN™dCom∂ëeReqE¡ryC¡
;

74 }
	tNVME_COMMAND_ENTRY
;

78 
NVME_COMMAND_ENTRY
 
	mcomm™d_li°
[256];

81 
	m„tch_io_comm™d_cou¡
;

82 
	mout°™dög_ªad_comm™d_cou¡
;

83 
	mout°™dög_wrôe_comm™d_cou¡
;

84 
	mcom∂ëe_io_comm™d_cou¡
;

85 } 
	tNVME_COMMAND_CONTEXT_T
;

87 
NVME_COMMAND_CONTEXT_T
 
g_nvme_comm™d_c⁄ãxt
;

89 
NVME_COMMAND_ENTRY
* 
nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
cmdSlŸTag
);

90 
nvme_comm™d_c⁄ãxt_ö¸ó£_ªad_out°™dög_cou¡
();

91 
nvme_comm™d_c⁄ãxt_ö¸ó£_wrôe_out°™dög_cou¡
();

92 
nvme_comm™d_c⁄ãxt_de¸ó£_ªad_out°™dög_cou¡
();

93 
nvme_comm™d_c⁄ãxt_de¸ó£_wrôe_out°™dög_cou¡
();

94 
nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

95 
dev_úq_h™dÀr
();

97 
ho°_èsk_öô
();

98 
ho°_èsk_run
();

	@main.c

60 
	~"xû_ˇche.h
"

61 
	~"xû_ex˚±i⁄.h
"

62 
	~"xû_mmu.h
"

63 
	~"x∑ømëîs_ps.h
"

64 
	~"xscugic_hw.h
"

65 
	~"xscugic.h
"

66 
	~"xû_¥ötf.h
"

67 
	~"debug.h
"

68 
	~"xtime_l.h
"

70 
	~"ho°/nvme/io_ac˚ss.h
"

71 
	~"hÆ/Œd/ho°_Œd.h
"

73 
	~"Êash/Êash_c⁄åﬁ.h
"

74 
	~"·l/·l_c⁄fig.h
"

76 
	~"ªque°_Æloˇti⁄.h
"

77 
	~"ªque°_scheduÀ.h
"

78 
	~"ªque°_å™sf‹m.h
"

79 
	~"d©a_buf„r.h
"

80 
	~"ho°/nvme/nvme.h
"

81 
	~"ho°/nvme/nvme_maö.h
"

84 
	~"xtime_l.h
"

85 
	~"x∑ømëîs.h
"

87 
XScuGic
 
	gGicIn°™˚
;

89 
	$_dev_úq_öô
()

91 
DEV_IRQ_REG
 
devReg
;

93 
devReg
.
dw‹d
 = 0;

94 
devReg
.
pcõLök
 = 1;

95 
devReg
.
busMa°î
 = 1;

96 
devReg
.
pcõIrq
 = 1;

97 
devReg
.
pcõMsi
 = 1;

98 
devReg
.
pcõMsix
 = 1;

99 
devReg
.
nvmeCcEn
 = 1;

100 
devReg
.
nvmeCcShn
 = 1;

101 
devReg
.
mAxiWrôeEº
 = 1;

102 
devReg
.
pcõMªqEº
 = 1;

103 
devReg
.
pcõC∂dEº
 = 1;

104 
devReg
.
pcõC∂dLíEº
 = 1;

106 
	`IO_WRITE32
(
DEV_IRQ_MASK_REG_ADDR
, 
devReg
.
dw‹d
);

107 
	}
}

110 
	$_öô_c‹e
()

112 
u
;

114 
XScuGic_C⁄fig
 *
I¡cC⁄fig
;

116 
	`Xû_ICacheDißbÀ
();

117 
	`Xû_DCacheDißbÀ
();

118 
	`Xû_DißbÀMMU
();

121 
	#MB
 (1024*1024)

	)

122 
u
 = 0; u < 4096; u++)

124 i‡(
u
 < 0x2)

125 
	`Xû_SëTlbAâribuãs
(
u
 * 
MB
, 0xC1E);

126 i‡(
u
 < 0x180)

127 
	`Xû_SëTlbAâribuãs
(
u
 * 
MB
, 0xC12);

128 i‡(
u
 < 0x400)

129 
	`Xû_SëTlbAâribuãs
(
u
 * 
MB
, 0xC1E);

131 
	`Xû_SëTlbAâribuãs
(
u
 * 
MB
, 0xC12);

134 
	`Xû_E«bÀMMU
();

135 
	`Xû_ICacheE«bÀ
();

136 
	`Xû_DCacheE«bÀ
();

137 
	`xû_¥ötf
("[!] MMU has beenÉnabled.\r\n");

140 
	`xû_¥ötf
("\r\n Hello COSMOS+ OpenSSD !!! \r\n");

143 
	`Xû_Ex˚±i⁄Inô
();

145 
I¡cC⁄fig
 = 
	`XScuGic_LookupC⁄fig
(
XPAR_SCUGIC_SINGLE_DEVICE_ID
);

146 
	`XScuGic_CfgInôülize
(&
GicIn°™˚
, 
I¡cC⁄fig
, I¡cC⁄fig->
CpuBa£Addªss
);

147 
	`Xû_Ex˚±i⁄Regi°îH™dÀr
(
XIL_EXCEPTION_ID_INT
,

148 (
Xû_Ex˚±i⁄H™dÀr
)
XScuGic_I¡îru±H™dÀr
,

149 &
GicIn°™˚
);

151 
	`XScuGic_C⁄√˘
(&
GicIn°™˚
, 61,

152 (
Xû_Ex˚±i⁄H™dÀr
)
dev_úq_h™dÀr
,

155 
	`XScuGic_E«bÀ
(&
GicIn°™˚
, 61);

158 
	`Xû_Ex˚±i⁄E«bÀMask
(
XIL_EXCEPTION_IRQ
);

159 
	`Xû_Ex˚±i⁄E«bÀ
();

161 
	`_dev_úq_öô
();

162 
	}
}

164 
	$maö
()

166 
	`_öô_c‹e
();

168 
	`xû_¥ötf
("!!! Wait until FTL init complete !!! \r\n");

170 
	`ho°_èsk_öô
();

172 
	`xû_¥ötf
("!!! hostÅask done !!! \r\n");

173 
	`Reque°AŒoˇti⁄_InôReqPoﬁ
();

174 
	`xû_¥ötf
("!!!Ñeqalloc done !!! \r\n");

175 
	`InôDïídícyTabÀ
();

176 
	`xû_¥ötf
("!!! initdep done !!! \r\n");

177 
	`Reque°ScheduÀr_Inô
();

179 
	`xû_¥ötf
("!!!Ñeqsched done !!! \r\n");

180 
	`Buf„rM™agemít_Inô
();

182 
	`Êash_öô
();

184 
	`xû_¥ötf
("!!! flash init done !!! \r\n");

185 
	`·l_öô
();

187 
	`xû_¥ötf
("\r\nFTL init complete!!! \r\n");

188 
	`xû_¥ötf
("Turn onÅhe host PC \r\n");

193 
	`ho°_èsk_run
();

195 
	`·l_èsk_run
();

197 
	`Êash_èsk_run
();

200 
	`xû_¥ötf
("done\r\n");

203 
	}
}

	@memory_map.h

47 #i‚de‡
MEMORY_MAP_H_


48 
	#MEMORY_MAP_H_


	)

50 
	~"d©a_buf„r.h
"

51 
	~"·l/addªss_å™¶©i⁄.h
"

52 
	~"ªque°_Æloˇti⁄.h
"

53 
	~"ªque°_scheduÀ.h
"

54 
	~"ªque°_å™sf‹m.h
"

55 
	~"·l/g¨bage_cﬁÀ˘i⁄.h
"

57 
	#DRAM_START_ADDR
 0x00100000

	)

59 
	#MEMORY_SEGMENTS_START_ADDR
 
DRAM_START_ADDR


	)

60 
	#MEMORY_SEGMENTS_END_ADDR
 0x001FFFFF

	)

62 
	#NVME_MANAGEMENT_START_ADDR
 0x00200000

	)

63 
	#NVME_MANAGEMENT_END_ADDR
 0x002FFFFF

	)

65 
	#RESERVED0_START_ADDR
 0x00300000

	)

66 
	#RESERVED0_END_ADDR
 0x0FFFFFFF

	)

68 
	#FTL_MANAGEMENT_START_ADDR
 0x10000000

	)

71 
	#DATA_BUFFER_BASE_ADDR
 0x10000000

	)

72 
	#TEMPORARY_DATA_BUFFER_BASE_ADDR
 (
DATA_BUFFER_BASE_ADDR
 + 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
 * 
BYTES_PER_DATA_REGION_OF_SLICE
)

	)

73 
	#SPARE_DATA_BUFFER_BASE_ADDR
 (
TEMPORARY_DATA_BUFFER_BASE_ADDR
 + 
AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
 * 
BYTES_PER_DATA_REGION_OF_SLICE
)

	)

74 
	#TEMPORARY_SPARE_DATA_BUFFER_BASE_ADDR
 (
SPARE_DATA_BUFFER_BASE_ADDR
 + 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
 * 
BYTES_PER_SPARE_REGION_OF_SLICE
)

	)

75 
	#RESERVED_DATA_BUFFER_BASE_ADDR
 (
TEMPORARY_SPARE_DATA_BUFFER_BASE_ADDR
 + 
AVAILABLE_TEMPORARY_DATA_BUFFER_ENTRY_COUNT
 * 
BYTES_PER_SPARE_REGION_OF_SLICE
)

	)

77 
	#COMPLETE_FLAG_TABLE_ADDR
 0x17000000

	)

78 
	#STATUS_REPORT_TABLE_ADDR
 (
COMPLETE_FLAG_TABLE_ADDR
 + (
COMPLETE_FLAG_TABLE
))

	)

79 
	#ERROR_INFO_TABLE_ADDR
 (
STATUS_REPORT_TABLE_ADDR
 + (
STATUS_REPORT_TABLE
))

	)

80 
	#TEMPORARY_PAY_LOAD_ADDR
 (
ERROR_INFO_TABLE_ADDR
+ (
ERROR_INFO_TABLE
))

	)

83 
	#DATA_BUFFER_MAP_ADDR
 0x18000000

	)

84 
	#DATA_BUFFFER_HASH_TABLE_ADDR
 (
DATA_BUFFER_MAP_ADDR
 + (
DATA_BUF_MAP
))

	)

85 
	#TEMPORARY_DATA_BUFFER_MAP_ADDR
 (
DATA_BUFFFER_HASH_TABLE_ADDR
 + (
DATA_BUF_HASH_TABLE
))

	)

87 
	#LOGICAL_SLICE_MAP_ADDR
 (
TEMPORARY_DATA_BUFFER_MAP_ADDR
 + (
TEMPORARY_DATA_BUF_MAP
))

	)

88 
	#VIRTUAL_SLICE_MAP_ADDR
 (
LOGICAL_SLICE_MAP_ADDR
 + (
LOGICAL_SLICE_MAP
))

	)

89 
	#VIRTUAL_BLOCK_MAP_ADDR
 (
VIRTUAL_SLICE_MAP_ADDR
 + (
VIRTUAL_SLICE_MAP
))

	)

90 
	#PHY_BLOCK_MAP_ADDR
 (
VIRTUAL_BLOCK_MAP_ADDR
 + (
VIRTUAL_BLOCK_MAP
))

	)

91 
	#BAD_BLOCK_TABLE_INFO_MAP_ADDR
 (
PHY_BLOCK_MAP_ADDR
 + (
PHY_BLOCK_MAP
))

	)

92 
	#VIRTUAL_DIE_MAP_ADDR
 (
BAD_BLOCK_TABLE_INFO_MAP_ADDR
 + (
BAD_BLOCK_TABLE_INFO_MAP
))

	)

94 
	#GC_VICTIM_MAP_ADDR
 (
VIRTUAL_DIE_MAP_ADDR
 + (
VIRTUAL_DIE_MAP
))

	)

96 
	#REQ_POOL_ADDR
 (
GC_VICTIM_MAP_ADDR
 + (
GC_VICTIM_MAP
))

	)

98 
	#ROW_ADDR_DEPENDENCY_TABLE_ADDR
 (
REQ_POOL_ADDR
 + (
REQ_POOL
))

	)

100 
	#DIE_STATE_TABLE_ADDR
 (
ROW_ADDR_DEPENDENCY_TABLE_ADDR
 + (
ROW_ADDR_DEPENDENCY_TABLE
))

	)

101 
	#RETRY_LIMIT_TABLE_ADDR
 (
DIE_STATE_TABLE_ADDR
 + (
DIE_STATE_TABLE
))

	)

102 
	#WAY_PRIORITY_TABLE_ADDR
 (
RETRY_LIMIT_TABLE_ADDR
 + (
RETRY_LIMIT_TABLE
))

	)

104 
	#FTL_MANAGEMENT_END_ADDR
 ((
WAY_PRIORITY_TABLE_ADDR
 + (
WAY_PRIORITY_TABLE
))- 1)

	)

106 
	#RESERVED1_START_ADDR
 (
FTL_MANAGEMENT_END_ADDR
 + 1)

	)

107 
	#RESERVED1_END_ADDR
 0x3FFFFFFF

	)

109 
	#DRAM_END_ADDR
 0x3FFFFFFF

	)

	@request_allocation.c

46 
	~"xû_¥ötf.h
"

47 
	~<as£π.h
>

48 
	~"debug.h
"

49 
	~"mem‹y_m≠.h
"

50 
	~"hÆ/hÆ_ho°.h
"

51 
	~"ho°/nvme/nvme_maö.h
"

53 
	~"ªque°_f‹m©.h
"

55 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

57 
	~"·l/b¨rõr_·l.h
"

60 
P_REQ_POOL
 
	gªqPoﬁPå
;

61 
FREE_REQUEST_QUEUE
 
	g‰ìReqQ
;

62 
SLICE_REQUEST_QUEUE
 
	g¶i˚ReqQ
;

63 
BLOCKED_BY_BUFFER_DEPENDENCY_REQUEST_QUEUE
 
	gblockedByBufDïReqQ
;

64 
BLOCKED_BY_ROW_ADDR_DEPENDENCY_REQUEST_QUEUE
 
	gblockedByRowAddrDïReqQ
[
USER_CHANNELS
][
USER_WAYS
];

65 
NVME_DMA_REQUEST_QUEUE
 
	gnvmeDmaReqQ
;

66 
NAND_REQUEST_QUEUE
 
	g«ndReqQ
[
USER_CHANNELS
][
USER_WAYS
];

68 
	gnŸCom∂ëedN™dReqC¡
;

69 
	gblockedReqC¡
;

71 
	$Reque°AŒoˇti⁄_InôReqPoﬁ
()

73 
chNo
, 
wayNo
, 
ªqSlŸTag
;

75 
ªqPoﬁPå
 = (
P_REQ_POOL
Ë
REQ_POOL_ADDR
;

77 
‰ìReqQ
.
hódReq
 = 0;

78 
‰ìReqQ
.
èûReq
 = 
AVAILABLE_OUNTSTANDING_REQ_COUNT
 - 1;

80 
¶i˚ReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

81 
¶i˚ReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

82 
¶i˚ReqQ
.
ªqC¡
 = 0;

84 
blockedByBufDïReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

85 
blockedByBufDïReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

86 
blockedByBufDïReqQ
.
ªqC¡
 = 0;

88 
nvmeDmaReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

89 
nvmeDmaReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

90 
nvmeDmaReqQ
.
ªqC¡
 = 0;

92 
chNo
 = 0; chNo<
USER_CHANNELS
; chNo++)

94 
wayNo
 = 0; wayNo<
USER_WAYS
; wayNo++)

96 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
hódReq
 = 
REQ_SLOT_TAG_NONE
;

97 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 = 
REQ_SLOT_TAG_NONE
;

98 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
ªqC¡
 = 0;

100 
«ndReqQ
[
chNo
][
wayNo
].
hódReq
 = 
REQ_SLOT_TAG_NONE
;

101 
«ndReqQ
[
chNo
][
wayNo
].
èûReq
 = 
REQ_SLOT_TAG_NONE
;

102 
«ndReqQ
[
chNo
][
wayNo
].
ªqC¡
 = 0;

106 
ªqSlŸTag
 = 0;ÑeqSlŸTag < 
AVAILABLE_OUNTSTANDING_REQ_COUNT
;ÑeqSlotTag++)

108 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_FREE
;

109 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

110 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

111 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 =ÑeqSlotTag - 1;

112 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 =ÑeqSlotTag + 1;

114 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

115 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_1
 = 0;

116 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_2
 = 0;

117 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_1
 = 0;

118 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_2
 = 0;

119 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_1
 = 0;

120 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_2
 = 0;

121 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
b¨rõr_Êag
 = 0;

125 
ªqPoﬁPå
->
ªqPoﬁ
[0].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

126 
ªqPoﬁPå
->
ªqPoﬁ
[
AVAILABLE_OUNTSTANDING_REQ_COUNT
 - 1].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

127 
‰ìReqQ
.
ªqC¡
 = 
AVAILABLE_OUNTSTANDING_REQ_COUNT
;

129 
nŸCom∂ëedN™dReqC¡
 = 0;

130 
blockedReqC¡
 = 0;

131 
	}
}

133 
SSD_REQ_FORMAT
* 
	$Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
)

135  &
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
];

136 
	}
}

138 
	$Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
ªqTy≥
, 
ch™√lNo
, 
wayNo
)

140 
cou¡
 = 0;

142 
ªqTy≥
)

144 
REQ_QUEUE_TYPE_FREE
:

145 
cou¡
 = 
‰ìReqQ
.
ªqC¡
;

147 
REQ_QUEUE_TYPE_SLICE
:

148 
cou¡
 = 
¶i˚ReqQ
.
ªqC¡
;

150 
REQ_QUEUE_TYPE_BLOCKED_BY_BUF_DEP
:

151 
cou¡
 = 
blockedByBufDïReqQ
.
ªqC¡
;

153 
REQ_QUEUE_TYPE_BLOCKED_BY_ROW_ADDR_DEP
:

154 
cou¡
 = 
blockedByRowAddrDïReqQ
[
ch™√lNo
][
wayNo
].
ªqC¡
;

156 
REQ_QUEUE_TYPE_NVME_DMA
:

157 
cou¡
 = 
nvmeDmaReqQ
.
ªqC¡
;

159 
REQ_QUEUE_TYPE_NAND
:

160 
cou¡
 = 
«ndReqQ
[
ch™√lNo
][
wayNo
].
ªqC¡
;

164  
cou¡
;

165 
	}
}

168 
	$Reque°AŒoˇti⁄_MoveToFªeReqQ
(
ªqSlŸTag
)

170 if(
‰ìReqQ
.
èûReq
 !
REQ_SLOT_TAG_NONE
)

172 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
‰ìReqQ
.
èûReq
;

173 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

174 
ªqPoﬁPå
->
ªqPoﬁ
[
‰ìReqQ
.
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

175 
‰ìReqQ
.
èûReq
 = 
ªqSlŸTag
;

179 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

180 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

181 
‰ìReqQ
.
hódReq
 = 
ªqSlŸTag
;

182 
‰ìReqQ
.
èûReq
 = 
ªqSlŸTag
;

185 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_FREE
;

186 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
nvmeDmaInfo
.
fua
 = 
FALSE
;

187 
‰ìReqQ
.
ªqC¡
++;

188 
	}
}

190 
	$Reque°AŒoˇti⁄_GëFªeReqE¡ry
()

192 
ªqSlŸTag
;

194 
ªqSlŸTag
 = 
‰ìReqQ
.
hódReq
;

196 if(
ªqSlŸTag
 =
REQ_SLOT_TAG_NONE
)

198 
	`Reque°ScheduÀr_SyncAvaûFªeReq
();

199 
ªqSlŸTag
 = 
‰ìReqQ
.
hódReq
;

202 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 !
REQ_SLOT_TAG_NONE
)

204 
‰ìReqQ
.
hódReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
;

205 
ªqPoﬁPå
->
ªqPoﬁ
[ªqPoﬁPå->ªqPoﬁ[
ªqSlŸTag
].
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

209 
‰ìReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

210 
‰ìReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

213 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

214 
‰ìReqQ
.
ªqC¡
--;

216  
ªqSlŸTag
;

217 
	}
}

219 
	$Reque°AŒoˇti⁄_MoveToSli˚ReqQ
(
ªqSlŸTag
)

221 if(
¶i˚ReqQ
.
èûReq
 !
REQ_SLOT_TAG_NONE
)

223 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
¶i˚ReqQ
.
èûReq
;

224 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

225 
ªqPoﬁPå
->
ªqPoﬁ
[
¶i˚ReqQ
.
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

226 
¶i˚ReqQ
.
èûReq
 = 
ªqSlŸTag
;

230 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

231 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

232 
¶i˚ReqQ
.
hódReq
 = 
ªqSlŸTag
;

233 
¶i˚ReqQ
.
èûReq
 = 
ªqSlŸTag
;

236 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_SLICE
;

237 
¶i˚ReqQ
.
ªqC¡
++;

238 
	}
}

240 
	$Reque°AŒoˇti⁄_GëReqE¡ryFromSli˚ReqQ
()

242 
ªqSlŸTag
;

244 
ªqSlŸTag
 = 
¶i˚ReqQ
.
hódReq
;

246 if(
ªqSlŸTag
 =
REQ_SLOT_TAG_NONE
)

247  
REQ_SLOT_TAG_FAIL
;

249 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 !
REQ_SLOT_TAG_NONE
)

251 
¶i˚ReqQ
.
hódReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
;

252 
ªqPoﬁPå
->
ªqPoﬁ
[ªqPoﬁPå->ªqPoﬁ[
ªqSlŸTag
].
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

256 
¶i˚ReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

257 
¶i˚ReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

260 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

261 
¶i˚ReqQ
.
ªqC¡
--;

263  
ªqSlŸTag
;

264 
	}
}

266 
	$Reque°AŒoˇti⁄_MoveToBlockedByBufDïReqQ
(
ªqSlŸTag
)

268 if(
blockedByBufDïReqQ
.
èûReq
 !
REQ_SLOT_TAG_NONE
)

270 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
blockedByBufDïReqQ
.
èûReq
;

271 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

272 
ªqPoﬁPå
->
ªqPoﬁ
[
blockedByBufDïReqQ
.
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

273 
blockedByBufDïReqQ
.
èûReq
 = 
ªqSlŸTag
;

277 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

278 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

279 
blockedByBufDïReqQ
.
hódReq
 = 
ªqSlŸTag
;

280 
blockedByBufDïReqQ
.
èûReq
 = 
ªqSlŸTag
;

283 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_BLOCKED_BY_BUF_DEP
;

284 
blockedByBufDïReqQ
.
ªqC¡
++;

285 
blockedReqC¡
++;

286 
	}
}

288 
	$Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByBufDïReqQ
(
ªqSlŸTag
)

290 
¥evReq
, 
√xtReq
;

292 if(
ªqSlŸTag
 =
REQ_SLOT_TAG_NONE
)

293 
	`as£π
(!"[WARNING] WrongÑeqSlotTag [WARNING]");

295 
¥evReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].prevReq;

296 
√xtReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].nextReq;

298 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

300 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 =ÇextReq;

301 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 =ÖrevReq;

303 if((
√xtReq
 =
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

305 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

306 
blockedByBufDïReqQ
.
èûReq
 = 
¥evReq
;

308 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 == REQ_SLOT_TAG_NONE))

310 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

311 
blockedByBufDïReqQ
.
hódReq
 = 
√xtReq
;

315 
blockedByBufDïReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

316 
blockedByBufDïReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

319 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

320 
blockedByBufDïReqQ
.
ªqC¡
--;

321 
blockedReqC¡
--;

322 
	}
}

324 
	$Reque°AŒoˇti⁄_MoveToBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

326 if(
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 !
REQ_SLOT_TAG_NONE
)

328 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
;

329 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

330 
ªqPoﬁPå
->
ªqPoﬁ
[
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

331 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 = 
ªqSlŸTag
;

335 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

336 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

337 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
hódReq
 = 
ªqSlŸTag
;

338 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 = 
ªqSlŸTag
;

341 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_BLOCKED_BY_ROW_ADDR_DEP
;

342 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
ªqC¡
++;

343 
blockedReqC¡
++;

344 
	}
}

346 
	$Reque°AŒoˇti⁄_PìkReqE¡ryFromBlockedByRowAddrDïReqQ
(
ch™√lNo
, 
wayNo
)

348  
blockedByRowAddrDïReqQ
[
ch™√lNo
][
wayNo
].
hódReq
;

349 
	}
}

351 
	$Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

353 
¥evReq
, 
√xtReq
;

355 if(
ªqSlŸTag
 =
REQ_SLOT_TAG_NONE
)

357 
	`as£π
(!"[WARNING] WrongÑeqSlotTag [WARNING]");

360 
¥evReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].prevReq;

361 
√xtReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].nextReq;

363 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

365 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 =ÇextReq;

366 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 =ÖrevReq;

368 if((
√xtReq
 =
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

370 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

371 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 = 
¥evReq
;

373 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 == REQ_SLOT_TAG_NONE))

375 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

376 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
hódReq
 = 
√xtReq
;

380 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
hódReq
 = 
REQ_SLOT_TAG_NONE
;

381 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
èûReq
 = 
REQ_SLOT_TAG_NONE
;

384 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

385 
blockedByRowAddrDïReqQ
[
chNo
][
wayNo
].
ªqC¡
--;

386 
blockedReqC¡
--;

387 
	}
}

389 
	$Reque°AŒoˇti⁄_MoveToNvmeDmaReqQ
(
ªqSlŸTag
)

391 if(
nvmeDmaReqQ
.
èûReq
 !
REQ_SLOT_TAG_NONE
)

393 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
nvmeDmaReqQ
.
èûReq
;

394 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

395 
ªqPoﬁPå
->
ªqPoﬁ
[
nvmeDmaReqQ
.
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

396 
nvmeDmaReqQ
.
èûReq
 = 
ªqSlŸTag
;

400 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

401 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

402 
nvmeDmaReqQ
.
hódReq
 = 
ªqSlŸTag
;

403 
nvmeDmaReqQ
.
èûReq
 = 
ªqSlŸTag
;

406 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NVME_DMA
;

407 
nvmeDmaReqQ
.
ªqC¡
++;

408 
	}
}

410 
	$Reque°AŒoˇti⁄_PìkReqE¡ryFromNvmeDmaReqQ
()

412  
nvmeDmaReqQ
.
hódReq
;

413 
	}
}

415 
	$Reque°AŒoˇti⁄_Sñe˘iveGëFromNvmeDmaReqQ
(
ªqSlŸTag
)

417 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

418 
¥evReq
, 
√xtReq
;

420 
¥evReq
 = 
p_ªqE¡ry
->prevReq;

421 
√xtReq
 = 
p_ªqE¡ry
->nextReq;

423 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

425 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 =ÇextReq;

426 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 =ÖrevReq;

428 if((
√xtReq
 =
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 != REQ_SLOT_TAG_NONE))

430 
ªqPoﬁPå
->
ªqPoﬁ
[
¥evReq
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

431 
nvmeDmaReqQ
.
èûReq
 = 
¥evReq
;

433 if((
√xtReq
 !
REQ_SLOT_TAG_NONE
Ë&& (
¥evReq
 == REQ_SLOT_TAG_NONE))

435 
ªqPoﬁPå
->
ªqPoﬁ
[
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

436 
nvmeDmaReqQ
.
hódReq
 = 
√xtReq
;

440 
nvmeDmaReqQ
.
hódReq
 = 
REQ_SLOT_TAG_NONE
;

441 
nvmeDmaReqQ
.
èûReq
 = 
REQ_SLOT_TAG_NONE
;

444 i‡(
REQ_CODE_RxDMA
 =
p_ªqE¡ry
->
ªqCode
)

446 i‡(
TRUE
 =
p_ªqE¡ry
->
nvmeDmaInfo
.
fua
)

449 
d©aBufE¡ryIdx
 = 
p_ªqE¡ry
->
d©aBufInfo
.
íåy
;

451 
ÊushReqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

452 
SSD_REQ_FORMAT
* 
p_ÊushReqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ÊushReqSlŸTag
);

454 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
p_ªqE¡ry
->
logiˇlSli˚Addr
);

456 
p_ÊushReqE¡ry
->
ªqTy≥
 = 
REQ_TYPE_NAND
;

457 
p_ÊushReqE¡ry
->
ªqCode
 = 
REQ_CODE_WRITE
;

458 
p_ÊushReqE¡ry
->
nvmeCmdSlŸTag
 = 
p_ªqE¡ry
->nvmeCmdSlotTag;

459 
p_ÊushReqE¡ry
->
logiˇlSli˚Addr
 = 
p_ªqE¡ry
->logicalSliceAddr;

460 
p_ÊushReqE¡ry
->
nvmeDmaInfo
.
fua
 = 
p_ªqE¡ry
->nvmeDmaInfo.fua;

461 
p_ÊushReqE¡ry
->
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ENTRY
;

462 
p_ÊushReqE¡ry
->
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

463 
p_ÊushReqE¡ry
->
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

464 
p_ÊushReqE¡ry
->
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_ON
;

465 
p_ÊushReqE¡ry
->
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

466 
p_ÊushReqE¡ry
->
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

467 
p_ÊushReqE¡ry
->
d©aBufInfo
.
íåy
 = 
d©aBufE¡ryIdx
;

468 
	`Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
d©aBufE¡ryIdx
, 
ÊushReqSlŸTag
);

469 
p_ÊushReqE¡ry
->
«ndInfo
.
vútuÆSli˚Addr
 = virtualSliceAddr;

471 
	`Sñe˘LowLevñReqQ
(
ÊushReqSlŸTag
);

473 
NVME_COMMAND_ENTRY
* 
p_cmdE¡ry
 = 
	`nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
);

475 
p_cmdE¡ry
->
N™dWaôReqE¡ryC¡
++;

477 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

480 
uöt32_t
 
sid1
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_1
;

481 
uöt32_t
 
sid2
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_2
;

482 
uöt32_t
 
eid1
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_1
;

483 
uöt32_t
 
eid2
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_2
;

484 
uöt32_t
 
b¨rõr_Êag
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].barrier_flag;

486 i‡(
sid1
 > 0)

489 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
p_ªqE¡ry
->
d©aBufInfo
.
íåy
);

492 
p_d©aBufE¡ry
->
m≠∑bÀ_1
 = 
FALSE
;

493 
p_d©aBufE¡ry
->
m≠∑bÀ_2
 = (
sid2
 > 0)? 
FALSE
: 
TRUE
;

497 
uöt32_t
 
ªt
;

498 #i‡(
BARRIER_IN_DMA
 == 1)

499 
ªt
 = 
	`b¨rõr_check_™d_£t_ïoch_°©e
(
sid1
, 
eid1
, 
b¨rõr_Êag
, 1);

501 
ªt
 = 
	`b¨rõr_check_¥ev_ïoch_°©e
(
sid1
, 
eid1
);

503 i‡(
ªt
 =
EPOCH_STATE_CLOSED_DURABLE_MAPPED
 ||

504 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

508 
p_d©aBufE¡ry
->
m≠∑bÀ_1
 = 
TRUE
;

514 i‡(
sid2
) {

515 #i‡(
BARRIER_IN_DMA
 == 1)

516 
ªt
 = 
	`b¨rõr_check_™d_£t_ïoch_°©e
(
sid2
, 
eid2
, 
b¨rõr_Êag
, 1);

518 
ªt
 = 
	`b¨rõr_check_¥ev_ïoch_°©e
(
sid2
, 
eid2
);

520 i‡(
ªt
 =
EPOCH_STATE_CLOSED_DURABLE_MAPPED


521 || 
	`is_m≠∑bÀ
(
sid2
,
eid2
))

523 
p_d©aBufE¡ry
->
m≠∑bÀ_2
 = 
TRUE
;

538 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

539 
nvmeDmaReqQ
.
ªqC¡
--;

541 
	`Reque°AŒoˇti⁄_MoveToFªeReqQ
(
ªqSlŸTag
);

542 
	`Rñó£BlockedByBufDïReq
(
ªqSlŸTag
);

543 
	}
}

545 
	$Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

547 if(
«ndReqQ
[
chNo
][
wayNo
].
èûReq
 !
REQ_SLOT_TAG_NONE
)

549 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
«ndReqQ
[
chNo
][
wayNo
].
èûReq
;

550 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

551 
ªqPoﬁPå
->
ªqPoﬁ
[
«ndReqQ
[
chNo
][
wayNo
].
èûReq
].
√xtReq
 = 
ªqSlŸTag
;

552 
«ndReqQ
[
chNo
][
wayNo
].
èûReq
 = 
ªqSlŸTag
;

556 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

557 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtReq
 = 
REQ_SLOT_TAG_NONE
;

558 
«ndReqQ
[
chNo
][
wayNo
].
hódReq
 = 
ªqSlŸTag
;

559 
«ndReqQ
[
chNo
][
wayNo
].
èûReq
 = 
ªqSlŸTag
;

562 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NAND
;

563 
«ndReqQ
[
chNo
][
wayNo
].
ªqC¡
++;

564 
nŸCom∂ëedN™dReqC¡
++;

565 
	}
}

567 
	$Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
ch™√lNo
, 
wayNo
)

569  
«ndReqQ
[
ch™√lNo
][
wayNo
].
hódReq
;

570 
	}
}

572 
	$Reque°AŒoˇti⁄_GëE¡ryFromN™dReqQ
(
chNo
, 
wayNo
, 
ªqCode
)

574 
	`ASSERT
(0 < 
nŸCom∂ëedN™dReqC¡
);

576 
ªqSlŸTag
 = 
«ndReqQ
[
chNo
][
wayNo
].
hódReq
;

578 i‡(
ªqSlŸTag
 =
REQ_SLOT_TAG_NONE
)

580 
	`as£π
(!"[WARNING]Åhere isÇoÑequest in Nand-req-queue[WARNING]");

583 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

585 if(
REQ_SLOT_TAG_NONE
 !
p_ªqE¡ry
->
√xtReq
)

587 
«ndReqQ
[
chNo
][
wayNo
].
hódReq
 = 
p_ªqE¡ry
->
√xtReq
;

589 
ªqPoﬁPå
->
ªqPoﬁ
[
p_ªqE¡ry
->
√xtReq
].
¥evReq
 = 
REQ_SLOT_TAG_NONE
;

593 
«ndReqQ
[
chNo
][
wayNo
].
hódReq
 = 
REQ_SLOT_TAG_NONE
;

594 
«ndReqQ
[
chNo
][
wayNo
].
èûReq
 = 
REQ_SLOT_TAG_NONE
;

597 i‡((
REQ_CODE_WRITE
 =
ªqCode
)

598 && (
TRUE
 =
p_ªqE¡ry
->
nvmeDmaInfo
.
fua
))

600 
NVME_COMMAND_ENTRY
* 
p_cmdE¡ry
 = 
	`nvme_comm™d_c⁄ãxt_gë_comm™d_íåy
(
p_ªqE¡ry
->
nvmeCmdSlŸTag
);

602 
p_cmdE¡ry
->
N™dCom∂ëeReqE¡ryC¡
++;

604 i‡(
p_cmdE¡ry
->
tŸÆReqE¡ryC¡
 =p_cmdE¡ry->
N™dCom∂ëeReqE¡ryC¡
)

606 
	`hÆ_ho°_com∂ëi⁄_nvme_comm™d
(
p_cmdE¡ry
->
cmdSlŸTag
, 0, 
SC_SUCCESSFUL_COMPLETION
);

608 
	`nvme_comm™d_c⁄ãxt_de¸ó£_wrôe_out°™dög_cou¡
();

609 
	`nvme_comm™d_c⁄ãxt_ö¸ó£_com∂ëe_comm™d_cou¡
();

613 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

614 i‡((
ªqCode
 =
REQ_CODE_WRITE
Ë&& (
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 =
REQ_TYPE_NAND
 ) &&

615 (
p_ªqE¡ry
->
°ªam_id_1
 > 0)) {

631 
p_ªqE¡ry
->
°ªam_id_1
 = 0;

632 
p_ªqE¡ry
->
°ªam_id_2
 = 0;

633 
p_ªqE¡ry
->
ïoch_id_1
 = 0;

634 
p_ªqE¡ry
->
ïoch_id_2
 = 0;

635 
p_ªqE¡ry
->
m≠∑bÀ_1
 = 0;

636 
p_ªqE¡ry
->
m≠∑bÀ_2
 = 0;

637 
p_ªqE¡ry
->
ªqCode
 = 
REQ_CODE_FLUSH
;

648 
p_ªqE¡ry
->
ªqQueueTy≥
 = 
REQ_QUEUE_TYPE_NONE
;

650 
«ndReqQ
[
chNo
][
wayNo
].
ªqC¡
--;

651 
nŸCom∂ëedN™dReqC¡
--;

653 
	`Reque°AŒoˇti⁄_MoveToFªeReqQ
(
ªqSlŸTag
);

654 
	`Rñó£BlockedByBufDïReq
(
ªqSlŸTag
);

656 
	}
}

	@request_allocation.h

46 #i‚de‡
REQUEST_ALLOCATION_H_


47 
	#REQUEST_ALLOCATION_H_


	)

49 
	~"·l/·l_c⁄fig.h
"

50 
	~"ªque°_f‹m©.h
"

51 
	~"ªque°_queue.h
"

53 
	#AVAILABLE_OUNTSTANDING_REQ_COUNT
 ((
USER_DIES
) * 128)

54 

	)

55 
	#REQ_SLOT_TAG_NONE
 0xffff

	)

56 
	#REQ_SLOT_TAG_FAIL
 0xffff

	)

58 
	s_REQ_POOL


60 
SSD_REQ_FORMAT
 
	mªqPoﬁ
[
AVAILABLE_OUNTSTANDING_REQ_COUNT
];

61 } 
	tREQ_POOL
, *
	tP_REQ_POOL
;

63 
P_REQ_POOL
 
ªqPoﬁPå
;

65 
nŸCom∂ëedN™dReqC¡
;

66 
blockedReqC¡
;

69 
Reque°AŒoˇti⁄_InôReqPoﬁ
();

70 
SSD_REQ_FORMAT
* 
Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

71 
Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
ªqTy≥
, 
ch™√lNo
, 
wayNo
);

73 
Reque°AŒoˇti⁄_MoveToFªeReqQ
(
ªqSlŸTag
);

74 
Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

76 
Reque°AŒoˇti⁄_MoveToSli˚ReqQ
(
ªqSlŸTag
);

77 
Reque°AŒoˇti⁄_GëReqE¡ryFromSli˚ReqQ
();

79 
Reque°AŒoˇti⁄_MoveToBlockedByBufDïReqQ
(
ªqSlŸTag
);

80 
Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByBufDïReqQ
(
ªqSlŸTag
);

82 
Reque°AŒoˇti⁄_MoveToBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

83 
Reque°AŒoˇti⁄_PìkReqE¡ryFromBlockedByRowAddrDïReqQ
(
ch™√lNo
, 
wayNo
);

84 
Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

86 
Reque°AŒoˇti⁄_MoveToNvmeDmaReqQ
(
ªqSlŸTag
);

87 
Reque°AŒoˇti⁄_PìkReqE¡ryFromNvmeDmaReqQ
();

88 
Reque°AŒoˇti⁄_Sñe˘iveGëFromNvmeDmaReqQ
(
ªqSlŸTag
);

90 
Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

91 
Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
ch™√lNo
, 
wayNo
);

92 
Reque°AŒoˇti⁄_GëE¡ryFromN™dReqQ
(
chNo
, 
wayNo
, 
ªqCode
);

	@request_format.h

46 #i‚de‡
REQUEST_FORMAT_H_


47 
	#REQUEST_FORMAT_H_


	)

49 
	#REQ_TYPE_SLICE
 0x0

	)

50 
	#REQ_TYPE_NAND
 0x1

	)

51 
	#REQ_TYPE_NVME_DMA
 0x2

	)

53 
	#REQ_QUEUE_TYPE_NONE
 0x0

	)

54 
	#REQ_QUEUE_TYPE_FREE
 0x1

	)

55 
	#REQ_QUEUE_TYPE_SLICE
 0x2

	)

56 
	#REQ_QUEUE_TYPE_BLOCKED_BY_BUF_DEP
 0x3

	)

57 
	#REQ_QUEUE_TYPE_BLOCKED_BY_ROW_ADDR_DEP
 0x4

	)

58 
	#REQ_QUEUE_TYPE_NVME_DMA
 0x5

	)

59 
	#REQ_QUEUE_TYPE_NAND
 0x6

	)

61 
	#REQ_CODE_WRITE
 0x00

	)

62 
	#REQ_CODE_READ
 0x08

	)

63 
	#REQ_CODE_READ_TRANSFER
 0x09

	)

64 
	#REQ_CODE_ERASE
 0x0C

	)

65 
	#REQ_CODE_RESET
 0x0D

	)

66 
	#REQ_CODE_SET_FEATURE
 0x0E

	)

67 
	#REQ_CODE_FLUSH
 0x0F

	)

68 
	#REQ_CODE_RxDMA
 0x10

	)

69 
	#REQ_CODE_TxDMA
 0x20

	)

71 
	#REQ_CODE_OCSSD_PHY_TYPE_BASE
 0xA0

	)

72 
	#REQ_CODE_OCSSD_PHY_WRITE
 0xA0

	)

73 
	#REQ_CODE_OCSSD_PHY_READ
 0xA8

	)

74 
	#REQ_CODE_OCSSD_PHY_ERASE
 0xAC

	)

77 
	#REQ_OPT_DATA_BUF_ENTRY
 0

	)

78 
	#REQ_OPT_DATA_BUF_TEMP_ENTRY
 1

	)

79 
	#REQ_OPT_DATA_BUF_ADDR
 2

	)

80 
	#REQ_OPT_DATA_BUF_NONE
 3

	)

82 
	#REQ_OPT_NAND_ADDR_VSA
 0

	)

83 
	#REQ_OPT_NAND_ADDR_PHY_ORG
 1

	)

85 
	#REQ_OPT_NAND_ECC_OFF
 0

	)

86 
	#REQ_OPT_NAND_ECC_ON
 1

	)

88 
	#REQ_OPT_NAND_ECC_WARNING_OFF
 0

	)

89 
	#REQ_OPT_NAND_ECC_WARNING_ON
 1

	)

91 
	#REQ_OPT_WRAPPING_NONE
 0

	)

92 
	#REQ_OPT_WRAPPING_REQ
 1

	)

94 
	#REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
 0

	)

95 
	#REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
 1

	)

97 
	#REQ_OPT_BLOCK_SPACE_MAIN
 0

	)

98 
	#REQ_OPT_BLOCK_SPACE_TOTAL
 1

	)

100 
	#LOGICAL_SLICE_ADDR_NONE
 0xffffffff

	)

102 
	s_DATA_BUF_INFO
{

104 
	maddr
;

105 
	míåy
;

107 } 
	tDATA_BUF_INFO
, *
	tP_DATA_BUF_INFO
;

110 
	s_NVME_DMA_INFO
{

111 
	m°¨tIndex
 : 16;

112 
	mnvmeBlockOff£t
 : 16;

113 
	mnumOfNvmeBlock
 : 16;

114 
	mªqTaû
 : 8;

115 
	mfua
 : 1;

116 
	mª£rved0
 : 7;

117 
	movîFlowC¡
;

118 } 
	tNVME_DMA_INFO
, *
	tP_NVME_DMA_INFO
;

121 
	s_NAND_INFO
{

123 
	mvútuÆSli˚Addr
;

125 
	mphysiˇlCh
 : 4;

126 
	mphysiˇlWay
 : 4;

127 
	mphysiˇlBlock
 : 16;

128 
	mphyRe£rved0
 : 8;

132 
	m¥ogømmedPageC¡
;

134 
	mphysiˇlPage
 : 16;

135 
	mphyRe£rved1
 : 16;

138 } 
	tNAND_INFO
, *
	tP_NAND_INFO
;

141 
	s_REQ_OPTION
{

142 
	md©aBufF‹m©
 : 2;

143 
	m«ndAddr
 : 2;

144 
	m«ndEcc
 : 1;

145 
	m«ndEccW¨nög
 : 1;

146 
	mrowAddrDïídícyCheck
 : 1;

147 
	mblockS∑˚
 : 1;

148 
	mª£rved0
 : 24;

149 } 
	tREQ_OPTION
, *
	tP_REQ_OPTION
;

152 
	s_SSD_REQ_FORMAT


154 
	mªqTy≥
 : 4;

155 
	mªqQueueTy≥
 : 4;

156 
	mªqCode
 : 8;

157 
	mnvmeCmdSlŸTag
 : 16;

159 
	mlogiˇlSli˚Addr
;

161 
REQ_OPTION
 
	mªqO±
;

162 
DATA_BUF_INFO
 
	md©aBufInfo
;

163 
NVME_DMA_INFO
 
	mnvmeDmaInfo
;

164 
NAND_INFO
 
	m«ndInfo
;

166 
	m¥evReq
 : 16;

167 
	m√xtReq
 : 16;

168 
	m¥evBlockögReq
 : 16;

169 
	m√xtBlockögReq
 : 16;

173 
	m°ªam_id_2
;

174 
	m°ªam_id_1
;

175 
	mïoch_id_2
;

176 
	mïoch_id_1
;

177 
	mb¨rõr_Êag
 :1;

178 
	mm≠∑bÀ_1
 :1;

179 
	mm≠∑bÀ_2
 :1;

180 
	mª£rved0
 :29;

183 } 
	tSSD_REQ_FORMAT
, *
	tP_SSD_REQ_FORMAT
;

	@request_queue.h

45 #i‚de‡
REQUEST_QUEUE_H_


46 
	#REQUEST_QUEUE_H_


	)

49 
	s_FREE_REQUEST_QUEUE


51 
	mhódReq
 : 16;

52 
	mèûReq
 : 16;

53 
	mªqC¡
 : 16;

54 
	mª£rved0
 : 16;

55 } 
	tFREE_REQUEST_QUEUE
, *
	tP_FREE_REQUEST_QUEUE
;

57 
	s_SLICE_REQUEST_QUEUE


59 
	mhódReq
 : 16;

60 
	mèûReq
 : 16;

61 
	mªqC¡
 : 16;

62 
	mª£rved0
 : 16;

63 } 
	tSLICE_REQUEST_QUEUE
, *
	tP_SLICE_REQUEST_QUEUE
;

65 
	s_BLOCKED_BY_BUFFER_DEPENDENCY_REQUEST_QUEUE


67 
	mhódReq
 : 16;

68 
	mèûReq
 : 16;

69 
	mªqC¡
 : 16;

70 
	mª£rved0
 : 16;

71 } 
	tBLOCKED_BY_BUFFER_DEPENDENCY_REQUEST_QUEUE
, *
	tP_BLOCKED_BY_BUFFER_DEPENDENCY_REQUEST_QUEUE
;

73 
	s_BLOCKED_BY_ROW_ADDR_DEPENDENCY_REQUEST_QUEUE


75 
	mhódReq
 : 16;

76 
	mèûReq
 : 16;

77 
	mªqC¡
 : 16;

78 
	mª£rved0
 : 16;

79 } 
	tBLOCKED_BY_ROW_ADDR_DEPENDENCY_REQUEST_QUEUE
, *
	tPBLOCKED_BY_ROW_ADDR_DEPENDENCY_REQUEST_QUEUE
;

81 
	s_NVME_DMA_REQUEST_QUEUE


83 
	mhódReq
 : 16;

84 
	mèûReq
 : 16;

85 
	mªqC¡
 : 16;

86 
	mª£rved0
 : 16;

87 } 
	tNVME_DMA_REQUEST_QUEUE
, *
	tP_NVME_DMA_REQUEST_QUEUE
;

89 
	s_NAND_REQUEST_QUEUE


91 
	mhódReq
 : 16;

92 
	mèûReq
 : 16;

93 
	mªqC¡
 : 16;

94 
	mª£rved0
 : 16;

95 } 
	tNAND_REQUEST_QUEUE
, *
	tP_NAND_REQUEST_QUEUE
;

	@request_schedule.c

49 
	~<as£π.h
>

50 
	~"xû_¥ötf.h
"

51 
	~"mem‹y_m≠.h
"

52 
	~"debug.h
"

53 
	~"hÆ/hÆ_ho°.h
"

55 
P_COMPLETE_FLAG_TABLE
 
	gcom∂ëeFœgTabÀPå
;

56 
P_STATUS_REPORT_TABLE
 
	g°©usRï‹tTabÀPå
;

57 
P_ERROR_INFO_TABLE
 
	geccEº‹InfoTabÀPå
;

58 
P_RETRY_LIMIT_TABLE
 
	gªåyLimôTabÀPå
;

60 
P_DIE_STATE_TABLE
 
	gdõSèãTabÀPå
;

61 
P_WAY_PRIORITY_TABLE
 
	gwayPri‹ôyTabÀPå
;

64 
	$_CheckEccEº‹Info
(
chNo
, 
wayNo
)

66 
îr‹Info0
, 
ªqSlŸTag
;

68 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
);

70 
îr‹Info0
 = 
eccEº‹InfoTabÀPå
->
îr‹Info
[
chNo
][
wayNo
][0];

73 i‡(
	`V2FCrcVÆid
(
eccEº‹InfoTabÀPå
->
îr‹Info
[
chNo
][
wayNo
]))

76 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEccW¨nög
 =
REQ_OPT_NAND_ECC_WARNING_ON
)

77 if(
	`V2FW‹°ChunkEº‹Cou¡
(&
îr‹Info0
)> 
BIT_ERROR_THRESHOLD_PER_CHUNK
)

78  
ERROR_INFO_WARNING
;

80  
ERROR_INFO_PASS
;

83  
ERROR_INFO_FAIL
;

84 
	}
}

86 
	$_CheckReqSètus
(
chNo
, 
wayNo
)

88 
ªqSlŸTag
, 
com∂ëeFœg
, 
°©usRï‹t
, 
îr‹Info
, 
ªadyBusy
, 
°©us
;

89 * 
°©usRï‹tPå
;

91 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
);

93 if(
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 =
REQ_STATUS_CHECK_OPT_COMPLETION_FLAG
)

95 
com∂ëeFœg
 = 
com∂ëeFœgTabÀPå
->com∂ëeFœg[
chNo
][
wayNo
];

97 if(
	`V2FTøns„rCom∂ëe
(
com∂ëeFœg
))

99 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
 =
REQ_OPT_NAND_ECC_ON
)

101 
îr‹Info
 = 
	`_CheckEccEº‹Info
(
chNo
, 
wayNo
);

103 i‡(
îr‹Info
 =
ERROR_INFO_WARNING
)

104  
REQ_STATUS_WARNING
;

105 i‡(
îr‹Info
 =
ERROR_INFO_FAIL
){

107  
REQ_STATUS_FAIL
;

110  
REQ_STATUS_DONE
;

113 if(
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 =
REQ_STATUS_CHECK_OPT_CHECK
)

115 
°©usRï‹tPå
 = (*)(&
°©usRï‹tTabÀPå
->
°©usRï‹t
[
chNo
][
wayNo
]);

117 
	`V2FSètusCheckAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
°©usRï‹tPå
);

119 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_REPORT
;

121 if(
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 =
REQ_STATUS_CHECK_OPT_REPORT
)

123 
°©usRï‹t
 = 
°©usRï‹tTabÀPå
->°©usRï‹t[
chNo
][
wayNo
];

125 if(
	`V2FReque°Rï‹tD⁄e
(
°©usRï‹t
))

127 
°©us
 = 
	`V2FElimö©eRï‹tD⁄eFœg
(
°©usRï‹t
);

128 if(
	`V2FReque°Com∂ëe
(
°©us
))

130 i‡(
	`V2FReque°Faû
(
°©us
)){

132  
REQ_STATUS_FAIL
;

135 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_NONE
;

136  
REQ_STATUS_DONE
;

139 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_CHECK
;

142 if(
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 =
REQ_STATUS_CHECK_OPT_NONE
)

144 
ªadyBusy
 = 
	`V2FRódyBusyAsync
(&
chCéReg
[
chNo
]);

146 if(
	`V2FWayRódy
(
ªadyBusy
, 
wayNo
))

147  
REQ_STATUS_DONE
;

150 
	`as£π
(!"[WARNING] wrongÑequest status check option [WARNING]");

152  
REQ_STATUS_RUNNING
;

153 
	}
}

155 
	$_Gíî©eN™dRowAddr
(
ªqSlŸTag
)

157 
rowAddr
, 
lun
, 
vútuÆBlockNo
, 
ãmpBlockNo
, 
phyBlockNo
, 
ãmpPageNo
, 
dõNo
;

159 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
 =
REQ_OPT_NAND_ADDR_VSA
)

161 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

162 
vútuÆBlockNo
 = 
	`Vß2VblockTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

163 
phyBlockNo
 = 
	`Vblock2PblockOfTbsTøn¶©i⁄
(
vútuÆBlockNo
);

164 
lun
 = 
phyBlockNo
 / 
TOTAL_BLOCKS_PER_LUN
;

165 
ãmpBlockNo
 = 
phyBlockM≠På
->
phyBlock
[
dõNo
][
phyBlockNo
].
ªm≠≥dPhyBlock
 % 
TOTAL_BLOCKS_PER_LUN
;

166 
ãmpPageNo
 = 
	`Vß2V∑geTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

171 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
 =
REQ_OPT_NAND_ADDR_PHY_ORG
)

173 
dõNo
 = 
	`Pcw2VdõTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlCh
,ÑeqPoﬁPå->ªqPoﬁ[ªqSlŸTag].«ndInfo.
physiˇlWay
);

174 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
blockS∑˚
 =
REQ_OPT_BLOCK_SPACE_TOTAL
)

176 
lun
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlBlock
 / 
TOTAL_BLOCKS_PER_LUN
;

178 
ãmpBlockNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlBlock
 % 
TOTAL_BLOCKS_PER_LUN
;

179 
ãmpPageNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlPage
;

181 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
blockS∑˚
 =
REQ_OPT_BLOCK_SPACE_MAIN
)

183 
lun
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlBlock
 / 
MAIN_BLOCKS_PER_LUN
;

184 
ãmpBlockNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlBlock
 % 
MAIN_BLOCKS_PER_LUN
 + 
lun
 * 
TOTAL_BLOCKS_PER_LUN
;

187 
ãmpBlockNo
 = 
phyBlockM≠På
->
phyBlock
[
dõNo
][ãmpBlockNo].
ªm≠≥dPhyBlock
 % 
TOTAL_BLOCKS_PER_LUN
;

188 
ãmpPageNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlPage
;

193 
	`as£π
(!"[WARNING] wrongÇandáddr option [WARNING]");

196 if(
lun
 == 0)

198 
rowAddr
 = 
LUN_0_BASE_ADDR
 + 
ãmpBlockNo
 * 
PAGES_PER_MLC_BLOCK
 + 
ãmpPageNo
;

202 
rowAddr
 = 
LUN_1_BASE_ADDR
 + 
ãmpBlockNo
 * 
PAGES_PER_MLC_BLOCK
 + 
ãmpPageNo
;

205  
rowAddr
;

206 
	}
}

208 
	$_PutToN™dRódTriggîLi°
(
chNo
, 
wayNo
)

210 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 !
WAY_NONE
)

212 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
ªadTriggîTaû
;

213 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

214 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
ªadTriggîTaû
].
√xtWay
 = 
wayNo
;

215 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 = 
wayNo
;

219 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

220 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

221 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
 = 
wayNo
;

222 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 = 
wayNo
;

224 
	}
}

226 
	$_PutToN™dWrôeLi°
(
chNo
, 
wayNo
)

228 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 !
WAY_NONE
)

230 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
wrôeTaû
;

231 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

232 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
wrôeTaû
].
√xtWay
 = 
wayNo
;

233 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 = 
wayNo
;

237 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

238 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

239 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
 = 
wayNo
;

240 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 = 
wayNo
;

242 
	}
}

244 
	$_PutToN™dRódTøns„rLi°
(
chNo
, 
wayNo
)

246 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 !
WAY_NONE
)

248 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
ªadTøns„rTaû
;

249 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

250 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
ªadTøns„rTaû
].
√xtWay
 = 
wayNo
;

251 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 = 
wayNo
;

255 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

256 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

257 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
 = 
wayNo
;

258 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 = 
wayNo
;

260 
	}
}

262 
	$_PutToN™dEø£Li°
(
chNo
, 
wayNo
)

264 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 !
WAY_NONE
)

266 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
îa£Taû
;

267 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

268 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
îa£Taû
].
√xtWay
 = 
wayNo
;

269 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 = 
wayNo
;

273 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

274 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

275 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
 = 
wayNo
;

276 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 = 
wayNo
;

278 
	}
}

280 
	$_PutToN™dWayPri‹ôyTabÀ
(
ªqSlŸTag
, 
chNo
, 
wayNo
)

282 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

284 
	`_PutToN™dRódTriggîLi°
(
chNo
, 
wayNo
);

286 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ_TRANSFER
)

288 
	`_PutToN™dRódTøns„rLi°
(
chNo
, 
wayNo
);

290 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
)

292 
	`_PutToN™dWrôeLi°
(
chNo
, 
wayNo
);

294 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_ERASE
)

296 
	`_PutToN™dEø£Li°
(
chNo
, 
wayNo
);

298 if((
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_RESET
)|| (ªqPoﬁPå->ªqPoﬁ[ªqSlŸTag].ªqCodê=
REQ_CODE_SET_FEATURE
))

300 
	`_PutToN™dWrôeLi°
(
chNo
, 
wayNo
);

304 
	`as£π
(!"[WARNING] wrongÑeqCode [WARNING]");

306 
	}
}

308 
	$_PutToN™dIdÀLi°
(
chNo
, 
wayNo
)

310 
	`ASSERT
(
USER_WAYS
 > 
wayNo
);

312 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 !
WAY_NONE
)

314 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
idÀTaû
;

315 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

316 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
idÀTaû
].
√xtWay
 = 
wayNo
;

317 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 = 
wayNo
;

321 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

322 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

323 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
 = 
wayNo
;

324 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 = 
wayNo
;

326 
	}
}

328 
	$_PutToN™dSètusCheckLi°
(
chNo
, 
wayNo
)

330 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 !
WAY_NONE
)

332 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
°©usCheckTaû
;

333 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

334 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
°©usCheckTaû
].
√xtWay
 = 
wayNo
;

335 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 = 
wayNo
;

339 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

340 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

341 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
 = 
wayNo
;

342 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 = 
wayNo
;

344 
	}
}

346 
	$_Sñe˘ivGëFromN™dIdÀLi°
(
chNo
, 
wayNo
)

348 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

350 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

351 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

353 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

355 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

356 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

358 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

360 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

361 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

363 
	`ASSERT
(
USER_WAYS
 > 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
);

367 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
 = 
WAY_NONE
;

368 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 = 
WAY_NONE
;

370 
	}
}

372 
	$_PutToN™dSètusRï‹tLi°
(
chNo
, 
wayNo
)

374 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 !
WAY_NONE
)

376 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
°©usRï‹tTaû
;

377 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

378 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[chNo].
°©usRï‹tTaû
].
√xtWay
 = 
wayNo
;

379 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 = 
wayNo
;

383 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = 
WAY_NONE
;

384 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = 
WAY_NONE
;

385 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
 = 
wayNo
;

386 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 = 
wayNo
;

388 
	}
}

390 
	$_Sñe˘ivGëFromN™dSètusRï‹tLi°
(
chNo
, 
wayNo
)

392 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

394 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

395 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

397 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

399 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

400 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

402 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

404 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

405 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

409 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
 = 
WAY_NONE
;

410 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 = 
WAY_NONE
;

412 
	}
}

414 
	$_Sñe˘iveGëFromN™dRódTriggîLi°
(
chNo
, 
wayNo
)

416 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

418 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

419 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

421 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

423 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

424 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

426 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

428 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

429 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

433 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
 = 
WAY_NONE
;

434 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 = 
WAY_NONE
;

436 
	}
}

438 
	$_Sñe˘iveGëFromN™dWrôeLi°
(
chNo
, 
wayNo
)

440 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

442 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

443 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

445 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

447 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

448 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

450 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

452 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

453 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

457 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
 = 
WAY_NONE
;

458 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 = 
WAY_NONE
;

460 
	}
}

462 
	$_Sñe˘iveGëFromN™dRódTøns„rLi°
(
chNo
, 
wayNo
)

464 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

466 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

467 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

469 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

471 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

472 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

474 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

476 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

477 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

481 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
 = 
WAY_NONE
;

482 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 = 
WAY_NONE
;

484 
	}
}

486 
	$_Sñe˘iveGëFromN™dEø£Li°
(
chNo
, 
wayNo
)

488 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

490 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

491 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

493 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

495 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

496 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

498 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

500 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

501 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

505 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
 = 
WAY_NONE
;

506 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 = 
WAY_NONE
;

508 
	}
}

510 
	$_Sñe˘iveGëFromN™dSètusCheckLi°
(
chNo
, 
wayNo
)

512 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

514 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = dieStateTablePtr->dieState[chNo][wayNo].nextWay;

515 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = dieStateTablePtr->dieState[chNo][wayNo].prevWay;

517 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 =
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 != WAY_NONE))

519 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
¥evWay
].
√xtWay
 = 
WAY_NONE
;

520 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
¥evWay
;

522 if((
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 !
WAY_NONE
Ë&& (dõSèãTabÀPå->dõSèã[chNo][wayNo].
¥evWay
 == WAY_NONE))

524 
dõSèãTabÀPå
->
dõSèã
[
chNo
][dõSèãTabÀPå->dõSèã[chNo][
wayNo
].
√xtWay
].
¥evWay
 = 
WAY_NONE
;

525 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
 = 
dõSèãTabÀPå
->
dõSèã
[chNo][
wayNo
].
√xtWay
;

529 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
 = 
WAY_NONE
;

530 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 = 
WAY_NONE
;

533 
	}
}

535 
	$_IssueN™dReq
(
chNo
, 
wayNo
)

537 
ªqSlŸTag
, 
rowAddr
;

538 * 
d©aBufAddr
;

539 * 
•¨eD©aBufAddr
;

540 * 
îr‹Info
;

541 * 
com∂ëi⁄
;

543 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
);

544 
rowAddr
 = 
	`_Gíî©eN™dRowAddr
(
ªqSlŸTag
);

545 
d©aBufAddr
 = (*)
	`Buf„rM™agemít_GëD©aBufAddr
(
ªqSlŸTag
);

546 
•¨eD©aBufAddr
 = (*)
	`Buf„rM™agemít_GëS∑ªD©aBufAddr
(
ªqSlŸTag
);

548 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
)

550 
REQ_CODE_READ
:

551 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_CHECK
;

553 
	`V2FRódPageTriggîAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
rowAddr
);

555 
REQ_CODE_READ_TRANSFER
:

556 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_COMPLETION_FLAG
;

558 
îr‹Info
 = (*)(&
eccEº‹InfoTabÀPå
->îr‹Info[
chNo
][
wayNo
]);

559 
com∂ëi⁄
 = (*)(&
com∂ëeFœgTabÀPå
->
com∂ëeFœg
[
chNo
][
wayNo
]);

561 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
 =
REQ_OPT_NAND_ECC_ON
)

563 
	`V2FRódPageTøns„rAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
d©aBufAddr
, 
•¨eD©aBufAddr
, 
îr‹Info
, 
com∂ëi⁄
, 
rowAddr
);

567 
	`V2FRódPageTøns„rRawAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
d©aBufAddr
, 
com∂ëi⁄
);

570 
REQ_CODE_WRITE
:

571 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_CHECK
;

573 
	`V2FProgømPageAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
rowAddr
, 
d©aBufAddr
, 
•¨eD©aBufAddr
);

575 
REQ_CODE_ERASE
:

576 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_CHECK
;

578 
	`V2FEø£BlockAsync
(&
chCéReg
[
chNo
], 
wayNo
, 
rowAddr
);

580 
REQ_CODE_RESET
:

581 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_NONE
;

583 
	`V2FRe£tSync
(&
chCéReg
[
chNo
], 
wayNo
);

585 
REQ_CODE_SET_FEATURE
:

586 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_NONE
;

588 
	`V2FE¡îToggÀMode
(&
chCéReg
[
chNo
], 
wayNo
, 
TEMPORARY_PAY_LOAD_ADDR
);

591 
	`as£π
(!"[WARNING]Çot definedÇandÑeq [WARNING]");

594 
	}
}

596 
	$_ExecuãN™dReq
(
chNo
, 
wayNo
, 
ªqSètus
)

598 
ªqSlŸTag
, 
rowAddr
, 
phyBlockNo
;

599 * 
badCheck
 ;

601 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
);

603 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dieState)

605 
DIE_STATE_IDLE
:

606 
	`_IssueN™dReq
(
chNo
, 
wayNo
);

607 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_EXE
;

609 
DIE_STATE_EXE
:

610 if(
REQ_STATUS_DONE
 =
ªqSètus
)

612 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

614 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_READ_TRANSFER
;

618 
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
] = 
RETRY_LIMIT
;

620 
	`Reque°AŒoˇti⁄_GëE¡ryFromN™dReqQ
(
chNo
, 
wayNo
, 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
);

623 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_IDLE
;

625 if(
REQ_STATUS_FAIL
 =
ªqSètus
)

627 if((
REQ_CODE_READ
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
)

628 || (
REQ_CODE_READ_TRANSFER
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
))

630 if(
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
] > 0)

632 
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
]--;

634 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ_TRANSFER
)

636 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_READ
;

639 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_IDLE
;

644 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

646 
	`xû_¥ötf
("Read Trigger FAIL on ");

648 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ_TRANSFER
)

650 
	`xû_¥ötf
("Read Transfer FAIL on ");

652 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_WRITE
)

654 
	`xû_¥ötf
("Write FAIL on ");

656 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_ERASE
)

658 
	`xû_¥ötf
("Erase FAIL on ");

661 
rowAddr
 = 
	`_Gíî©eN™dRowAddr
(
ªqSlŸTag
);

663 
	`xû_¥ötf
("ch %x way %xÑowAdd∏%x / com∂ëi⁄ %x sètusRï‹à%x \r\n", 
chNo
, 
wayNo
, 
rowAddr
, 
com∂ëeFœgTabÀPå
->
com∂ëeFœg
[chNo][wayNo],
°©usRï‹tTabÀPå
->
°©usRï‹t
[chNo][wayNo]);

665 i‡(
REQ_OPT_NAND_ECC_OFF
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
)

667 i‡(
REQ_OPT_DATA_BUF_ADDR
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
)

670 
badCheck
 = (*)
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
addr
;

671 *
badCheck
 = 
PSEUDO_BAD_BLOCK_MARK
;

676 
phyBlockNo
 = ((
rowAddr
 % 
LUN_1_BASE_ADDR
Ë/ 
PAGES_PER_MLC_BLOCK
Ë+ (‘owAdd∏/ LUN_1_BASE_ADDR)* 
TOTAL_BLOCKS_PER_LUN
);

678 
	`Upd©ePhyBlockM≠F‹GrownBadBlock
(
	`Pcw2VdõTøn¶©i⁄
(
chNo
, 
wayNo
), 
phyBlockNo
);

680 
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
] = 
RETRY_LIMIT
;

682 
	`Reque°AŒoˇti⁄_GëE¡ryFromN™dReqQ
(
chNo
, 
wayNo
, 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
);

684 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_IDLE
;

686 if(
REQ_STATUS_WARNING
 =
ªqSètus
)

688 
rowAddr
 = 
	`_Gíî©eN™dRowAddr
(
ªqSlŸTag
);

689 
	`xû_¥ötf
("ECC Unc‹ª˘abÀ So⁄ o¿ch %x way %xÑowAdd∏%x / com∂ëi⁄ %x sètusRï‹à%x \r\n", 
chNo
, 
wayNo
, 
rowAddr
, 
com∂ëeFœgTabÀPå
->
com∂ëeFœg
[chNo][wayNo],
°©usRï‹tTabÀPå
->
°©usRï‹t
[chNo][wayNo]);

692 
phyBlockNo
 = ((
rowAddr
 % 
LUN_1_BASE_ADDR
Ë/ 
PAGES_PER_MLC_BLOCK
Ë+ (‘owAdd∏/ LUN_1_BASE_ADDR)* 
TOTAL_BLOCKS_PER_LUN
);

693 
	`Upd©ePhyBlockM≠F‹GrownBadBlock
(
	`Pcw2VdõTøn¶©i⁄
(
chNo
, 
wayNo
), 
phyBlockNo
);

695 
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
] = 
RETRY_LIMIT
;

697 
	`Reque°AŒoˇti⁄_GëE¡ryFromN™dReqQ
(
chNo
, 
wayNo
, 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
);

699 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_IDLE
;

701 if(
ªqSètus
 =
REQ_STATUS_RUNNING
)

707 
	`as£π
(!"[WARNING] wrongÑeq status [WARNING]");

711 
	}
}

713 
	$_SchedulögN™dReqPîCh
(
chNo
)

715 
ªadyBusy
, 
wayNo
, 
ªqSètus
, 
√xtWay
, 
waôWayC¡
;

717 
waôWayC¡
 = 0;

719 i‡(
WAY_NONE
 !
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
)

721 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
;

723 
wayNo
 !
WAY_NONE
)

725 i‡(0 =
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NAND
,
chNo
,
wayNo
))

727 
	`Rñó£BlockedByRowAddrDïReq
(
chNo
, 
wayNo
);

730 i‡(0 !
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NAND
,
chNo
,
wayNo
))

732 
√xtWay
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].nextWay;

734 
	`_Sñe˘ivGëFromN™dIdÀLi°
(
chNo
, 
wayNo
);

735 
	`_PutToN™dWayPri‹ôyTabÀ
(
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
), chNo, wayNo);

736 
wayNo
 = 
√xtWay
;

740 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

742 
waôWayC¡
++;

747 i‡(
WAY_NONE
 !
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
)

749 
ªadyBusy
 = 
	`V2FRódyBusyAsync
(&
chCéReg
[
chNo
]);

750 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
;

752 
wayNo
 !
WAY_NONE
)

754 if(
	`V2FWayRódy
(
ªadyBusy
, 
wayNo
))

756 
ªqSètus
 = 
	`_CheckReqSètus
(
chNo
, 
wayNo
);

758 if(
ªqSètus
 !
REQ_STATUS_RUNNING
)

760 
	`_ExecuãN™dReq
(
chNo
, 
wayNo
, 
ªqSètus
);

761 
√xtWay
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].nextWay;

762 
	`_Sñe˘ivGëFromN™dSètusRï‹tLi°
(
chNo
, 
wayNo
);

764 i‡(0 =
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NAND
, 
chNo
, 
wayNo
))

766 
	`Rñó£BlockedByRowAddrDïReq
(
chNo
, 
wayNo
);

769 i‡(0 !
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NAND
, 
chNo
, 
wayNo
))

771 
	`_PutToN™dWayPri‹ôyTabÀ
(
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromN™dReqQ
(
chNo
, 
wayNo
), chNo, wayNo);

775 
	`_PutToN™dIdÀLi°
(
chNo
, 
wayNo
);

776 
waôWayC¡
++;

779 
wayNo
 = 
√xtWay
;

781 if(
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 =
REQ_STATUS_CHECK_OPT_CHECK
)

783 
√xtWay
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].nextWay;

784 
	`_Sñe˘ivGëFromN™dSètusRï‹tLi°
(
chNo
, 
wayNo
);

786 
	`_PutToN™dSètusCheckLi°
(
chNo
, 
wayNo
);

787 
wayNo
 = 
√xtWay
;

791 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

792 
waôWayC¡
++;

797 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

798 
waôWayC¡
++;

803 i‡(
waôWayC¡
 !
USER_WAYS
)

805 if(!
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

807 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
 !
WAY_NONE
)

809 
ªadyBusy
 = 
	`V2FRódyBusyAsync
(&
chCéReg
[
chNo
]);

810 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
;

812 
wayNo
 !
WAY_NONE
)

814 if(
	`V2FWayRódy
(
ªadyBusy
, 
wayNo
))

816 
ªqSètus
 = 
	`_CheckReqSètus
(
chNo
, 
wayNo
);

818 
	`_Sñe˘iveGëFromN™dSètusCheckLi°
(
chNo
,
wayNo
);

819 
	`_PutToN™dSètusRï‹tLi°
(
chNo
, 
wayNo
);

821 if(
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

827 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

831 if–
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
 !
WAY_NONE
)

833 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
;

835 
wayNo
 !
WAY_NONE
)

837 
	`_ExecuãN™dReq
(
chNo
, 
wayNo
, 
REQ_STATUS_RUNNING
);

839 
	`_Sñe˘iveGëFromN™dRódTriggîLi°
(
chNo
, 
wayNo
);

840 
	`_PutToN™dSètusCheckLi°
(
chNo
, 
wayNo
);

842 if(
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

845 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

849 i‡(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
 !
WAY_NONE
)

851 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
;

854 
wayNo
 !
WAY_NONE
)

856 
	`_ExecuãN™dReq
(
chNo
, 
wayNo
, 
REQ_STATUS_RUNNING
);

858 
	`_Sñe˘iveGëFromN™dEø£Li°
(
chNo
, 
wayNo
);

859 
	`_PutToN™dSètusCheckLi°
(
chNo
, 
wayNo
);

861 if(
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

866 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

870 if(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
 !
WAY_NONE
)

872 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
;

874 
wayNo
 !
WAY_NONE
)

876 
	`_ExecuãN™dReq
(
chNo
, 
wayNo
, 
REQ_STATUS_RUNNING
);

878 
	`_Sñe˘iveGëFromN™dWrôeLi°
(
chNo
, 
wayNo
);

879 
	`_PutToN™dSètusCheckLi°
(
chNo
, 
wayNo
);

881 if(
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

886 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

890 i‡(
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
 !
WAY_NONE
)

892 
wayNo
 = 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
;

894 
wayNo
 !
WAY_NONE
)

896 
	`_ExecuãN™dReq
(
chNo
, 
wayNo
, 
REQ_STATUS_RUNNING
);

898 
	`_Sñe˘iveGëFromN™dRódTøns„rLi°
(
chNo
, 
wayNo
);

899 
	`_PutToN™dSètusRï‹tLi°
(
chNo
, 
wayNo
);

901 if(
	`V2FIsC⁄åﬁÀrBusy
(&
chCéReg
[
chNo
]))

906 
wayNo
 = 
dõSèãTabÀPå
->
dõSèã
[
chNo
][wayNo].
√xtWay
;

911 
	}
}

913 
	$Reque°ScheduÀr_SyncRñó£Eø£Req
(
chNo
, 
wayNo
, 
blockNo
)

915 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
)

917 
	`hÆ_ho°_h™dÀ_hdma_ªsu…
();

918 
	`Reque°ScheduÀr_SchedulögN™dReq
();

920 
	}
}

922 
	$Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
()

924 (
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_NVME_DMA
, 0, 0))

925 || 
nŸCom∂ëedN™dReqC¡


926 || 
blockedReqC¡
)

928 
	`hÆ_ho°_h™dÀ_hdma_ªsu…
();

929 
	`Reque°ScheduÀr_SchedulögN™dReq
();

931 
	}
}

933 
	$Reque°ScheduÀr_SyncAvaûFªeReq
()

935 0 =
	`Reque°AŒoˇti⁄_GëReqPoﬁCou¡
(
REQ_QUEUE_TYPE_FREE
, 0, 0))

937 
	`hÆ_ho°_h™dÀ_hdma_ªsu…
();

938 
	`Reque°ScheduÀr_SchedulögN™dReq
();

940 
	}
}

942 
	$Reque°ScheduÀr_SchedulögN™dReq
()

944 
chNo
;

946 
chNo
 = 0; chNÿ< 
USER_CHANNELS
; chNo++)

948 
	`_SchedulögN™dReqPîCh
(
chNo
);

950 
	}
}

953 
	$Reque°ScheduÀr_Inô
()

955 
chNo
,
wayNo
;

957 
com∂ëeFœgTabÀPå
 = (
P_COMPLETE_FLAG_TABLE
Ë
COMPLETE_FLAG_TABLE_ADDR
;

958 
°©usRï‹tTabÀPå
 = (
P_STATUS_REPORT_TABLE
Ë
STATUS_REPORT_TABLE_ADDR
;

959 
eccEº‹InfoTabÀPå
 = (
P_ERROR_INFO_TABLE
Ë
ERROR_INFO_TABLE_ADDR
;

960 
ªåyLimôTabÀPå
 = (
P_RETRY_LIMIT_TABLE
Ë
RETRY_LIMIT_TABLE_ADDR
;

962 
dõSèãTabÀPå
 = (
P_DIE_STATE_TABLE
Ë
DIE_STATE_TABLE_ADDR
;

963 
wayPri‹ôyTabÀPå
 = (
P_WAY_PRIORITY_TABLE
Ë
WAY_PRIORITY_TABLE_ADDR
;

965 
chNo
=0; chNo<
USER_CHANNELS
; ++chNo)

967 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀHód
 = 0;

968 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
idÀTaû
 = 
USER_WAYS
 - 1;

969 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tHód
 = 
WAY_NONE
;

970 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usRï‹tTaû
 = 
WAY_NONE
;

971 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Hód
 = 
WAY_NONE
;

972 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
îa£Taû
 = 
WAY_NONE
;

973 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîHód
 = 
WAY_NONE
;

974 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTriggîTaû
 = 
WAY_NONE
;

975 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeHód
 = 
WAY_NONE
;

976 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
wrôeTaû
 = 
WAY_NONE
;

977 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rHód
 = 
WAY_NONE
;

978 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
ªadTøns„rTaû
 = 
WAY_NONE
;

979 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckHód
 = 
WAY_NONE
;

980 
wayPri‹ôyTabÀPå
->
wayPri‹ôy
[
chNo
].
°©usCheckTaû
 = 
WAY_NONE
;

982 
wayNo
=0; wayNo<
USER_WAYS
; ++wayNo)

984 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].dõSèã = 
DIE_STATE_IDLE
;

985 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
ªqSètusCheckO±
 = 
REQ_STATUS_CHECK_OPT_NONE
;

986 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
¥evWay
 = wayNo - 1;

987 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
wayNo
].
√xtWay
 = wayNo + 1;

989 
com∂ëeFœgTabÀPå
->
com∂ëeFœg
[
chNo
][
wayNo
] = 0;

990 
°©usRï‹tTabÀPå
->
°©usRï‹t
[
chNo
][
wayNo
] = 0;

991 
ªåyLimôTabÀPå
->
ªåyLimô
[
chNo
][
wayNo
] = 
RETRY_LIMIT
;

993 
dõSèãTabÀPå
->
dõSèã
[
chNo
][0].
¥evWay
 = 
WAY_NONE
;

994 
dõSèãTabÀPå
->
dõSèã
[
chNo
][
USER_WAYS
-1].
√xtWay
 = 
WAY_NONE
;

996 
	}
}

	@request_schedule.h

48 #i‚de‡
REQUEST_SCHEDULE_H_


49 
	#REQUEST_SCHEDULE_H_


	)

51 
	~"·l/·l_c⁄fig.h
"

53 
	#WAY_NONE
 0xF

	)

55 
	#LUN_0_BASE_ADDR
 0x00000000

	)

56 
	#LUN_1_BASE_ADDR
 0x00100000

	)

58 
	#PSEUDO_BAD_BLOCK_MARK
 0

	)

60 
	#RETRY_LIMIT
 5

61 

	)

62 
	#DIE_STATE_IDLE
 0

	)

63 
	#DIE_STATE_EXE
 1

	)

65 
	#REQ_STATUS_CHECK_OPT_NONE
 0

	)

66 
	#REQ_STATUS_CHECK_OPT_CHECK
 1

	)

67 
	#REQ_STATUS_CHECK_OPT_REPORT
 2

	)

68 
	#REQ_STATUS_CHECK_OPT_COMPLETION_FLAG
 3

	)

70 
	#REQ_STATUS_RUNNING
 0

	)

71 
	#REQ_STATUS_DONE
 1

	)

72 
	#REQ_STATUS_FAIL
 2

	)

73 
	#REQ_STATUS_WARNING
 3

	)

75 
	#ERROR_INFO_FAIL
 0

	)

76 
	#ERROR_INFO_PASS
 1

	)

77 
	#ERROR_INFO_WARNING
 2

	)

80 
	s_COMPLETE_FLAG_TABLE
 {

81 
	mcom∂ëeFœg
[
USER_CHANNELS
][
USER_WAYS
];

82 } 
	tCOMPLETE_FLAG_TABLE
, *
	tP_COMPLETE_FLAG_TABLE
;

84 
	s_STATUS_REPORT_TABLE
 {

85 
	m°©usRï‹t
[
USER_CHANNELS
][
USER_WAYS
];

86 } 
	tSTATUS_REPORT_TABLE
, *
	tP_STATUS_REPORT_TABLE
;

88 
	s_ERROR_INFO_TABLE
 {

89 
	mîr‹Info
[
USER_CHANNELS
][
USER_WAYS
][
ERROR_INFO_WORD_COUNT
];

90 } 
	tERROR_INFO_TABLE
, *
	tP_ERROR_INFO_TABLE
;

92 
	s_RETRY_LIMIT_TABLE
 {

93 
	mªåyLimô
[
USER_CHANNELS
][
USER_WAYS
];

94 } 
	tRETRY_LIMIT_TABLE
, *
	tP_RETRY_LIMIT_TABLE
;

96 
	s_DIE_STATE_ENTRY
 {

97 
	mdõSèã
 : 8;

98 
	mªqSètusCheckO±
 : 4;

99 
	m¥evWay
 : 4;

100 
	m√xtWay
 : 4;

101 
	mª£rved
 : 12;

102 } 
	tDIE_STATE_ENTRY
, *
	tP_DIE_STATE_ENTRY
;

104 
	s_DIE_STATE_TABLE
 {

105 
DIE_STATE_ENTRY
 
	mdõSèã
[
USER_CHANNELS
][
USER_WAYS
];

106 } 
	tDIE_STATE_TABLE
, *
	tP_DIE_STATE_TABLE
;

109 
	s_WAY_PRIORITY_ENTRY
 {

110 
	midÀHód
 : 4;

111 
	midÀTaû
 : 4;

112 
	m°©usRï‹tHód
 : 4;

113 
	m°©usRï‹tTaû
 : 4;

114 
	mªadTriggîHód
 : 4;

115 
	mªadTriggîTaû
 : 4;

116 
	mwrôeHód
 : 4;

117 
	mwrôeTaû
 : 4;

118 
	mªadTøns„rHód
 : 4;

119 
	mªadTøns„rTaû
 : 4;

120 
	mîa£Hód
 : 4;

121 
	mîa£Taû
 : 4;

122 
	m°©usCheckHód
 : 4;

123 
	m°©usCheckTaû
 : 4;

124 
	mª£rved
 : 8;

125 } 
	tWAY_PRIORITY_ENTRY
, *
	tP_WAY_PRIORITY_ENTRY
;

127 
	s_WAY_PRIORITY_TABLE
 {

128 
WAY_PRIORITY_ENTRY
 
	mwayPri‹ôy
[
USER_CHANNELS
];

129 } 
	tWAY_PRIORITY_TABLE
, *
	tP_WAY_PRIORITY_TABLE
;

131 
Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

132 
Reque°ScheduÀr_SyncAvaûFªeReq
();

133 
Reque°ScheduÀr_SyncRñó£Eø£Req
(
chNo
, 
wayNo
, 
blockNo
);

134 
Reque°ScheduÀr_SchedulögN™dReq
();

136 
Reque°ScheduÀr_Inô
();

	@request_transform.c

50 
	~"xû_¥ötf.h
"

51 
	~<as£π.h
>

52 
	~"mem‹y_m≠.h
"

54 
	~"ho°/nvme/nvme.h
"

55 
	~"hÆ/Œd/Œd_hdma.h
"

56 
	~"hÆ/hÆ_ho°.h
"

58 
	~"·l/·l_c⁄fig.h
"

59 
	~"·l/b¨rõr_·l.h
"

61 
P_ROW_ADDR_DEPENDENCY_TABLE
 
	growAddrDïídícyTabÀPå
;

63 
	$_CheckBufDï
(
ªqSlŸTag
)

65 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
¥evBlockögReq
 =
REQ_SLOT_TAG_NONE
)

67  
BUF_DEPENDENCY_REPORT_PASS
;

71  
BUF_DEPENDENCY_REPORT_BLOCKED
;

73 
	}
}

75 
	$_CheckRowAddrDï
(
ªqSlŸTag
, 
checkRowAddrDïO±
)

77 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

79 if(
REQ_OPT_NAND_ADDR_VSA
 !
p_ªqE¡ry
->
ªqO±
.
«ndAddr
)

81 
	`as£π
(!"[WARNING] Not supportedÑeqOpt-nandAddress [WARNING]");

84 
dõNo
,
chNo
, 
wayNo
, 
blockNo
, 
∑geNo
;

86 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
p_ªqE¡ry
->
«ndInfo
.
vútuÆSli˚Addr
);

87 
chNo
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

88 
wayNo
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

89 
blockNo
 = 
	`Vß2VblockTøn¶©i⁄
(
p_ªqE¡ry
->
«ndInfo
.
vútuÆSli˚Addr
);

90 
∑geNo
 = 
	`Vß2V∑geTøn¶©i⁄
(
p_ªqE¡ry
->
«ndInfo
.
vútuÆSli˚Addr
);

92 i‡(
REQ_CODE_READ
 =
p_ªqE¡ry
->
ªqCode
)

94 i‡(
ROW_ADDR_DEPENDENCY_CHECK_OPT_SELECT
 =
checkRowAddrDïO±
)

96 i‡(
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
)

98 
	`Reque°ScheduÀr_SyncRñó£Eø£Req
(
chNo
, 
wayNo
, 
blockNo
);

101 if(
∑geNo
 < 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
)

103  
ROW_ADDR_DEPENDENCY_REPORT_PASS
;

106 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
++;

108 if(
ROW_ADDR_DEPENDENCY_CHECK_OPT_RELEASE
 =
checkRowAddrDïO±
)

110 i‡(
∑geNo
 < 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
)

112 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
--;

114  
ROW_ADDR_DEPENDENCY_REPORT_PASS
;

119 
	`as£π
(!"[WARNING] Not supported checkRowAddrDepOpt [WARNING]");

122 i‡(
REQ_CODE_WRITE
 =
p_ªqE¡ry
->
ªqCode
)

124 i‡(
∑geNo
 =
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
)

126 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
++;

128  
ROW_ADDR_DEPENDENCY_REPORT_PASS
;

131 i‡(
REQ_CODE_ERASE
 =
p_ªqE¡ry
->
ªqCode
)

133 if(
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
 =
p_ªqE¡ry
->
«ndInfo
.
¥ogømmedPageC¡
)

135 if(
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
 == 0)

137 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
 = 0;

138 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
 = 0;

140  
ROW_ADDR_DEPENDENCY_REPORT_PASS
;

144 if(
ROW_ADDR_DEPENDENCY_CHECK_OPT_SELECT
 =
checkRowAddrDïO±
)

146 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
 = 1;

148 if(
ROW_ADDR_DEPENDENCY_CHECK_OPT_RELEASE
 =
checkRowAddrDïO±
)

154 
	`as£π
(!"[WARNING] Not supported checkRowAddrDepOpt [WARNING]");

159 
	`as£π
(!"[WARNING] Not supportedÑeqCode [WARNING]");

162  
ROW_ADDR_DEPENDENCY_REPORT_BLOCKED
;

163 
	}
}

165 
	$_Upd©eRowAddrDïTabÀF‹BufBlockedReq
(
ªqSlŸTag
)

167 
SSD_REQ_FORMAT
* 
p_ªqE¡ry
 = 
	`Reque°AŒoˇti⁄_GëReqE¡ry
(
ªqSlŸTag
);

169 if(
REQ_OPT_NAND_ADDR_VSA
 !
p_ªqE¡ry
->
ªqO±
.
«ndAddr
)

171 
	`as£π
(!"[WARNING] Not supportedÑeqOpt-nandAddress [WARNING]");

174 
dõNo
, 
chNo
, 
wayNo
, 
blockNo
, 
∑geNo
, 
bufDïCheckRï‹t
;

176 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

177 
chNo
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

178 
wayNo
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

179 
blockNo
 = 
	`Vß2VblockTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

180 
∑geNo
 = 
	`Vß2V∑geTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

182 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_READ
)

184 if(
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
)

186 
	`Reque°ScheduÀr_SyncRñó£Eø£Req
(
chNo
, 
wayNo
, 
blockNo
);

188 
bufDïCheckRï‹t
 = 
	`_CheckBufDï
(
ªqSlŸTag
);

189 if(
bufDïCheckRï‹t
 =
BUF_DEPENDENCY_REPORT_PASS
)

191 if(
∑geNo
 < 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
)

193 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

197 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
++;

198 
	`Reque°AŒoˇti⁄_MoveToBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

201  
ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_SYNC
;

204 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
++;

206 if(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 =
REQ_CODE_ERASE
)

208 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
 = 1;

211  
ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_DONE
;

212 
	}
}

214 
	$InôDïídícyTabÀ
()

216 
blockNo
, 
wayNo
, 
chNo
;

217 
rowAddrDïídícyTabÀPå
 = (
P_ROW_ADDR_DEPENDENCY_TABLE
)
ROW_ADDR_DEPENDENCY_TABLE_ADDR
;

219 
tmp
 =10000, 
˙t
 = 0;

220 
blockNo
=0 ; blockNo<
MAIN_BLOCKS_PER_DIE
 ; blockNo++)

222 
wayNo
=0 ; wayNo<
USER_WAYS
 ; wayNo++)

224 
chNo
=0 ; chNo<
USER_CHANNELS
 ; chNo++)

226 i‡(
˙t
 % 
tmp
 == 0)

227 
	`xû_¥ötf
("%s: bno: %u\/%u wno: %u\/%u chno: %u\/%u \n", 
__func__
,

228 
blockNo
, 
MAIN_BLOCKS_PER_DIE
,

229 
wayNo
, 
USER_WAYS
,

230 
chNo
, 
USER_CHANNELS
);

231 
˙t
 ++;

232 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
≥rmôãdProgPage
 = 0;

233 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedRódReqC¡
 = 0;

234 
rowAddrDïídícyTabÀPå
->
block
[
chNo
][
wayNo
][
blockNo
].
blockedEø£ReqFœg
 = 0;

238 
	}
}

242 
	$FlushWrôeD©aToN™d
()

244 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

246 
ªqSlŸTag
;

247 
vútuÆSli˚Addr
;

249 
íåyIãøti⁄
 = 0;É¡ryIãøti⁄ < 
AVAILABLE_DATA_BUFFER_ENTRY_COUNT
;ÉntryIteration++)

251 if(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
dúty
 =
DATA_BUF_DIRTY
)

254 if(
íåyIãøti⁄
 !
d©aBufLruLi°
.
èûE¡ry
)

256 if(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
¥evE¡ry
 !
DATA_BUF_IDX_INVALID
)

258 
d©aBufM≠På
->
d©aBuf
[d©aBufM≠På->d©aBuf[
íåyIãøti⁄
].
¥evE¡ry
].
√xtE¡ry
 = dataBufMapPtr->dataBuf[entryIteration].nextEntry;

261 if(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
√xtE¡ry
 !
DATA_BUF_IDX_INVALID
)

263 
d©aBufM≠På
->
d©aBuf
[d©aBufM≠På->d©aBuf[
íåyIãøti⁄
].
√xtE¡ry
].
¥evE¡ry
 = dataBufMapPtr->dataBuf[entryIteration].prevEntry;

266 
d©aBufM≠På
->
d©aBuf
[
d©aBufLruLi°
.
èûE¡ry
].
√xtE¡ry
 = 
íåyIãøti⁄
;

267 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
¥evE¡ry
 = 
d©aBufLruLi°
.
èûE¡ry
;

268 
d©aBufLruLi°
.
èûE¡ry
 = 
íåyIãøti⁄
;

270 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

272 
uöt32_t
 
sid1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
°ªam_id_1
;

273 
uöt32_t
 
sid2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
°ªam_id_2
;

274 
uöt32_t
 
eid1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
ïoch_id_1
;

275 
uöt32_t
 
eid2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
ïoch_id_2
;

277 i‡(
sid1
 > 0) {

279 
uöt32_t
 
m≠∑bÀ_1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].mappable_1;

280 
uöt32_t
 
m≠∑bÀ_2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].mappable_2;

287 i‡((
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

288 && (
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))) {

289 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

291 
	`upd©e_ïoch_öfo
(
sid1
, 
eid1
, 
__func__
);

293 
	`upd©e_ïoch_öfo
(
sid2
, 
eid2
, 
__func__
);

300 } i‡–(
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

301 && !(
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))) {

302 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

303 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

305 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 2);

308 } i‡–!(
m≠∑bÀ_1
 || 
	`is_m≠∑bÀ
(
sid1
, 
eid1
))

309 && (
m≠∑bÀ_2
 || 
	`is_m≠∑bÀ
(
sid2
, 
eid2
))) {

310 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

311 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

313 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 1);

317 
vútuÆSli˚Addr
 = 
	`AddrTønsSu•í
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

318 #i‡(
SUPPORT_INSERT_SUSPENSION_LIST
 == 1)

320 
	`b¨rõr_ö£π_su•ísi⁄_¨øy_duÆ_°ªam
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
, 
vútuÆSli˚Addr
, 
sid1
, 
eid1
, 
sid2
, 
eid2
, 0);

325 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

328 
vútuÆSli˚Addr
 = 
	`AddrTønsWrôe
(
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
logiˇlSli˚Addr
);

334 
	`Buf„rM™agemít_Sñe˘iveGëFromHashLi°
(
íåyIãøti⁄
, 0);

337 
DATA_BUF_ENTRY
* 
p_d©aBufE¡ry_
 = 
	`Buf„rM™agemít_GëD©aBufE¡ry
(
íåyIãøti⁄
);

338 
p_d©aBufE¡ry_
->
hashPªvE¡ry
 = 
DATA_BUF_IDX_INVALID
;

339 
p_d©aBufE¡ry_
->
hashNextE¡ry
 = 
DATA_BUF_IDX_INVALID
;

342 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_GëFªeReqE¡ry
();

343 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
 = 
REQ_TYPE_NAND
;

344 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqCode
 = 
REQ_CODE_WRITE
;

346 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
logiˇlSli˚Addr
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].logicalSliceAddr;

347 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
 = 
REQ_OPT_DATA_BUF_ENTRY
;

348 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
 = 
REQ_OPT_NAND_ADDR_VSA
;

349 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEcc
 = 
REQ_OPT_NAND_ECC_ON
;

350 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndEccW¨nög
 = 
REQ_OPT_NAND_ECC_WARNING_ON
;

351 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
 = 
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
;

352 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
blockS∑˚
 = 
REQ_OPT_BLOCK_SPACE_MAIN
;

353 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
 = 
íåyIãøti⁄
;

354 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

355 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].stream_id_1;

356 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
°ªam_id_2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].stream_id_2;

357 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].epoch_id_1;

358 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ïoch_id_2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].epoch_id_2;

359 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_1
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].mappable_1;

360 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
m≠∑bÀ_2
 = 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].mappable_2;

362 
	`Buf„rM™agemít_Upd©eBufE¡ryInfoBlockögReq
(
íåyIãøti⁄
, 
ªqSlŸTag
);

363 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
 = virtualSliceAddr;

366 
	`Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

368 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
dúty
 = 
DATA_BUF_CLEAN
;

371 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

372 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
°ªam_id_1
 = 0;

373 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
°ªam_id_2
 = 0;

374 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
ïoch_id_1
 = 0;

375 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
ïoch_id_2
 = 0;

376 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
m≠∑bÀ_1
 = 0;

377 
d©aBufM≠På
->
d©aBuf
[
íåyIãøti⁄
].
m≠∑bÀ_2
 = 0;

382 
	`Reque°ScheduÀr_SyncAŒLowLevñReqD⁄e
();

383 
	}
}

386 
	$Sñe˘LowLevñReqQ
(
ªqSlŸTag
)

388 
dõNo
, 
chNo
, 
wayNo
, 
bufDïCheckRï‹t
, 
rowAddrDïCheckRï‹t
, 
rowAddrDïTabÀUpd©eRï‹t
;

390 
bufDïCheckRï‹t
 = 
	`_CheckBufDï
(
ªqSlŸTag
);

392 i‡(
BUF_DEPENDENCY_REPORT_PASS
 =
bufDïCheckRï‹t
)

394 i‡(
REQ_TYPE_NVME_DMA
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
)

396 
	`hÆ_ho°_issue_hdma_ªq
(
ªqSlŸTag
);

397 
	`Reque°AŒoˇti⁄_MoveToNvmeDmaReqQ
(
ªqSlŸTag
);

399 i‡(
REQ_TYPE_NAND
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
)

401 i‡(
REQ_OPT_NAND_ADDR_VSA
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
)

403 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

404 
chNo
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

405 
wayNo
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

407 i‡(
REQ_OPT_NAND_ADDR_PHY_ORG
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
«ndAddr
)

409 
chNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlCh
;

410 
wayNo
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
«ndInfo
.
physiˇlWay
;

414 
	`as£π
(!"[WARNING] Not supportedÑeqOpt-nandAddress [WARNING]");

417 i‡(
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

419 
rowAddrDïCheckRï‹t
 = 
	`_CheckRowAddrDï
(
ªqSlŸTag
, 
ROW_ADDR_DEPENDENCY_CHECK_OPT_SELECT
);

421 if(
ROW_ADDR_DEPENDENCY_REPORT_PASS
 =
rowAddrDïCheckRï‹t
)

423 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

425 i‡(
ROW_ADDR_DEPENDENCY_REPORT_BLOCKED
 =
rowAddrDïCheckRï‹t
)

427 
	`Reque°AŒoˇti⁄_MoveToBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

431 
	`as£π
(!"[WARNING] Not supportedÑeport [WARNING]");

434 i‡(
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

436 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

440 
	`as£π
(!"[WARNING] Not supportedÑeqOpt [WARNING]");

446 
	`as£π
(!"[WARNING] Not supportedÑeqType [WARNING]");

449 i‡(
BUF_DEPENDENCY_REPORT_BLOCKED
 =
bufDïCheckRï‹t
)

451 i‡(
REQ_TYPE_NAND
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqTy≥
)

453 i‡(
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

455 
rowAddrDïTabÀUpd©eRï‹t
 = 
	`_Upd©eRowAddrDïTabÀF‹BufBlockedReq
(
ªqSlŸTag
);

457 i‡(
ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_DONE
 =
rowAddrDïTabÀUpd©eRï‹t
)

461 if(
ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_SYNC
 =
rowAddrDïTabÀUpd©eRï‹t
)

467 
	`as£π
(!"[WARNING] Not supportedÑeport [WARNING]");

472 
	`Reque°AŒoˇti⁄_MoveToBlockedByBufDïReqQ
(
ªqSlŸTag
);

476 
	`as£π
(!"[WARNING] Not supportedÑeport [WARNING]");

478 
	}
}

481 
	$Rñó£BlockedByBufDïReq
(
ªqSlŸTag
)

483 
èrgëReqSlŸTag
, 
dõNo
, 
chNo
, 
wayNo
, 
rowAddrDïCheckRï‹t
;

485 
èrgëReqSlŸTag
 = 
REQ_SLOT_TAG_NONE
;

487 i‡(
REQ_SLOT_TAG_NONE
 !
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtBlockögReq
)

489 
èrgëReqSlŸTag
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtBlockögReq
;

491 
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
¥evBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

492 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
√xtBlockögReq
 = 
REQ_SLOT_TAG_NONE
;

497 i‡(
REQ_OPT_DATA_BUF_ENTRY
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
)

499 i‡(
ªqSlŸTag
 =
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[ªqSlŸTag].
d©aBufInfo
.
íåy
].
blockögReqTaû
)

503 #i‡(
SUPPORT_BARRIER_FTL
 == 1)

505 i‡(
REQ_TYPE_NAND
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqTy≥
) {

506 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
°ªam_id_1
 = 0;

507 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
°ªam_id_2
 = 0;

508 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
ïoch_id_1
 = 0;

509 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
ïoch_id_2
 = 0;

510 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
m≠∑bÀ_1
 = 0;

511 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
m≠∑bÀ_2
 = 0;

532 
d©aBufM≠På
->
d©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
blockögReqTaû
 = 
REQ_SLOT_TAG_NONE
;

535 i‡(
REQ_OPT_DATA_BUF_TEMP_ENTRY
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
d©aBufF‹m©
)

537 if(
ªqSlŸTag
 =
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[ªqSlŸTag].
d©aBufInfo
.
íåy
].
blockögReqTaû
)

539 
ãmpD©aBufM≠På
->
ãmpD©aBuf
[
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
d©aBufInfo
.
íåy
].
blockögReqTaû
 = 
REQ_SLOT_TAG_NONE
;

543 if((
REQ_SLOT_TAG_NONE
 !
èrgëReqSlŸTag
)

544 && (
REQ_QUEUE_TYPE_BLOCKED_BY_BUF_DEP
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqQueueTy≥
))

546 
	`Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByBufDïReqQ
(
èrgëReqSlŸTag
);

548 i‡(
REQ_TYPE_NVME_DMA
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqTy≥
)

551 
	`hÆ_ho°_issue_hdma_ªq
(
èrgëReqSlŸTag
);

552 
	`Reque°AŒoˇti⁄_MoveToNvmeDmaReqQ
(
èrgëReqSlŸTag
);

554 i‡(
REQ_TYPE_NAND
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqTy≥
)

556 i‡(
REQ_OPT_NAND_ADDR_VSA
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqO±
.
«ndAddr
)

558 
dõNo
 = 
	`Vß2VdõTøn¶©i⁄
(
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
«ndInfo
.
vútuÆSli˚Addr
);

559 
chNo
 = 
	`Vdõ2PchTøn¶©i⁄
(
dõNo
);

560 
wayNo
 = 
	`Vdõ2PwayTøn¶©i⁄
(
dõNo
);

564 
	`as£π
(!"[WARNING] Not supportedÑeqOpt-nandAddress [WARNING]");

567 i‡(
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

569 
rowAddrDïCheckRï‹t
 = 
	`_CheckRowAddrDï
(
èrgëReqSlŸTag
, 
ROW_ADDR_DEPENDENCY_CHECK_OPT_RELEASE
);

571 i‡(
ROW_ADDR_DEPENDENCY_REPORT_PASS
 =
rowAddrDïCheckRï‹t
)

573 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
èrgëReqSlŸTag
, 
chNo
, 
wayNo
);

575 i‡(
ROW_ADDR_DEPENDENCY_REPORT_BLOCKED
 =
rowAddrDïCheckRï‹t
)

577 
	`Reque°AŒoˇti⁄_MoveToBlockedByRowAddrDïReqQ
(
èrgëReqSlŸTag
, 
chNo
, 
wayNo
);

581 
	`as£π
(!"[WARNING] Not supportedÑeport [WARNING]");

584 i‡(
REQ_OPT_ROW_ADDR_DEPENDENCY_NONE
 =
ªqPoﬁPå
->
ªqPoﬁ
[
èrgëReqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

586 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
èrgëReqSlŸTag
, 
chNo
, 
wayNo
);

590 
	`as£π
(!"[WARNING] Not supportedÑeqOpt [WARNING]");

594 
	}
}

597 
	$Rñó£BlockedByRowAddrDïReq
(
chNo
, 
wayNo
)

599 
ªqSlŸTag
, 
√xtReq
, 
rowAddrDïCheckRï‹t
;

601 
ªqSlŸTag
 = 
	`Reque°AŒoˇti⁄_PìkReqE¡ryFromBlockedByRowAddrDïReqQ
(
chNo
, 
wayNo
);

603 
REQ_SLOT_TAG_NONE
 !
ªqSlŸTag
)

605 
√xtReq
 = 
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].nextReq;

607 if(
REQ_OPT_ROW_ADDR_DEPENDENCY_CHECK
 =
ªqPoﬁPå
->
ªqPoﬁ
[
ªqSlŸTag
].
ªqO±
.
rowAddrDïídícyCheck
)

609 
rowAddrDïCheckRï‹t
 = 
	`_CheckRowAddrDï
(
ªqSlŸTag
, 
ROW_ADDR_DEPENDENCY_CHECK_OPT_RELEASE
);

611 if(
ROW_ADDR_DEPENDENCY_REPORT_PASS
 =
rowAddrDïCheckRï‹t
)

613 
	`Reque°AŒoˇti⁄_Sñe˘iveGëFromBlockedByRowAddrDïReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

614 
	`Reque°AŒoˇti⁄_MoveToN™dReqQ
(
ªqSlŸTag
, 
chNo
, 
wayNo
);

616 if(
ROW_ADDR_DEPENDENCY_REPORT_BLOCKED
 =
rowAddrDïCheckRï‹t
)

622 
	`as£π
(!"[WARNING] Not supportedÑeport [WARNING]");

627 
	`as£π
(!"[WARNING] Not supportedÑeqOpt [WARNING]");

630 
ªqSlŸTag
 = 
√xtReq
;

632 
	}
}

	@request_transform.h

46 #i‚de‡
REQUEST_TRANSFORM_H_


47 
	#REQUEST_TRANSFORM_H_


	)

49 
	~"·l/·l_c⁄fig.h
"

51 
	#ROW_ADDR_DEPENDENCY_CHECK_OPT_SELECT
 0

	)

52 
	#ROW_ADDR_DEPENDENCY_CHECK_OPT_RELEASE
 1

	)

54 
	#BUF_DEPENDENCY_REPORT_BLOCKED
 0

	)

55 
	#BUF_DEPENDENCY_REPORT_PASS
 1

	)

57 
	#ROW_ADDR_DEPENDENCY_REPORT_BLOCKED
 0

	)

58 
	#ROW_ADDR_DEPENDENCY_REPORT_PASS
 1

	)

60 
	#ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_DONE
 0

	)

61 
	#ROW_ADDR_DEPENDENCY_TABLE_UPDATE_REPORT_SYNC
 1

	)

64 
	s_ROW_ADDR_DEPENDENCY_ENTRY
 {

65 
	m≥rmôãdProgPage
 : 12;

66 
	mblockedRódReqC¡
 : 16;

67 
	mblockedEø£ReqFœg
 : 1;

68 
	mª£rved0
 : 3;

69 } 
	tROW_ADDR_DEPENDENCY_ENTRY
, *
	tP_ROW_ADDR_DEPENDENCY_ENTRY
;

71 
	s_ROW_ADDR_DEPENDENCY_TABLE
 {

72 
ROW_ADDR_DEPENDENCY_ENTRY
 
	mblock
[
USER_CHANNELS
][
USER_WAYS
][
MAIN_BLOCKS_PER_DIE
];

73 } 
	tROW_ADDR_DEPENDENCY_TABLE
, *
	tP_ROW_ADDR_DEPENDENCY_TABLE
;

75 
FlushWrôeD©aToN™d
();

77 
Sñe˘LowLevñReqQ
(
ªqSlŸTag
);

78 
Rñó£BlockedByBufDïReq
(
ªqSlŸTag
);

79 
Rñó£BlockedByRowAddrDïReq
(
chNo
, 
wayNo
);

81 
InôDïídícyTabÀ
();

83 
P_ROW_ADDR_DEPENDENCY_TABLE
 
rowAddrDïídícyTabÀPå
;

	@
1
.
1
/usr/include
46
900
data_buffer.c
data_buffer.h
debug.h
flash/flash_control.c
flash/flash_control.h
flash/nsc_driver.c
flash/nsc_driver.h
flash/t4nsc_pm.h
flash/t4nsc_ucode.h
ftl/address_translation.c
ftl/address_translation.h
ftl/barrier_ftl.c
ftl/barrier_ftl.h
ftl/ftl_config.c
ftl/ftl_config.h
ftl/garbage_collection.c
ftl/garbage_collection.h
hal/hal_host.c
hal/hal_host.h
hal/lld/host_lld.h
hal/lld/lld_hdma.c
hal/lld/lld_hdma.h
hal/lld/lld_nvme.c
hal/lld/lld_nvme.h
hal/lld/lld_pcie.c
hal/lld/lld_pcie.h
host/nvme/io_access.h
host/nvme/nvme.h
host/nvme/nvme_admin_cmd.c
host/nvme/nvme_admin_cmd.h
host/nvme/nvme_identify.c
host/nvme/nvme_identify.h
host/nvme/nvme_io_cmd.c
host/nvme/nvme_io_cmd.h
host/nvme/nvme_main.c
host/nvme/nvme_main.h
main.c
memory_map.h
request_allocation.c
request_allocation.h
request_format.h
request_queue.h
request_schedule.c
request_schedule.h
request_transform.c
request_transform.h
